
robotore_v2.5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash2 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         0000e408  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000390  08016408  08016408  00026408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08016798  08016798  000301e8  2**0
                  CONTENTS
  6 .ARM          00000008  08016798  08016798  00026798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  080167a0  080167a0  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  080167a0  080167a0  000267a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  080167a4  080167a4  000267a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001e8  20000000  080167a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000144d0  200001e8  08016990  000301e8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200146b8  08016990  000346b8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001cf6f  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00004071  00000000  00000000  0004d187  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001700  00000000  00000000  000511f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001550  00000000  00000000  000528f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0002403d  00000000  00000000  00053e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00014da0  00000000  00000000  00077e85  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000ca738  00000000  00000000  0008cc25  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0015735d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006e94  00000000  00000000  001573d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001e8 	.word	0x200001e8
 800801c:	00000000 	.word	0x00000000
 8008020:	080163f0 	.word	0x080163f0

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001ec 	.word	0x200001ec
 800803c:	080163f0 	.word	0x080163f0

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2f>:
 8008a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a20:	bf24      	itt	cs
 8008a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a2a:	d90d      	bls.n	8008a48 <__aeabi_d2f+0x30>
 8008a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a40:	bf08      	it	eq
 8008a42:	f020 0001 	biceq.w	r0, r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a4c:	d121      	bne.n	8008a92 <__aeabi_d2f+0x7a>
 8008a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a52:	bfbc      	itt	lt
 8008a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a58:	4770      	bxlt	lr
 8008a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a62:	f1c2 0218 	rsb	r2, r2, #24
 8008a66:	f1c2 0c20 	rsb	ip, r2, #32
 8008a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a72:	bf18      	it	ne
 8008a74:	f040 0001 	orrne.w	r0, r0, #1
 8008a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a84:	ea40 000c 	orr.w	r0, r0, ip
 8008a88:	fa23 f302 	lsr.w	r3, r3, r2
 8008a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a90:	e7cc      	b.n	8008a2c <__aeabi_d2f+0x14>
 8008a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a96:	d107      	bne.n	8008aa8 <__aeabi_d2f+0x90>
 8008a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a9c:	bf1e      	ittt	ne
 8008a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008aa6:	4770      	bxne	lr
 8008aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_uldivmod>:
 8008ab8:	b953      	cbnz	r3, 8008ad0 <__aeabi_uldivmod+0x18>
 8008aba:	b94a      	cbnz	r2, 8008ad0 <__aeabi_uldivmod+0x18>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2800      	cmpeq	r0, #0
 8008ac2:	bf1c      	itt	ne
 8008ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8008acc:	f000 b972 	b.w	8008db4 <__aeabi_idiv0>
 8008ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ad8:	f000 f806 	bl	8008ae8 <__udivmoddi4>
 8008adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr

08008ae8 <__udivmoddi4>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	9e08      	ldr	r6, [sp, #32]
 8008aee:	4604      	mov	r4, r0
 8008af0:	4688      	mov	r8, r1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14b      	bne.n	8008b8e <__udivmoddi4+0xa6>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	4615      	mov	r5, r2
 8008afa:	d967      	bls.n	8008bcc <__udivmoddi4+0xe4>
 8008afc:	fab2 f282 	clz	r2, r2
 8008b00:	b14a      	cbz	r2, 8008b16 <__udivmoddi4+0x2e>
 8008b02:	f1c2 0720 	rsb	r7, r2, #32
 8008b06:	fa01 f302 	lsl.w	r3, r1, r2
 8008b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b0e:	4095      	lsls	r5, r2
 8008b10:	ea47 0803 	orr.w	r8, r7, r3
 8008b14:	4094      	lsls	r4, r2
 8008b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b1a:	0c23      	lsrs	r3, r4, #16
 8008b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b20:	fa1f fc85 	uxth.w	ip, r5
 8008b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d909      	bls.n	8008b48 <__udivmoddi4+0x60>
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b3a:	f080 811b 	bcs.w	8008d74 <__udivmoddi4+0x28c>
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f240 8118 	bls.w	8008d74 <__udivmoddi4+0x28c>
 8008b44:	3f02      	subs	r7, #2
 8008b46:	442b      	add	r3, r5
 8008b48:	1a5b      	subs	r3, r3, r1
 8008b4a:	b2a4      	uxth	r4, r4
 8008b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b5c:	45a4      	cmp	ip, r4
 8008b5e:	d909      	bls.n	8008b74 <__udivmoddi4+0x8c>
 8008b60:	192c      	adds	r4, r5, r4
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	f080 8107 	bcs.w	8008d78 <__udivmoddi4+0x290>
 8008b6a:	45a4      	cmp	ip, r4
 8008b6c:	f240 8104 	bls.w	8008d78 <__udivmoddi4+0x290>
 8008b70:	3802      	subs	r0, #2
 8008b72:	442c      	add	r4, r5
 8008b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b78:	eba4 040c 	sub.w	r4, r4, ip
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	b11e      	cbz	r6, 8008b88 <__udivmoddi4+0xa0>
 8008b80:	40d4      	lsrs	r4, r2
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9c6 4300 	strd	r4, r3, [r6]
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	428b      	cmp	r3, r1
 8008b90:	d909      	bls.n	8008ba6 <__udivmoddi4+0xbe>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	f000 80eb 	beq.w	8008d6e <__udivmoddi4+0x286>
 8008b98:	2700      	movs	r7, #0
 8008b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	fab3 f783 	clz	r7, r3
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d147      	bne.n	8008c3e <__udivmoddi4+0x156>
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	d302      	bcc.n	8008bb8 <__udivmoddi4+0xd0>
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	f200 80fa 	bhi.w	8008dac <__udivmoddi4+0x2c4>
 8008bb8:	1a84      	subs	r4, r0, r2
 8008bba:	eb61 0303 	sbc.w	r3, r1, r3
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0e0      	beq.n	8008b88 <__udivmoddi4+0xa0>
 8008bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bca:	e7dd      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008bcc:	b902      	cbnz	r2, 8008bd0 <__udivmoddi4+0xe8>
 8008bce:	deff      	udf	#255	; 0xff
 8008bd0:	fab2 f282 	clz	r2, r2
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <__udivmoddi4+0x210>
 8008bda:	1b49      	subs	r1, r1, r5
 8008bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008be0:	fa1f f885 	uxth.w	r8, r5
 8008be4:	2701      	movs	r7, #1
 8008be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bea:	0c23      	lsrs	r3, r4, #16
 8008bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d907      	bls.n	8008c0c <__udivmoddi4+0x124>
 8008bfc:	18eb      	adds	r3, r5, r3
 8008bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x122>
 8008c04:	4299      	cmp	r1, r3
 8008c06:	f200 80cd 	bhi.w	8008da4 <__udivmoddi4+0x2bc>
 8008c0a:	4684      	mov	ip, r0
 8008c0c:	1a59      	subs	r1, r3, r1
 8008c0e:	b2a3      	uxth	r3, r4
 8008c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c1c:	fb08 f800 	mul.w	r8, r8, r0
 8008c20:	45a0      	cmp	r8, r4
 8008c22:	d907      	bls.n	8008c34 <__udivmoddi4+0x14c>
 8008c24:	192c      	adds	r4, r5, r4
 8008c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2a:	d202      	bcs.n	8008c32 <__udivmoddi4+0x14a>
 8008c2c:	45a0      	cmp	r8, r4
 8008c2e:	f200 80b6 	bhi.w	8008d9e <__udivmoddi4+0x2b6>
 8008c32:	4618      	mov	r0, r3
 8008c34:	eba4 0408 	sub.w	r4, r4, r8
 8008c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c3c:	e79f      	b.n	8008b7e <__udivmoddi4+0x96>
 8008c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c42:	40bb      	lsls	r3, r7
 8008c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c5c:	4325      	orrs	r5, r4
 8008c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c62:	0c2c      	lsrs	r4, r5, #16
 8008c64:	fb08 3319 	mls	r3, r8, r9, r3
 8008c68:	fa1f fa8e 	uxth.w	sl, lr
 8008c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c70:	fb09 f40a 	mul.w	r4, r9, sl
 8008c74:	429c      	cmp	r4, r3
 8008c76:	fa02 f207 	lsl.w	r2, r2, r7
 8008c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c7e:	d90b      	bls.n	8008c98 <__udivmoddi4+0x1b0>
 8008c80:	eb1e 0303 	adds.w	r3, lr, r3
 8008c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c88:	f080 8087 	bcs.w	8008d9a <__udivmoddi4+0x2b2>
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	f240 8084 	bls.w	8008d9a <__udivmoddi4+0x2b2>
 8008c92:	f1a9 0902 	sub.w	r9, r9, #2
 8008c96:	4473      	add	r3, lr
 8008c98:	1b1b      	subs	r3, r3, r4
 8008c9a:	b2ad      	uxth	r5, r5
 8008c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cac:	45a2      	cmp	sl, r4
 8008cae:	d908      	bls.n	8008cc2 <__udivmoddi4+0x1da>
 8008cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d26b      	bcs.n	8008d92 <__udivmoddi4+0x2aa>
 8008cba:	45a2      	cmp	sl, r4
 8008cbc:	d969      	bls.n	8008d92 <__udivmoddi4+0x2aa>
 8008cbe:	3802      	subs	r0, #2
 8008cc0:	4474      	add	r4, lr
 8008cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cca:	eba4 040a 	sub.w	r4, r4, sl
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	46c2      	mov	sl, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	d354      	bcc.n	8008d80 <__udivmoddi4+0x298>
 8008cd6:	d051      	beq.n	8008d7c <__udivmoddi4+0x294>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d069      	beq.n	8008db0 <__udivmoddi4+0x2c8>
 8008cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8008ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ce8:	40fd      	lsrs	r5, r7
 8008cea:	40fc      	lsrs	r4, r7
 8008cec:	ea4c 0505 	orr.w	r5, ip, r5
 8008cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e747      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008cf8:	f1c2 0320 	rsb	r3, r2, #32
 8008cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8008d00:	4095      	lsls	r5, r2
 8008d02:	fa01 f002 	lsl.w	r0, r1, r2
 8008d06:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d0e:	4338      	orrs	r0, r7
 8008d10:	0c01      	lsrs	r1, r0, #16
 8008d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d16:	fa1f f885 	uxth.w	r8, r5
 8008d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d22:	fb07 f308 	mul.w	r3, r7, r8
 8008d26:	428b      	cmp	r3, r1
 8008d28:	fa04 f402 	lsl.w	r4, r4, r2
 8008d2c:	d907      	bls.n	8008d3e <__udivmoddi4+0x256>
 8008d2e:	1869      	adds	r1, r5, r1
 8008d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d34:	d22f      	bcs.n	8008d96 <__udivmoddi4+0x2ae>
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d92d      	bls.n	8008d96 <__udivmoddi4+0x2ae>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	4429      	add	r1, r5
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	b281      	uxth	r1, r0
 8008d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d4e:	fb00 f308 	mul.w	r3, r0, r8
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d907      	bls.n	8008d66 <__udivmoddi4+0x27e>
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d5c:	d217      	bcs.n	8008d8e <__udivmoddi4+0x2a6>
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d915      	bls.n	8008d8e <__udivmoddi4+0x2a6>
 8008d62:	3802      	subs	r0, #2
 8008d64:	4429      	add	r1, r5
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d6c:	e73b      	b.n	8008be6 <__udivmoddi4+0xfe>
 8008d6e:	4637      	mov	r7, r6
 8008d70:	4630      	mov	r0, r6
 8008d72:	e709      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008d74:	4607      	mov	r7, r0
 8008d76:	e6e7      	b.n	8008b48 <__udivmoddi4+0x60>
 8008d78:	4618      	mov	r0, r3
 8008d7a:	e6fb      	b.n	8008b74 <__udivmoddi4+0x8c>
 8008d7c:	4541      	cmp	r1, r8
 8008d7e:	d2ab      	bcs.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d84:	eb69 020e 	sbc.w	r2, r9, lr
 8008d88:	3801      	subs	r0, #1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7a4      	b.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d8e:	4660      	mov	r0, ip
 8008d90:	e7e9      	b.n	8008d66 <__udivmoddi4+0x27e>
 8008d92:	4618      	mov	r0, r3
 8008d94:	e795      	b.n	8008cc2 <__udivmoddi4+0x1da>
 8008d96:	4667      	mov	r7, ip
 8008d98:	e7d1      	b.n	8008d3e <__udivmoddi4+0x256>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e77c      	b.n	8008c98 <__udivmoddi4+0x1b0>
 8008d9e:	3802      	subs	r0, #2
 8008da0:	442c      	add	r4, r5
 8008da2:	e747      	b.n	8008c34 <__udivmoddi4+0x14c>
 8008da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008da8:	442b      	add	r3, r5
 8008daa:	e72f      	b.n	8008c0c <__udivmoddi4+0x124>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e708      	b.n	8008bc2 <__udivmoddi4+0xda>
 8008db0:	4637      	mov	r7, r6
 8008db2:	e6e9      	b.n	8008b88 <__udivmoddi4+0xa0>

08008db4 <__aeabi_idiv0>:
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af02      	add	r7, sp, #8
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	733b      	strb	r3, [r7, #12]
 8008dc6:	79fb      	ldrb	r3, [r7, #7]
 8008dc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8008dca:	f107 020c 	add.w	r2, r7, #12
 8008dce:	2364      	movs	r3, #100	; 0x64
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	217c      	movs	r1, #124	; 0x7c
 8008dd6:	4803      	ldr	r0, [pc, #12]	; (8008de4 <lcd_cmd+0x2c>)
 8008dd8:	f007 fb4e 	bl	8010478 <HAL_I2C_Master_Transmit>
}
 8008ddc:	bf00      	nop
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	20014564 	.word	0x20014564

08008de8 <lcd_data>:

void lcd_data(uint8_t data) {
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af02      	add	r7, sp, #8
 8008dee:	4603      	mov	r3, r0
 8008df0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8008df2:	2340      	movs	r3, #64	; 0x40
 8008df4:	733b      	strb	r3, [r7, #12]
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8008dfa:	f107 020c 	add.w	r2, r7, #12
 8008dfe:	2364      	movs	r3, #100	; 0x64
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	2302      	movs	r3, #2
 8008e04:	217c      	movs	r1, #124	; 0x7c
 8008e06:	4803      	ldr	r0, [pc, #12]	; (8008e14 <lcd_data+0x2c>)
 8008e08:	f007 fb36 	bl	8010478 <HAL_I2C_Master_Transmit>
}
 8008e0c:	bf00      	nop
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	20014564 	.word	0x20014564

08008e18 <lcd_init>:

void lcd_init(){
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	2110      	movs	r1, #16
 8008e20:	481e      	ldr	r0, [pc, #120]	; (8008e9c <lcd_init+0x84>)
 8008e22:	f007 f9d7 	bl	80101d4 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8008e26:	2028      	movs	r0, #40	; 0x28
 8008e28:	f005 fc9e 	bl	800e768 <HAL_Delay>
	lcd_cmd(0x38);
 8008e2c:	2038      	movs	r0, #56	; 0x38
 8008e2e:	f7ff ffc3 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e32:	2001      	movs	r0, #1
 8008e34:	f005 fc98 	bl	800e768 <HAL_Delay>
	lcd_cmd(0x39);
 8008e38:	2039      	movs	r0, #57	; 0x39
 8008e3a:	f7ff ffbd 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e3e:	2001      	movs	r0, #1
 8008e40:	f005 fc92 	bl	800e768 <HAL_Delay>
	lcd_cmd(0x14);
 8008e44:	2014      	movs	r0, #20
 8008e46:	f7ff ffb7 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e4a:	2001      	movs	r0, #1
 8008e4c:	f005 fc8c 	bl	800e768 <HAL_Delay>
	lcd_cmd(0x70);
 8008e50:	2070      	movs	r0, #112	; 0x70
 8008e52:	f7ff ffb1 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e56:	2001      	movs	r0, #1
 8008e58:	f005 fc86 	bl	800e768 <HAL_Delay>
	lcd_cmd(0x56);
 8008e5c:	2056      	movs	r0, #86	; 0x56
 8008e5e:	f7ff ffab 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e62:	2001      	movs	r0, #1
 8008e64:	f005 fc80 	bl	800e768 <HAL_Delay>
	lcd_cmd(0x6C);
 8008e68:	206c      	movs	r0, #108	; 0x6c
 8008e6a:	f7ff ffa5 	bl	8008db8 <lcd_cmd>
	HAL_Delay(200);
 8008e6e:	20c8      	movs	r0, #200	; 0xc8
 8008e70:	f005 fc7a 	bl	800e768 <HAL_Delay>
	lcd_cmd(0x38);
 8008e74:	2038      	movs	r0, #56	; 0x38
 8008e76:	f7ff ff9f 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e7a:	2001      	movs	r0, #1
 8008e7c:	f005 fc74 	bl	800e768 <HAL_Delay>
	lcd_cmd(0x0C);
 8008e80:	200c      	movs	r0, #12
 8008e82:	f7ff ff99 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e86:	2001      	movs	r0, #1
 8008e88:	f005 fc6e 	bl	800e768 <HAL_Delay>
	lcd_cmd(0x01);
 8008e8c:	2001      	movs	r0, #1
 8008e8e:	f7ff ff93 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e92:	2001      	movs	r0, #1
 8008e94:	f005 fc68 	bl	800e768 <HAL_Delay>
}
 8008e98:	bf00      	nop
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	40020000 	.word	0x40020000

08008ea0 <lcd_clear>:

void lcd_clear(){
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 8008ea4:	2001      	movs	r0, #1
 8008ea6:	f7ff ff87 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008eaa:	2001      	movs	r0, #1
 8008eac:	f005 fc5c 	bl	800e768 <HAL_Delay>
	lcd_cmd(0x02);
 8008eb0:	2002      	movs	r0, #2
 8008eb2:	f7ff ff81 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	f005 fc56 	bl	800e768 <HAL_Delay>
}
 8008ebc:	bf00      	nop
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <lcd_locate>:

void lcd_locate(int x, int y) {
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	3302      	adds	r3, #2
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	019b      	lsls	r3, r3, #6
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	4413      	add	r3, r2
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7ff ff6b 	bl	8008db8 <lcd_cmd>
}
 8008ee2:	bf00      	nop
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <lcd_print>:

void lcd_print(const char *str) {
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b082      	sub	sp, #8
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 8008ef2:	e007      	b.n	8008f04 <lcd_print+0x1a>
	{
			lcd_data(*str);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff ff75 	bl	8008de8 <lcd_data>
			str++;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	3301      	adds	r3, #1
 8008f02:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1f3      	bne.n	8008ef4 <lcd_print+0xa>
	}
}
 8008f0c:	bf00      	nop
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8008f14:	b40f      	push	{r0, r1, r2, r3}
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b088      	sub	sp, #32
 8008f1a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 8008f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f20:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8008f22:	1d3b      	adds	r3, r7, #4
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f00b f9ed 	bl	8014308 <vsiprintf>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8008f32:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	dd03      	ble.n	8008f42 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 8008f3a:	1d3b      	adds	r3, r7, #4
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7ff ffd4 	bl	8008eea <lcd_print>
	}

	return ret;
 8008f42:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3720      	adds	r7, #32
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f50:	b004      	add	sp, #16
 8008f52:	4770      	bx	lr

08008f54 <log_init>:
int count_num=0;
uint8_t second_soeed=0;
uint16_t correction[200]= {0};
uint8_t cross_maker=0;
extern float test;
void log_init (){
 8008f54:	b480      	push	{r7}
 8008f56:	af00      	add	r7, sp, #0
	actual__callog_adress = start_adress_sector6;
 8008f58:	4b0f      	ldr	r3, [pc, #60]	; (8008f98 <log_init+0x44>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a0f      	ldr	r2, [pc, #60]	; (8008f9c <log_init+0x48>)
 8008f5e:	6013      	str	r3, [r2, #0]
	callog_adress = start_adress_sector7;
 8008f60:	4b0f      	ldr	r3, [pc, #60]	; (8008fa0 <log_init+0x4c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a0f      	ldr	r2, [pc, #60]	; (8008fa4 <log_init+0x50>)
 8008f66:	6013      	str	r3, [r2, #0]
	actual__velo_adress = start_adress_sector8;
 8008f68:	4b0f      	ldr	r3, [pc, #60]	; (8008fa8 <log_init+0x54>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a0f      	ldr	r2, [pc, #60]	; (8008fac <log_init+0x58>)
 8008f6e:	6013      	str	r3, [r2, #0]
	loadlog_adress = start_adress_sector9;
 8008f70:	4b0f      	ldr	r3, [pc, #60]	; (8008fb0 <log_init+0x5c>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a0f      	ldr	r2, [pc, #60]	; (8008fb4 <log_init+0x60>)
 8008f76:	6013      	str	r3, [r2, #0]
	side_adress = start_adress_sector10;
 8008f78:	4b0f      	ldr	r3, [pc, #60]	; (8008fb8 <log_init+0x64>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a0f      	ldr	r2, [pc, #60]	; (8008fbc <log_init+0x68>)
 8008f7e:	6013      	str	r3, [r2, #0]
	plan_velo_adress=start_adress_sector11;
 8008f80:	4b0f      	ldr	r3, [pc, #60]	; (8008fc0 <log_init+0x6c>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a0f      	ldr	r2, [pc, #60]	; (8008fc4 <log_init+0x70>)
 8008f86:	6013      	str	r3, [r2, #0]
	log_count=0;
 8008f88:	4b0f      	ldr	r3, [pc, #60]	; (8008fc8 <log_init+0x74>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	601a      	str	r2, [r3, #0]
}
 8008f8e:	bf00      	nop
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr
 8008f98:	0801649c 	.word	0x0801649c
 8008f9c:	2000c2e8 	.word	0x2000c2e8
 8008fa0:	080164a0 	.word	0x080164a0
 8008fa4:	2000c2ec 	.word	0x2000c2ec
 8008fa8:	080164a4 	.word	0x080164a4
 8008fac:	2000c2f8 	.word	0x2000c2f8
 8008fb0:	080164a8 	.word	0x080164a8
 8008fb4:	2000c2f4 	.word	0x2000c2f4
 8008fb8:	080164ac 	.word	0x080164ac
 8008fbc:	2000c2fc 	.word	0x2000c2fc
 8008fc0:	080164b0 	.word	0x080164b0
 8008fc4:	2000c2f0 	.word	0x2000c2f0
 8008fc8:	2000c0b4 	.word	0x2000c0b4

08008fcc <speed_sloow>:
void speed_sloow(int a,int b,float speed){
 8008fcc:	b480      	push	{r7}
 8008fce:	b087      	sub	sp, #28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	ed87 0a01 	vstr	s0, [r7, #4]
	for(int i=a;i<=b;i++){
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	617b      	str	r3, [r7, #20]
 8008fde:	e008      	b.n	8008ff2 <speed_sloow+0x26>
		secondsp[i] = speed;
 8008fe0:	4a09      	ldr	r2, [pc, #36]	; (8009008 <speed_sloow+0x3c>)
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	601a      	str	r2, [r3, #0]
	for(int i=a;i<=b;i++){
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	617b      	str	r3, [r7, #20]
 8008ff2:	697a      	ldr	r2, [r7, #20]
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	ddf2      	ble.n	8008fe0 <speed_sloow+0x14>
	}
}
 8008ffa:	bf00      	nop
 8008ffc:	371c      	adds	r7, #28
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	20000210 	.word	0x20000210

0800900c <log_write>:
void log_write(float u){
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	ed87 0a01 	vstr	s0, [r7, #4]
	  FLASH_Write_Word_F(callog_adress,u);
 8009016:	4b0f      	ldr	r3, [pc, #60]	; (8009054 <log_write+0x48>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	ed97 0a01 	vldr	s0, [r7, #4]
 800901e:	4618      	mov	r0, r3
 8009020:	f001 fba6 	bl	800a770 <FLASH_Write_Word_F>
	  FLASH_Write_Word_F(loadlog_adress,load_log);
 8009024:	4b0c      	ldr	r3, [pc, #48]	; (8009058 <log_write+0x4c>)
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	4b0c      	ldr	r3, [pc, #48]	; (800905c <log_write+0x50>)
 800902a:	edd3 7a00 	vldr	s15, [r3]
 800902e:	eeb0 0a67 	vmov.f32	s0, s15
 8009032:	4610      	mov	r0, r2
 8009034:	f001 fb9c 	bl	800a770 <FLASH_Write_Word_F>
	  callog_adress+= 0x04;
 8009038:	4b06      	ldr	r3, [pc, #24]	; (8009054 <log_write+0x48>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	3304      	adds	r3, #4
 800903e:	4a05      	ldr	r2, [pc, #20]	; (8009054 <log_write+0x48>)
 8009040:	6013      	str	r3, [r2, #0]
	  loadlog_adress+= 0x04;
 8009042:	4b05      	ldr	r3, [pc, #20]	; (8009058 <log_write+0x4c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	3304      	adds	r3, #4
 8009048:	4a03      	ldr	r2, [pc, #12]	; (8009058 <log_write+0x4c>)
 800904a:	6013      	str	r3, [r2, #0]
}
 800904c:	bf00      	nop
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	2000c2ec 	.word	0x2000c2ec
 8009058:	2000c2f4 	.word	0x2000c2f4
 800905c:	20000204 	.word	0x20000204

08009060 <first_cale>:
inline void first_cale(){
 8009060:	b5b0      	push	{r4, r5, r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
	static float cale_val=0;
	static float cale_buff=0;
	static uint16_t num=0;
	float cale=0;
 8009066:	f04f 0300 	mov.w	r3, #0
 800906a:	607b      	str	r3, [r7, #4]
	static int frp=0;
	static int frap=0;
	static int d=39;
	static uint16_t coi=0;
	num++;
 800906c:	4b88      	ldr	r3, [pc, #544]	; (8009290 <first_cale+0x230>)
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	3301      	adds	r3, #1
 8009072:	b29a      	uxth	r2, r3
 8009074:	4b86      	ldr	r3, [pc, #536]	; (8009290 <first_cale+0x230>)
 8009076:	801a      	strh	r2, [r3, #0]
	cale_val += calc_angle()*T;
 8009078:	f001 fcba 	bl	800a9f0 <calc_angle>
 800907c:	ee10 3a10 	vmov	r3, s0
 8009080:	4618      	mov	r0, r3
 8009082:	f7ff f999 	bl	80083b8 <__aeabi_f2d>
 8009086:	a37c      	add	r3, pc, #496	; (adr r3, 8009278 <first_cale+0x218>)
 8009088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908c:	f7ff f9ec 	bl	8008468 <__aeabi_dmul>
 8009090:	4603      	mov	r3, r0
 8009092:	460c      	mov	r4, r1
 8009094:	4625      	mov	r5, r4
 8009096:	461c      	mov	r4, r3
 8009098:	4b7e      	ldr	r3, [pc, #504]	; (8009294 <first_cale+0x234>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4618      	mov	r0, r3
 800909e:	f7ff f98b 	bl	80083b8 <__aeabi_f2d>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4620      	mov	r0, r4
 80090a8:	4629      	mov	r1, r5
 80090aa:	f7ff f827 	bl	80080fc <__adddf3>
 80090ae:	4603      	mov	r3, r0
 80090b0:	460c      	mov	r4, r1
 80090b2:	4618      	mov	r0, r3
 80090b4:	4621      	mov	r1, r4
 80090b6:	f7ff fcaf 	bl	8008a18 <__aeabi_d2f>
 80090ba:	4602      	mov	r2, r0
 80090bc:	4b75      	ldr	r3, [pc, #468]	; (8009294 <first_cale+0x234>)
 80090be:	601a      	str	r2, [r3, #0]

	if(log2_flag) {
 80090c0:	4b75      	ldr	r3, [pc, #468]	; (8009298 <first_cale+0x238>)
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d070      	beq.n	80091aa <first_cale+0x14a>
		coi++;
 80090c8:	4b74      	ldr	r3, [pc, #464]	; (800929c <first_cale+0x23c>)
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	3301      	adds	r3, #1
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	4b72      	ldr	r3, [pc, #456]	; (800929c <first_cale+0x23c>)
 80090d2:	801a      	strh	r2, [r3, #0]
		cale = cale_val;
 80090d4:	4b6f      	ldr	r3, [pc, #444]	; (8009294 <first_cale+0x234>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	607b      	str	r3, [r7, #4]

		log_write(cale_val);
 80090da:	4b6e      	ldr	r3, [pc, #440]	; (8009294 <first_cale+0x234>)
 80090dc:	edd3 7a00 	vldr	s15, [r3]
 80090e0:	eeb0 0a67 	vmov.f32	s0, s15
 80090e4:	f7ff ff92 	bl	800900c <log_write>
		cale_val=0;
 80090e8:	4b6a      	ldr	r3, [pc, #424]	; (8009294 <first_cale+0x234>)
 80090ea:	f04f 0200 	mov.w	r2, #0
 80090ee:	601a      	str	r2, [r3, #0]
		if((cale_buff-cale)<=0.05 && (cale_buff-cale)>=-0.05 ) frp++;
 80090f0:	4b6b      	ldr	r3, [pc, #428]	; (80092a0 <first_cale+0x240>)
 80090f2:	ed93 7a00 	vldr	s14, [r3]
 80090f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80090fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090fe:	ee17 0a90 	vmov	r0, s15
 8009102:	f7ff f959 	bl	80083b8 <__aeabi_f2d>
 8009106:	a35e      	add	r3, pc, #376	; (adr r3, 8009280 <first_cale+0x220>)
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	f7ff fc28 	bl	8008960 <__aeabi_dcmple>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d017      	beq.n	8009146 <first_cale+0xe6>
 8009116:	4b62      	ldr	r3, [pc, #392]	; (80092a0 <first_cale+0x240>)
 8009118:	ed93 7a00 	vldr	s14, [r3]
 800911c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009124:	ee17 0a90 	vmov	r0, s15
 8009128:	f7ff f946 	bl	80083b8 <__aeabi_f2d>
 800912c:	a356      	add	r3, pc, #344	; (adr r3, 8009288 <first_cale+0x228>)
 800912e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009132:	f7ff fc1f 	bl	8008974 <__aeabi_dcmpge>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d004      	beq.n	8009146 <first_cale+0xe6>
 800913c:	4b59      	ldr	r3, [pc, #356]	; (80092a4 <first_cale+0x244>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	3301      	adds	r3, #1
 8009142:	4a58      	ldr	r2, [pc, #352]	; (80092a4 <first_cale+0x244>)
 8009144:	6013      	str	r3, [r2, #0]
		cale_buff = cale;
 8009146:	4a56      	ldr	r2, [pc, #344]	; (80092a0 <first_cale+0x240>)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6013      	str	r3, [r2, #0]
		if(frp >= 50 || cross_line){
 800914c:	4b55      	ldr	r3, [pc, #340]	; (80092a4 <first_cale+0x244>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b31      	cmp	r3, #49	; 0x31
 8009152:	dc03      	bgt.n	800915c <first_cale+0xfc>
 8009154:	4b54      	ldr	r3, [pc, #336]	; (80092a8 <first_cale+0x248>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d01a      	beq.n	8009192 <first_cale+0x132>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800915c:	2200      	movs	r2, #0
 800915e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009162:	4852      	ldr	r0, [pc, #328]	; (80092ac <first_cale+0x24c>)
 8009164:	f007 f836 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8009168:	2200      	movs	r2, #0
 800916a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800916e:	484f      	ldr	r0, [pc, #316]	; (80092ac <first_cale+0x24c>)
 8009170:	f007 f830 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8009174:	2200      	movs	r2, #0
 8009176:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800917a:	484c      	ldr	r0, [pc, #304]	; (80092ac <first_cale+0x24c>)
 800917c:	f007 f82a 	bl	80101d4 <HAL_GPIO_WritePin>
			straight_flag = true;
 8009180:	4b4b      	ldr	r3, [pc, #300]	; (80092b0 <first_cale+0x250>)
 8009182:	2201      	movs	r2, #1
 8009184:	701a      	strb	r2, [r3, #0]
			frp=30;
 8009186:	4b47      	ldr	r3, [pc, #284]	; (80092a4 <first_cale+0x244>)
 8009188:	221e      	movs	r2, #30
 800918a:	601a      	str	r2, [r3, #0]
			frap =0;
 800918c:	4b49      	ldr	r3, [pc, #292]	; (80092b4 <first_cale+0x254>)
 800918e:	2200      	movs	r2, #0
 8009190:	601a      	str	r2, [r3, #0]
//			straight_flag = false;
//			frap = 0;
//			frp=0;
//		}

		log2_flag=0;
 8009192:	4b41      	ldr	r3, [pc, #260]	; (8009298 <first_cale+0x238>)
 8009194:	2200      	movs	r2, #0
 8009196:	701a      	strb	r2, [r3, #0]
		//cale_val=0;
		num=0;
 8009198:	4b3d      	ldr	r3, [pc, #244]	; (8009290 <first_cale+0x230>)
 800919a:	2200      	movs	r2, #0
 800919c:	801a      	strh	r2, [r3, #0]
		co++;
 800919e:	4b46      	ldr	r3, [pc, #280]	; (80092b8 <first_cale+0x258>)
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	3301      	adds	r3, #1
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	4b44      	ldr	r3, [pc, #272]	; (80092b8 <first_cale+0x258>)
 80091a8:	801a      	strh	r2, [r3, #0]
	}

//	if(straight_flag==1  && correc_maker==1){
	//if(coi>=30)HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
	if(correc_maker==1 && straight_flag==1 ){
 80091aa:	4b44      	ldr	r3, [pc, #272]	; (80092bc <first_cale+0x25c>)
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d12e      	bne.n	8009210 <first_cale+0x1b0>
 80091b2:	4b3f      	ldr	r3, [pc, #252]	; (80092b0 <first_cale+0x250>)
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d12a      	bne.n	8009210 <first_cale+0x1b0>
//	if(correc_maker==1){
		FLASH_Write_Word_S(side_adress,log_count);
 80091ba:	4b41      	ldr	r3, [pc, #260]	; (80092c0 <first_cale+0x260>)
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	4b41      	ldr	r3, [pc, #260]	; (80092c4 <first_cale+0x264>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4619      	mov	r1, r3
 80091c4:	4610      	mov	r0, r2
 80091c6:	f001 faab 	bl	800a720 <FLASH_Write_Word_S>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80091ca:	2201      	movs	r2, #1
 80091cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80091d0:	4836      	ldr	r0, [pc, #216]	; (80092ac <first_cale+0x24c>)
 80091d2:	f006 ffff 	bl	80101d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80091d6:	2201      	movs	r2, #1
 80091d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80091dc:	4833      	ldr	r0, [pc, #204]	; (80092ac <first_cale+0x24c>)
 80091de:	f006 fff9 	bl	80101d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80091e2:	2201      	movs	r2, #1
 80091e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80091e8:	4830      	ldr	r0, [pc, #192]	; (80092ac <first_cale+0x24c>)
 80091ea:	f006 fff3 	bl	80101d4 <HAL_GPIO_WritePin>
		side_adress+= 0x04;
 80091ee:	4b34      	ldr	r3, [pc, #208]	; (80092c0 <first_cale+0x260>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3304      	adds	r3, #4
 80091f4:	4a32      	ldr	r2, [pc, #200]	; (80092c0 <first_cale+0x260>)
 80091f6:	6013      	str	r3, [r2, #0]
		straight_flag=false;
 80091f8:	4b2d      	ldr	r3, [pc, #180]	; (80092b0 <first_cale+0x250>)
 80091fa:	2200      	movs	r2, #0
 80091fc:	701a      	strb	r2, [r3, #0]
		correc_maker = false;
 80091fe:	4b2f      	ldr	r3, [pc, #188]	; (80092bc <first_cale+0x25c>)
 8009200:	2200      	movs	r2, #0
 8009202:	701a      	strb	r2, [r3, #0]
		coi=0;
 8009204:	4b25      	ldr	r3, [pc, #148]	; (800929c <first_cale+0x23c>)
 8009206:	2200      	movs	r2, #0
 8009208:	801a      	strh	r2, [r3, #0]
		frp=0;
 800920a:	4b26      	ldr	r3, [pc, #152]	; (80092a4 <first_cale+0x244>)
 800920c:	2200      	movs	r2, #0
 800920e:	601a      	str	r2, [r3, #0]
	}
	if(correc_maker==1){
 8009210:	4b2a      	ldr	r3, [pc, #168]	; (80092bc <first_cale+0x25c>)
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d105      	bne.n	8009224 <first_cale+0x1c4>
		straight_flag = false;
 8009218:	4b25      	ldr	r3, [pc, #148]	; (80092b0 <first_cale+0x250>)
 800921a:	2200      	movs	r2, #0
 800921c:	701a      	strb	r2, [r3, #0]
		frp= 0;
 800921e:	4b21      	ldr	r3, [pc, #132]	; (80092a4 <first_cale+0x244>)
 8009220:	2200      	movs	r2, #0
 8009222:	601a      	str	r2, [r3, #0]
		//coi=0;
	}
	if(cross_maker){
 8009224:	4b28      	ldr	r3, [pc, #160]	; (80092c8 <first_cale+0x268>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d021      	beq.n	8009270 <first_cale+0x210>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800922c:	2201      	movs	r2, #1
 800922e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009232:	481e      	ldr	r0, [pc, #120]	; (80092ac <first_cale+0x24c>)
 8009234:	f006 ffce 	bl	80101d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8009238:	2201      	movs	r2, #1
 800923a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800923e:	481b      	ldr	r0, [pc, #108]	; (80092ac <first_cale+0x24c>)
 8009240:	f006 ffc8 	bl	80101d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8009244:	2201      	movs	r2, #1
 8009246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800924a:	4818      	ldr	r0, [pc, #96]	; (80092ac <first_cale+0x24c>)
 800924c:	f006 ffc2 	bl	80101d4 <HAL_GPIO_WritePin>
		work_ram[d] = log_count;
 8009250:	4b1c      	ldr	r3, [pc, #112]	; (80092c4 <first_cale+0x264>)
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	4b1d      	ldr	r3, [pc, #116]	; (80092cc <first_cale+0x26c>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	b291      	uxth	r1, r2
 800925a:	4a1d      	ldr	r2, [pc, #116]	; (80092d0 <first_cale+0x270>)
 800925c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		cross_maker = false;
 8009260:	4b19      	ldr	r3, [pc, #100]	; (80092c8 <first_cale+0x268>)
 8009262:	2200      	movs	r2, #0
 8009264:	701a      	strb	r2, [r3, #0]
		d++;
 8009266:	4b19      	ldr	r3, [pc, #100]	; (80092cc <first_cale+0x26c>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3301      	adds	r3, #1
 800926c:	4a17      	ldr	r2, [pc, #92]	; (80092cc <first_cale+0x26c>)
 800926e:	6013      	str	r3, [r2, #0]
	}


}
 8009270:	bf00      	nop
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bdb0      	pop	{r4, r5, r7, pc}
 8009278:	d2f1a9fc 	.word	0xd2f1a9fc
 800927c:	3f50624d 	.word	0x3f50624d
 8009280:	9999999a 	.word	0x9999999a
 8009284:	3fa99999 	.word	0x3fa99999
 8009288:	9999999a 	.word	0x9999999a
 800928c:	bfa99999 	.word	0xbfa99999
 8009290:	2000c252 	.word	0x2000c252
 8009294:	2000c254 	.word	0x2000c254
 8009298:	2000020b 	.word	0x2000020b
 800929c:	2000c258 	.word	0x2000c258
 80092a0:	2000c25c 	.word	0x2000c25c
 80092a4:	2000c260 	.word	0x2000c260
 80092a8:	2000c2d0 	.word	0x2000c2d0
 80092ac:	40020000 	.word	0x40020000
 80092b0:	2000020c 	.word	0x2000020c
 80092b4:	2000c264 	.word	0x2000c264
 80092b8:	20000208 	.word	0x20000208
 80092bc:	2000c0b0 	.word	0x2000c0b0
 80092c0:	2000c2fc 	.word	0x2000c2fc
 80092c4:	2000c0b4 	.word	0x2000c0b4
 80092c8:	2000c250 	.word	0x2000c250
 80092cc:	20000000 	.word	0x20000000
 80092d0:	2000c318 	.word	0x2000c318

080092d4 <first_driv>:
inline void first_driv(float log){
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	ed87 0a01 	vstr	s0, [r7, #4]
	static float logbuff=0;
	static float buff=0;
	//	logbuff = logbuff + log;

		logbuff += log;
 80092de:	4b19      	ldr	r3, [pc, #100]	; (8009344 <first_driv+0x70>)
 80092e0:	ed93 7a00 	vldr	s14, [r3]
 80092e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80092e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092ec:	4b15      	ldr	r3, [pc, #84]	; (8009344 <first_driv+0x70>)
 80092ee:	edc3 7a00 	vstr	s15, [r3]
		load_log =logbuff;
 80092f2:	4b14      	ldr	r3, [pc, #80]	; (8009344 <first_driv+0x70>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a14      	ldr	r2, [pc, #80]	; (8009348 <first_driv+0x74>)
 80092f8:	6013      	str	r3, [r2, #0]
	//		logbuff = logbuff-10.0;
	//		buff = logbuff;
	//		log_count++;
	//
	//	}
		if((logbuff-buff)>=10.000){
 80092fa:	4b12      	ldr	r3, [pc, #72]	; (8009344 <first_driv+0x70>)
 80092fc:	ed93 7a00 	vldr	s14, [r3]
 8009300:	4b12      	ldr	r3, [pc, #72]	; (800934c <first_driv+0x78>)
 8009302:	edd3 7a00 	vldr	s15, [r3]
 8009306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800930a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800930e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009316:	da00      	bge.n	800931a <first_driv+0x46>
			//logbuff = 0;
			//buff = logbuff;
			log_count++;

		}
}
 8009318:	e00e      	b.n	8009338 <first_driv+0x64>
			log_flag = 1;
 800931a:	4b0d      	ldr	r3, [pc, #52]	; (8009350 <first_driv+0x7c>)
 800931c:	2201      	movs	r2, #1
 800931e:	701a      	strb	r2, [r3, #0]
			log2_flag=1;
 8009320:	4b0c      	ldr	r3, [pc, #48]	; (8009354 <first_driv+0x80>)
 8009322:	2201      	movs	r2, #1
 8009324:	701a      	strb	r2, [r3, #0]
			buff = logbuff;
 8009326:	4b07      	ldr	r3, [pc, #28]	; (8009344 <first_driv+0x70>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a08      	ldr	r2, [pc, #32]	; (800934c <first_driv+0x78>)
 800932c:	6013      	str	r3, [r2, #0]
			log_count++;
 800932e:	4b0a      	ldr	r3, [pc, #40]	; (8009358 <first_driv+0x84>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3301      	adds	r3, #1
 8009334:	4a08      	ldr	r2, [pc, #32]	; (8009358 <first_driv+0x84>)
 8009336:	6013      	str	r3, [r2, #0]
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr
 8009344:	2000c268 	.word	0x2000c268
 8009348:	20000204 	.word	0x20000204
 800934c:	2000c26c 	.word	0x2000c26c
 8009350:	2000020a 	.word	0x2000020a
 8009354:	2000020b 	.word	0x2000020b
 8009358:	2000c0b4 	.word	0x2000c0b4
 800935c:	00000000 	.word	0x00000000

08009360 <logsecond_Speed>:
int logsecond_Speed(double h){
 8009360:	b590      	push	{r4, r7, lr}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	ed87 0b00 	vstr	d0, [r7]
	int spee=1300;
 800936a:	f240 5314 	movw	r3, #1300	; 0x514
 800936e:	60fb      	str	r3, [r7, #12]
	float ratio=0;
 8009370:	f04f 0300 	mov.w	r3, #0
 8009374:	60bb      	str	r3, [r7, #8]
	if(h<0)h=-h;
 8009376:	f04f 0200 	mov.w	r2, #0
 800937a:	f04f 0300 	mov.w	r3, #0
 800937e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009382:	f7ff fae3 	bl	800894c <__aeabi_dcmplt>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d005      	beq.n	8009398 <logsecond_Speed+0x38>
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	603b      	str	r3, [r7, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009396:	607b      	str	r3, [r7, #4]
	switch(second_soeed){
 8009398:	4b9f      	ldr	r3, [pc, #636]	; (8009618 <logsecond_Speed+0x2b8>)
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	3b01      	subs	r3, #1
 800939e:	2b06      	cmp	r3, #6
 80093a0:	f200 8215 	bhi.w	80097ce <logsecond_Speed+0x46e>
 80093a4:	a201      	add	r2, pc, #4	; (adr r2, 80093ac <logsecond_Speed+0x4c>)
 80093a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093aa:	bf00      	nop
 80093ac:	080093c9 	.word	0x080093c9
 80093b0:	08009457 	.word	0x08009457
 80093b4:	080094e5 	.word	0x080094e5
 80093b8:	08009573 	.word	0x08009573
 80093bc:	08009625 	.word	0x08009625
 80093c0:	080096b3 	.word	0x080096b3
 80093c4:	08009741 	.word	0x08009741
//		else if(h < 300)  spee = 2400;
//		else if(h < 500)  spee = 2700;
//		else if(h < 800)  spee = 3800;
//		else if(h < 1000) spee = 4000;
//		else spee = 6000;
		h=h-100;
 80093c8:	f04f 0200 	mov.w	r2, #0
 80093cc:	4b93      	ldr	r3, [pc, #588]	; (800961c <logsecond_Speed+0x2bc>)
 80093ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093d2:	f7fe fe91 	bl	80080f8 <__aeabi_dsub>
 80093d6:	4603      	mov	r3, r0
 80093d8:	460c      	mov	r4, r1
 80093da:	e9c7 3400 	strd	r3, r4, [r7]
		if(h<100) h=0;
 80093de:	f04f 0200 	mov.w	r2, #0
 80093e2:	4b8e      	ldr	r3, [pc, #568]	; (800961c <logsecond_Speed+0x2bc>)
 80093e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093e8:	f7ff fab0 	bl	800894c <__aeabi_dcmplt>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d005      	beq.n	80093fe <logsecond_Speed+0x9e>
 80093f2:	f04f 0300 	mov.w	r3, #0
 80093f6:	f04f 0400 	mov.w	r4, #0
 80093fa:	e9c7 3400 	strd	r3, r4, [r7]
		if(h>1000) h=1000;
 80093fe:	f04f 0200 	mov.w	r2, #0
 8009402:	4b87      	ldr	r3, [pc, #540]	; (8009620 <logsecond_Speed+0x2c0>)
 8009404:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009408:	f7ff fabe 	bl	8008988 <__aeabi_dcmpgt>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d004      	beq.n	800941c <logsecond_Speed+0xbc>
 8009412:	f04f 0300 	mov.w	r3, #0
 8009416:	4c82      	ldr	r4, [pc, #520]	; (8009620 <logsecond_Speed+0x2c0>)
 8009418:	e9c7 3400 	strd	r3, r4, [r7]
		spee= (7000*h)/1000;
 800941c:	a378      	add	r3, pc, #480	; (adr r3, 8009600 <logsecond_Speed+0x2a0>)
 800941e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009422:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009426:	f7ff f81f 	bl	8008468 <__aeabi_dmul>
 800942a:	4603      	mov	r3, r0
 800942c:	460c      	mov	r4, r1
 800942e:	4618      	mov	r0, r3
 8009430:	4621      	mov	r1, r4
 8009432:	f04f 0200 	mov.w	r2, #0
 8009436:	4b7a      	ldr	r3, [pc, #488]	; (8009620 <logsecond_Speed+0x2c0>)
 8009438:	f7ff f940 	bl	80086bc <__aeabi_ddiv>
 800943c:	4603      	mov	r3, r0
 800943e:	460c      	mov	r4, r1
 8009440:	4618      	mov	r0, r3
 8009442:	4621      	mov	r1, r4
 8009444:	f7ff fac0 	bl	80089c8 <__aeabi_d2iz>
 8009448:	4603      	mov	r3, r0
 800944a:	60fb      	str	r3, [r7, #12]
		spee=spee+2500;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8009452:	60fb      	str	r3, [r7, #12]

		break;
 8009454:	e1bb      	b.n	80097ce <logsecond_Speed+0x46e>
	case 2://green
		h=h-100;
 8009456:	f04f 0200 	mov.w	r2, #0
 800945a:	4b70      	ldr	r3, [pc, #448]	; (800961c <logsecond_Speed+0x2bc>)
 800945c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009460:	f7fe fe4a 	bl	80080f8 <__aeabi_dsub>
 8009464:	4603      	mov	r3, r0
 8009466:	460c      	mov	r4, r1
 8009468:	e9c7 3400 	strd	r3, r4, [r7]
		if(h<100) h=0;
 800946c:	f04f 0200 	mov.w	r2, #0
 8009470:	4b6a      	ldr	r3, [pc, #424]	; (800961c <logsecond_Speed+0x2bc>)
 8009472:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009476:	f7ff fa69 	bl	800894c <__aeabi_dcmplt>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d005      	beq.n	800948c <logsecond_Speed+0x12c>
 8009480:	f04f 0300 	mov.w	r3, #0
 8009484:	f04f 0400 	mov.w	r4, #0
 8009488:	e9c7 3400 	strd	r3, r4, [r7]
		if(h>1000) h=1000;
 800948c:	f04f 0200 	mov.w	r2, #0
 8009490:	4b63      	ldr	r3, [pc, #396]	; (8009620 <logsecond_Speed+0x2c0>)
 8009492:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009496:	f7ff fa77 	bl	8008988 <__aeabi_dcmpgt>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d004      	beq.n	80094aa <logsecond_Speed+0x14a>
 80094a0:	f04f 0300 	mov.w	r3, #0
 80094a4:	4c5e      	ldr	r4, [pc, #376]	; (8009620 <logsecond_Speed+0x2c0>)
 80094a6:	e9c7 3400 	strd	r3, r4, [r7]
		spee= (12000*h)/1000;
 80094aa:	a357      	add	r3, pc, #348	; (adr r3, 8009608 <logsecond_Speed+0x2a8>)
 80094ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094b4:	f7fe ffd8 	bl	8008468 <__aeabi_dmul>
 80094b8:	4603      	mov	r3, r0
 80094ba:	460c      	mov	r4, r1
 80094bc:	4618      	mov	r0, r3
 80094be:	4621      	mov	r1, r4
 80094c0:	f04f 0200 	mov.w	r2, #0
 80094c4:	4b56      	ldr	r3, [pc, #344]	; (8009620 <logsecond_Speed+0x2c0>)
 80094c6:	f7ff f8f9 	bl	80086bc <__aeabi_ddiv>
 80094ca:	4603      	mov	r3, r0
 80094cc:	460c      	mov	r4, r1
 80094ce:	4618      	mov	r0, r3
 80094d0:	4621      	mov	r1, r4
 80094d2:	f7ff fa79 	bl	80089c8 <__aeabi_d2iz>
 80094d6:	4603      	mov	r3, r0
 80094d8:	60fb      	str	r3, [r7, #12]
		spee=spee+4000;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80094e0:	60fb      	str	r3, [r7, #12]
//		else if(h < 300)  spee = 2400;
//		else if(h < 500)  spee = 2700;
//		else if(h < 800)  spee = 3800;
//		else if(h < 1000) spee = 4000;
//		else spee = 6000;
		break;
 80094e2:	e174      	b.n	80097ce <logsecond_Speed+0x46e>

	case 3://light blue
		h=h-100;
 80094e4:	f04f 0200 	mov.w	r2, #0
 80094e8:	4b4c      	ldr	r3, [pc, #304]	; (800961c <logsecond_Speed+0x2bc>)
 80094ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094ee:	f7fe fe03 	bl	80080f8 <__aeabi_dsub>
 80094f2:	4603      	mov	r3, r0
 80094f4:	460c      	mov	r4, r1
 80094f6:	e9c7 3400 	strd	r3, r4, [r7]
		if(h<100) h=0;
 80094fa:	f04f 0200 	mov.w	r2, #0
 80094fe:	4b47      	ldr	r3, [pc, #284]	; (800961c <logsecond_Speed+0x2bc>)
 8009500:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009504:	f7ff fa22 	bl	800894c <__aeabi_dcmplt>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d005      	beq.n	800951a <logsecond_Speed+0x1ba>
 800950e:	f04f 0300 	mov.w	r3, #0
 8009512:	f04f 0400 	mov.w	r4, #0
 8009516:	e9c7 3400 	strd	r3, r4, [r7]
		if(h>1000) h=1000;
 800951a:	f04f 0200 	mov.w	r2, #0
 800951e:	4b40      	ldr	r3, [pc, #256]	; (8009620 <logsecond_Speed+0x2c0>)
 8009520:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009524:	f7ff fa30 	bl	8008988 <__aeabi_dcmpgt>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d004      	beq.n	8009538 <logsecond_Speed+0x1d8>
 800952e:	f04f 0300 	mov.w	r3, #0
 8009532:	4c3b      	ldr	r4, [pc, #236]	; (8009620 <logsecond_Speed+0x2c0>)
 8009534:	e9c7 3400 	strd	r3, r4, [r7]
		spee= (7000*h)/1000;
 8009538:	a331      	add	r3, pc, #196	; (adr r3, 8009600 <logsecond_Speed+0x2a0>)
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009542:	f7fe ff91 	bl	8008468 <__aeabi_dmul>
 8009546:	4603      	mov	r3, r0
 8009548:	460c      	mov	r4, r1
 800954a:	4618      	mov	r0, r3
 800954c:	4621      	mov	r1, r4
 800954e:	f04f 0200 	mov.w	r2, #0
 8009552:	4b33      	ldr	r3, [pc, #204]	; (8009620 <logsecond_Speed+0x2c0>)
 8009554:	f7ff f8b2 	bl	80086bc <__aeabi_ddiv>
 8009558:	4603      	mov	r3, r0
 800955a:	460c      	mov	r4, r1
 800955c:	4618      	mov	r0, r3
 800955e:	4621      	mov	r1, r4
 8009560:	f7ff fa32 	bl	80089c8 <__aeabi_d2iz>
 8009564:	4603      	mov	r3, r0
 8009566:	60fb      	str	r3, [r7, #12]
		spee=spee+2800;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 800956e:	60fb      	str	r3, [r7, #12]

		break;
 8009570:	e12d      	b.n	80097ce <logsecond_Speed+0x46e>

	case 4://red
		h=h-100;
 8009572:	f04f 0200 	mov.w	r2, #0
 8009576:	4b29      	ldr	r3, [pc, #164]	; (800961c <logsecond_Speed+0x2bc>)
 8009578:	e9d7 0100 	ldrd	r0, r1, [r7]
 800957c:	f7fe fdbc 	bl	80080f8 <__aeabi_dsub>
 8009580:	4603      	mov	r3, r0
 8009582:	460c      	mov	r4, r1
 8009584:	e9c7 3400 	strd	r3, r4, [r7]
		if(h<100) h=0;
 8009588:	f04f 0200 	mov.w	r2, #0
 800958c:	4b23      	ldr	r3, [pc, #140]	; (800961c <logsecond_Speed+0x2bc>)
 800958e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009592:	f7ff f9db 	bl	800894c <__aeabi_dcmplt>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d005      	beq.n	80095a8 <logsecond_Speed+0x248>
 800959c:	f04f 0300 	mov.w	r3, #0
 80095a0:	f04f 0400 	mov.w	r4, #0
 80095a4:	e9c7 3400 	strd	r3, r4, [r7]
		if(h>1000) h=1000;
 80095a8:	f04f 0200 	mov.w	r2, #0
 80095ac:	4b1c      	ldr	r3, [pc, #112]	; (8009620 <logsecond_Speed+0x2c0>)
 80095ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095b2:	f7ff f9e9 	bl	8008988 <__aeabi_dcmpgt>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d004      	beq.n	80095c6 <logsecond_Speed+0x266>
 80095bc:	f04f 0300 	mov.w	r3, #0
 80095c0:	4c17      	ldr	r4, [pc, #92]	; (8009620 <logsecond_Speed+0x2c0>)
 80095c2:	e9c7 3400 	strd	r3, r4, [r7]
		spee= (6500*h)/1000;
 80095c6:	a312      	add	r3, pc, #72	; (adr r3, 8009610 <logsecond_Speed+0x2b0>)
 80095c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095d0:	f7fe ff4a 	bl	8008468 <__aeabi_dmul>
 80095d4:	4603      	mov	r3, r0
 80095d6:	460c      	mov	r4, r1
 80095d8:	4618      	mov	r0, r3
 80095da:	4621      	mov	r1, r4
 80095dc:	f04f 0200 	mov.w	r2, #0
 80095e0:	4b0f      	ldr	r3, [pc, #60]	; (8009620 <logsecond_Speed+0x2c0>)
 80095e2:	f7ff f86b 	bl	80086bc <__aeabi_ddiv>
 80095e6:	4603      	mov	r3, r0
 80095e8:	460c      	mov	r4, r1
 80095ea:	4618      	mov	r0, r3
 80095ec:	4621      	mov	r1, r4
 80095ee:	f7ff f9eb 	bl	80089c8 <__aeabi_d2iz>
 80095f2:	4603      	mov	r3, r0
 80095f4:	60fb      	str	r3, [r7, #12]
		spee=spee+3000;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80095fc:	60fb      	str	r3, [r7, #12]
		break;
 80095fe:	e0e6      	b.n	80097ce <logsecond_Speed+0x46e>
 8009600:	00000000 	.word	0x00000000
 8009604:	40bb5800 	.word	0x40bb5800
 8009608:	00000000 	.word	0x00000000
 800960c:	40c77000 	.word	0x40c77000
 8009610:	00000000 	.word	0x00000000
 8009614:	40b96400 	.word	0x40b96400
 8009618:	2000c0bc 	.word	0x2000c0bc
 800961c:	40590000 	.word	0x40590000
 8009620:	408f4000 	.word	0x408f4000
	case 5://pink
		h=h-100;
 8009624:	f04f 0200 	mov.w	r2, #0
 8009628:	4b6f      	ldr	r3, [pc, #444]	; (80097e8 <logsecond_Speed+0x488>)
 800962a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800962e:	f7fe fd63 	bl	80080f8 <__aeabi_dsub>
 8009632:	4603      	mov	r3, r0
 8009634:	460c      	mov	r4, r1
 8009636:	e9c7 3400 	strd	r3, r4, [r7]
		if(h<100) h=0;
 800963a:	f04f 0200 	mov.w	r2, #0
 800963e:	4b6a      	ldr	r3, [pc, #424]	; (80097e8 <logsecond_Speed+0x488>)
 8009640:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009644:	f7ff f982 	bl	800894c <__aeabi_dcmplt>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d005      	beq.n	800965a <logsecond_Speed+0x2fa>
 800964e:	f04f 0300 	mov.w	r3, #0
 8009652:	f04f 0400 	mov.w	r4, #0
 8009656:	e9c7 3400 	strd	r3, r4, [r7]
		if(h>1000) h=1000;
 800965a:	f04f 0200 	mov.w	r2, #0
 800965e:	4b63      	ldr	r3, [pc, #396]	; (80097ec <logsecond_Speed+0x48c>)
 8009660:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009664:	f7ff f990 	bl	8008988 <__aeabi_dcmpgt>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d004      	beq.n	8009678 <logsecond_Speed+0x318>
 800966e:	f04f 0300 	mov.w	r3, #0
 8009672:	4c5e      	ldr	r4, [pc, #376]	; (80097ec <logsecond_Speed+0x48c>)
 8009674:	e9c7 3400 	strd	r3, r4, [r7]
		spee= (7000*h)/1000;
 8009678:	a357      	add	r3, pc, #348	; (adr r3, 80097d8 <logsecond_Speed+0x478>)
 800967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009682:	f7fe fef1 	bl	8008468 <__aeabi_dmul>
 8009686:	4603      	mov	r3, r0
 8009688:	460c      	mov	r4, r1
 800968a:	4618      	mov	r0, r3
 800968c:	4621      	mov	r1, r4
 800968e:	f04f 0200 	mov.w	r2, #0
 8009692:	4b56      	ldr	r3, [pc, #344]	; (80097ec <logsecond_Speed+0x48c>)
 8009694:	f7ff f812 	bl	80086bc <__aeabi_ddiv>
 8009698:	4603      	mov	r3, r0
 800969a:	460c      	mov	r4, r1
 800969c:	4618      	mov	r0, r3
 800969e:	4621      	mov	r1, r4
 80096a0:	f7ff f992 	bl	80089c8 <__aeabi_d2iz>
 80096a4:	4603      	mov	r3, r0
 80096a6:	60fb      	str	r3, [r7, #12]
		spee=spee+4000;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80096ae:	60fb      	str	r3, [r7, #12]
		break;
 80096b0:	e08d      	b.n	80097ce <logsecond_Speed+0x46e>
	case 6://yellow
		h=h-100;
 80096b2:	f04f 0200 	mov.w	r2, #0
 80096b6:	4b4c      	ldr	r3, [pc, #304]	; (80097e8 <logsecond_Speed+0x488>)
 80096b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096bc:	f7fe fd1c 	bl	80080f8 <__aeabi_dsub>
 80096c0:	4603      	mov	r3, r0
 80096c2:	460c      	mov	r4, r1
 80096c4:	e9c7 3400 	strd	r3, r4, [r7]
		if(h<100) h=0;
 80096c8:	f04f 0200 	mov.w	r2, #0
 80096cc:	4b46      	ldr	r3, [pc, #280]	; (80097e8 <logsecond_Speed+0x488>)
 80096ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096d2:	f7ff f93b 	bl	800894c <__aeabi_dcmplt>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d005      	beq.n	80096e8 <logsecond_Speed+0x388>
 80096dc:	f04f 0300 	mov.w	r3, #0
 80096e0:	f04f 0400 	mov.w	r4, #0
 80096e4:	e9c7 3400 	strd	r3, r4, [r7]
		if(h>1000) h=1000;
 80096e8:	f04f 0200 	mov.w	r2, #0
 80096ec:	4b3f      	ldr	r3, [pc, #252]	; (80097ec <logsecond_Speed+0x48c>)
 80096ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096f2:	f7ff f949 	bl	8008988 <__aeabi_dcmpgt>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d004      	beq.n	8009706 <logsecond_Speed+0x3a6>
 80096fc:	f04f 0300 	mov.w	r3, #0
 8009700:	4c3a      	ldr	r4, [pc, #232]	; (80097ec <logsecond_Speed+0x48c>)
 8009702:	e9c7 3400 	strd	r3, r4, [r7]
		spee= (8000*h)/1000;
 8009706:	f04f 0200 	mov.w	r2, #0
 800970a:	4b39      	ldr	r3, [pc, #228]	; (80097f0 <logsecond_Speed+0x490>)
 800970c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009710:	f7fe feaa 	bl	8008468 <__aeabi_dmul>
 8009714:	4603      	mov	r3, r0
 8009716:	460c      	mov	r4, r1
 8009718:	4618      	mov	r0, r3
 800971a:	4621      	mov	r1, r4
 800971c:	f04f 0200 	mov.w	r2, #0
 8009720:	4b32      	ldr	r3, [pc, #200]	; (80097ec <logsecond_Speed+0x48c>)
 8009722:	f7fe ffcb 	bl	80086bc <__aeabi_ddiv>
 8009726:	4603      	mov	r3, r0
 8009728:	460c      	mov	r4, r1
 800972a:	4618      	mov	r0, r3
 800972c:	4621      	mov	r1, r4
 800972e:	f7ff f94b 	bl	80089c8 <__aeabi_d2iz>
 8009732:	4603      	mov	r3, r0
 8009734:	60fb      	str	r3, [r7, #12]
		spee=spee+4000;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 800973c:	60fb      	str	r3, [r7, #12]
		break;
 800973e:	e046      	b.n	80097ce <logsecond_Speed+0x46e>
	case 7://white
		h=h-100;
 8009740:	f04f 0200 	mov.w	r2, #0
 8009744:	4b28      	ldr	r3, [pc, #160]	; (80097e8 <logsecond_Speed+0x488>)
 8009746:	e9d7 0100 	ldrd	r0, r1, [r7]
 800974a:	f7fe fcd5 	bl	80080f8 <__aeabi_dsub>
 800974e:	4603      	mov	r3, r0
 8009750:	460c      	mov	r4, r1
 8009752:	e9c7 3400 	strd	r3, r4, [r7]
		if(h<100) h=0;
 8009756:	f04f 0200 	mov.w	r2, #0
 800975a:	4b23      	ldr	r3, [pc, #140]	; (80097e8 <logsecond_Speed+0x488>)
 800975c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009760:	f7ff f8f4 	bl	800894c <__aeabi_dcmplt>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d005      	beq.n	8009776 <logsecond_Speed+0x416>
 800976a:	f04f 0300 	mov.w	r3, #0
 800976e:	f04f 0400 	mov.w	r4, #0
 8009772:	e9c7 3400 	strd	r3, r4, [r7]
		if(h>1000) h=1000;
 8009776:	f04f 0200 	mov.w	r2, #0
 800977a:	4b1c      	ldr	r3, [pc, #112]	; (80097ec <logsecond_Speed+0x48c>)
 800977c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009780:	f7ff f902 	bl	8008988 <__aeabi_dcmpgt>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d004      	beq.n	8009794 <logsecond_Speed+0x434>
 800978a:	f04f 0300 	mov.w	r3, #0
 800978e:	4c17      	ldr	r4, [pc, #92]	; (80097ec <logsecond_Speed+0x48c>)
 8009790:	e9c7 3400 	strd	r3, r4, [r7]
		spee= (9000*h)/1000;
 8009794:	a312      	add	r3, pc, #72	; (adr r3, 80097e0 <logsecond_Speed+0x480>)
 8009796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800979e:	f7fe fe63 	bl	8008468 <__aeabi_dmul>
 80097a2:	4603      	mov	r3, r0
 80097a4:	460c      	mov	r4, r1
 80097a6:	4618      	mov	r0, r3
 80097a8:	4621      	mov	r1, r4
 80097aa:	f04f 0200 	mov.w	r2, #0
 80097ae:	4b0f      	ldr	r3, [pc, #60]	; (80097ec <logsecond_Speed+0x48c>)
 80097b0:	f7fe ff84 	bl	80086bc <__aeabi_ddiv>
 80097b4:	4603      	mov	r3, r0
 80097b6:	460c      	mov	r4, r1
 80097b8:	4618      	mov	r0, r3
 80097ba:	4621      	mov	r1, r4
 80097bc:	f7ff f904 	bl	80089c8 <__aeabi_d2iz>
 80097c0:	4603      	mov	r3, r0
 80097c2:	60fb      	str	r3, [r7, #12]
		spee=spee+4000;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80097ca:	60fb      	str	r3, [r7, #12]
		break;
 80097cc:	bf00      	nop
//		else if(h < 300)  spee = 1600;
//		else if(h < 500)  spee = 1800;
//		else if(h < 800)  spee = 2100;
//		else if(h < 1000) spee = 4100;
//		else if(1000 < h)spee = 4600;
	return spee;
 80097ce:	68fb      	ldr	r3, [r7, #12]

}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd90      	pop	{r4, r7, pc}
 80097d8:	00000000 	.word	0x00000000
 80097dc:	40bb5800 	.word	0x40bb5800
 80097e0:	00000000 	.word	0x00000000
 80097e4:	40c19400 	.word	0x40c19400
 80097e8:	40590000 	.word	0x40590000
 80097ec:	408f4000 	.word	0x408f4000
 80097f0:	40bf4000 	.word	0x40bf4000
 80097f4:	00000000 	.word	0x00000000

080097f8 <log_Cal>:
inline void log_Cal(){
 80097f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80097fc:	b096      	sub	sp, #88	; 0x58
 80097fe:	af00      	add	r7, sp, #0
	uint i=0;
 8009800:	2300      	movs	r3, #0
 8009802:	657b      	str	r3, [r7, #84]	; 0x54
	uint d=0;
 8009804:	2300      	movs	r3, #0
 8009806:	653b      	str	r3, [r7, #80]	; 0x50
	uint l=0;
 8009808:	2300      	movs	r3, #0
 800980a:	61bb      	str	r3, [r7, #24]
	uint o=0;
 800980c:	2300      	movs	r3, #0
 800980e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint h=0;
 8009810:	2300      	movs	r3, #0
 8009812:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t callog;
	float Ca,Lo;
	float Lo_buff=0;
 8009814:	f04f 0300 	mov.w	r3, #0
 8009818:	647b      	str	r3, [r7, #68]	; 0x44
	float sd=0;
 800981a:	f04f 0300 	mov.w	r3, #0
 800981e:	643b      	str	r3, [r7, #64]	; 0x40
	float sd_buff=0;
 8009820:	f04f 0300 	mov.w	r3, #0
 8009824:	63fb      	str	r3, [r7, #60]	; 0x3c
	float sd_cou=0;
 8009826:	f04f 0300 	mov.w	r3, #0
 800982a:	617b      	str	r3, [r7, #20]
	float sd_slo=0;
 800982c:	f04f 0300 	mov.w	r3, #0
 8009830:	63bb      	str	r3, [r7, #56]	; 0x38
	int cao=0;
 8009832:	2300      	movs	r3, #0
 8009834:	613b      	str	r3, [r7, #16]
	float fu=0;
 8009836:	f04f 0300 	mov.w	r3, #0
 800983a:	60fb      	str	r3, [r7, #12]
	float buff=10000;
 800983c:	4b9a      	ldr	r3, [pc, #616]	; (8009aa8 <log_Cal+0x2b0>)
 800983e:	637b      	str	r3, [r7, #52]	; 0x34


	o=39;
 8009840:	2327      	movs	r3, #39	; 0x27
 8009842:	64fb      	str	r3, [r7, #76]	; 0x4c
//			d++;
//		}
//		callog_adress+= 0x04;
//	}

	callog_adress = start_adress_sector7;
 8009844:	4b99      	ldr	r3, [pc, #612]	; (8009aac <log_Cal+0x2b4>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a99      	ldr	r2, [pc, #612]	; (8009ab0 <log_Cal+0x2b8>)
 800984a:	6013      	str	r3, [r2, #0]
	loadlog_adress = start_adress_sector9;
 800984c:	4b99      	ldr	r3, [pc, #612]	; (8009ab4 <log_Cal+0x2bc>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a99      	ldr	r2, [pc, #612]	; (8009ab8 <log_Cal+0x2c0>)
 8009852:	6013      	str	r3, [r2, #0]
	while(1){
		Lo=*(float*)loadlog_adress-Lo_buff;
 8009854:	4b98      	ldr	r3, [pc, #608]	; (8009ab8 <log_Cal+0x2c0>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	ed93 7a00 	vldr	s14, [r3]
 800985c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009864:	edc7 7a02 	vstr	s15, [r7, #8]
		Ca=*(float*)callog_adress;
 8009868:	4b91      	ldr	r3, [pc, #580]	; (8009ab0 <log_Cal+0x2b8>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	607b      	str	r3, [r7, #4]

		if(isnan(Ca) != 0)break;
 8009870:	ed97 7a01 	vldr	s14, [r7, #4]
 8009874:	edd7 7a01 	vldr	s15, [r7, #4]
 8009878:	eeb4 7a67 	vcmp.f32	s14, s15
 800987c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009880:	d65e      	bvs.n	8009940 <log_Cal+0x148>
		Lo_buff += Lo;
 8009882:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009886:	edd7 7a02 	vldr	s15, [r7, #8]
 800988a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800988e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		if(i==work_ram[o]){
 8009892:	4a8a      	ldr	r2, [pc, #552]	; (8009abc <log_Cal+0x2c4>)
 8009894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800989a:	461a      	mov	r2, r3
 800989c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800989e:	4293      	cmp	r3, r2
 80098a0:	d11d      	bne.n	80098de <log_Cal+0xe6>
			for(int j=i; j>=i-10;j--){
 80098a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098a4:	633b      	str	r3, [r7, #48]	; 0x30
 80098a6:	e010      	b.n	80098ca <log_Cal+0xd2>
				secondsp[j]=logsecond_Speed(1500);
 80098a8:	ed9f 0b7d 	vldr	d0, [pc, #500]	; 8009aa0 <log_Cal+0x2a8>
 80098ac:	f7ff fd58 	bl	8009360 <logsecond_Speed>
 80098b0:	ee07 0a90 	vmov	s15, r0
 80098b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098b8:	4a81      	ldr	r2, [pc, #516]	; (8009ac0 <log_Cal+0x2c8>)
 80098ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	edc3 7a00 	vstr	s15, [r3]
			for(int j=i; j>=i-10;j--){
 80098c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c6:	3b01      	subs	r3, #1
 80098c8:	633b      	str	r3, [r7, #48]	; 0x30
 80098ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098cc:	f1a3 020a 	sub.w	r2, r3, #10
 80098d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d9e8      	bls.n	80098a8 <log_Cal+0xb0>
			}
			o++;
 80098d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098d8:	3301      	adds	r3, #1
 80098da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098dc:	e019      	b.n	8009912 <log_Cal+0x11a>
//		}else secondsp[i]= logsecond_Speed(Lo/(Ca*(Lo/(double)work_ram[26])));
		}else secondsp[i]= logsecond_Speed(Lo/Ca);
 80098de:	ed97 7a02 	vldr	s14, [r7, #8]
 80098e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80098e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80098ea:	ee16 0a90 	vmov	r0, s13
 80098ee:	f7fe fd63 	bl	80083b8 <__aeabi_f2d>
 80098f2:	4603      	mov	r3, r0
 80098f4:	460c      	mov	r4, r1
 80098f6:	ec44 3b10 	vmov	d0, r3, r4
 80098fa:	f7ff fd31 	bl	8009360 <logsecond_Speed>
 80098fe:	ee07 0a90 	vmov	s15, r0
 8009902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009906:	4a6e      	ldr	r2, [pc, #440]	; (8009ac0 <log_Cal+0x2c8>)
 8009908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	edc3 7a00 	vstr	s15, [r3]
//		loada[i] = loada[i-1]+Lo;
		second_load[i] = Lo;
 8009912:	4a6c      	ldr	r2, [pc, #432]	; (8009ac4 <log_Cal+0x2cc>)
 8009914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4413      	add	r3, r2
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	601a      	str	r2, [r3, #0]
		callog_adress+= 0x04;
 800991e:	4b64      	ldr	r3, [pc, #400]	; (8009ab0 <log_Cal+0x2b8>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3304      	adds	r3, #4
 8009924:	4a62      	ldr	r2, [pc, #392]	; (8009ab0 <log_Cal+0x2b8>)
 8009926:	6013      	str	r3, [r2, #0]
		loadlog_adress+= 0x04;
 8009928:	4b63      	ldr	r3, [pc, #396]	; (8009ab8 <log_Cal+0x2c0>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	3304      	adds	r3, #4
 800992e:	4a62      	ldr	r2, [pc, #392]	; (8009ab8 <log_Cal+0x2c0>)
 8009930:	6013      	str	r3, [r2, #0]
		LED(2);
 8009932:	2002      	movs	r0, #2
 8009934:	f002 fbba 	bl	800c0ac <LED>
		i++;
 8009938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800993a:	3301      	adds	r3, #1
 800993c:	657b      	str	r3, [r7, #84]	; 0x54
		Lo=*(float*)loadlog_adress-Lo_buff;
 800993e:	e789      	b.n	8009854 <log_Cal+0x5c>
		if(isnan(Ca) != 0)break;
 8009940:	bf00      	nop

	}

	for(int s=i-1;s>=0;s--){
 8009942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009944:	3b01      	subs	r3, #1
 8009946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009948:	e0a1      	b.n	8009a8e <log_Cal+0x296>
		if(buff < secondsp[s]){
 800994a:	4a5d      	ldr	r2, [pc, #372]	; (8009ac0 <log_Cal+0x2c8>)
 800994c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	edd3 7a00 	vldr	s15, [r3]
 8009956:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800995a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800995e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009962:	f140 808b 	bpl.w	8009a7c <log_Cal+0x284>
			if(buff>=2500 && secondsp[s]>=5000){
 8009966:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800996a:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8009ac8 <log_Cal+0x2d0>
 800996e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009976:	db2f      	blt.n	80099d8 <log_Cal+0x1e0>
 8009978:	4a51      	ldr	r2, [pc, #324]	; (8009ac0 <log_Cal+0x2c8>)
 800997a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4413      	add	r3, r2
 8009980:	edd3 7a00 	vldr	s15, [r3]
 8009984:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8009acc <log_Cal+0x2d4>
 8009988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800998c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009990:	db22      	blt.n	80099d8 <log_Cal+0x1e0>
				for( h=0 ;h<=5;h++){
 8009992:	2300      	movs	r3, #0
 8009994:	64bb      	str	r3, [r7, #72]	; 0x48
 8009996:	e019      	b.n	80099cc <log_Cal+0x1d4>
					if(secondsp[s-h] < buff)break;
 8009998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800999a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	4a48      	ldr	r2, [pc, #288]	; (8009ac0 <log_Cal+0x2c8>)
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4413      	add	r3, r2
 80099a4:	edd3 7a00 	vldr	s15, [r3]
 80099a8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80099ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099b4:	dc0e      	bgt.n	80099d4 <log_Cal+0x1dc>
					secondsp[s-h] = buff;
 80099b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	4a40      	ldr	r2, [pc, #256]	; (8009ac0 <log_Cal+0x2c8>)
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4413      	add	r3, r2
 80099c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099c4:	601a      	str	r2, [r3, #0]
				for( h=0 ;h<=5;h++){
 80099c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099c8:	3301      	adds	r3, #1
 80099ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80099cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099ce:	2b05      	cmp	r3, #5
 80099d0:	d9e2      	bls.n	8009998 <log_Cal+0x1a0>
			if(buff>=2500 && secondsp[s]>=5000){
 80099d2:	e04f      	b.n	8009a74 <log_Cal+0x27c>
					if(secondsp[s-h] < buff)break;
 80099d4:	bf00      	nop
			if(buff>=2500 && secondsp[s]>=5000){
 80099d6:	e04d      	b.n	8009a74 <log_Cal+0x27c>

				}
			}else if(buff>=2500){
 80099d8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80099dc:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8009ac8 <log_Cal+0x2d0>
 80099e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099e8:	db20      	blt.n	8009a2c <log_Cal+0x234>
				for( h=0 ;h<=5;h++){
 80099ea:	2300      	movs	r3, #0
 80099ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80099ee:	e019      	b.n	8009a24 <log_Cal+0x22c>
					if(secondsp[s-h] < buff)break;
 80099f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	4a32      	ldr	r2, [pc, #200]	; (8009ac0 <log_Cal+0x2c8>)
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	edd3 7a00 	vldr	s15, [r3]
 8009a00:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009a04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a0c:	dc2f      	bgt.n	8009a6e <log_Cal+0x276>
					secondsp[s-h] = buff;
 8009a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	4a2a      	ldr	r2, [pc, #168]	; (8009ac0 <log_Cal+0x2c8>)
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4413      	add	r3, r2
 8009a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a1c:	601a      	str	r2, [r3, #0]
				for( h=0 ;h<=5;h++){
 8009a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a20:	3301      	adds	r3, #1
 8009a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a26:	2b05      	cmp	r3, #5
 8009a28:	d9e2      	bls.n	80099f0 <log_Cal+0x1f8>
 8009a2a:	e023      	b.n	8009a74 <log_Cal+0x27c>

				}
			}else {//if(buff<=3000 && secondsp[s]>=5000){
				for( h=0 ;h<=5;h++){
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a30:	e019      	b.n	8009a66 <log_Cal+0x26e>
					if(secondsp[s-h] < buff)break;
 8009a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a36:	1ad3      	subs	r3, r2, r3
 8009a38:	4a21      	ldr	r2, [pc, #132]	; (8009ac0 <log_Cal+0x2c8>)
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	edd3 7a00 	vldr	s15, [r3]
 8009a42:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009a46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a4e:	dc10      	bgt.n	8009a72 <log_Cal+0x27a>
					secondsp[s-h] = buff;
 8009a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	4a1a      	ldr	r2, [pc, #104]	; (8009ac0 <log_Cal+0x2c8>)
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	4413      	add	r3, r2
 8009a5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a5e:	601a      	str	r2, [r3, #0]
				for( h=0 ;h<=5;h++){
 8009a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a62:	3301      	adds	r3, #1
 8009a64:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a68:	2b05      	cmp	r3, #5
 8009a6a:	d9e2      	bls.n	8009a32 <log_Cal+0x23a>
 8009a6c:	e002      	b.n	8009a74 <log_Cal+0x27c>
					if(secondsp[s-h] < buff)break;
 8009a6e:	bf00      	nop
 8009a70:	e000      	b.n	8009a74 <log_Cal+0x27c>
					if(secondsp[s-h] < buff)break;
 8009a72:	bf00      	nop
//					if(secondsp[s-h] < buff)break;
//					secondsp[s-h] = buff;
//
//				}
//			}
			s=s-h;
 8009a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a78:	1ad3      	subs	r3, r2, r3
 8009a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		buff = secondsp[s];
 8009a7c:	4a10      	ldr	r2, [pc, #64]	; (8009ac0 <log_Cal+0x2c8>)
 8009a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4413      	add	r3, r2
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	637b      	str	r3, [r7, #52]	; 0x34
	for(int s=i-1;s>=0;s--){
 8009a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f6bf af5a 	bge.w	800994a <log_Cal+0x152>
	}


	for(int s=i-2;s>=0;s--){
 8009a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a98:	3b02      	subs	r3, #2
 8009a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a9c:	e077      	b.n	8009b8e <log_Cal+0x396>
 8009a9e:	bf00      	nop
 8009aa0:	00000000 	.word	0x00000000
 8009aa4:	40977000 	.word	0x40977000
 8009aa8:	461c4000 	.word	0x461c4000
 8009aac:	080164a0 	.word	0x080164a0
 8009ab0:	2000c2ec 	.word	0x2000c2ec
 8009ab4:	080164a8 	.word	0x080164a8
 8009ab8:	2000c2f4 	.word	0x2000c2f4
 8009abc:	2000c318 	.word	0x2000c318
 8009ac0:	20000210 	.word	0x20000210
 8009ac4:	20006160 	.word	0x20006160
 8009ac8:	451c4000 	.word	0x451c4000
 8009acc:	459c4000 	.word	0x459c4000
		Lo=second_load[s];
 8009ad0:	4a9e      	ldr	r2, [pc, #632]	; (8009d4c <log_Cal+0x554>)
 8009ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	60bb      	str	r3, [r7, #8]
	//	Lo_buff -= Lo;
//		printf("%lf\r\n",Lo);
//		HAL_Delay(10);
		if((secondsp[s-1] - secondsp[s])/(Lo/(double)work_ram[26])>Decm)secondsp[s-1]=Decm*Lo+secondsp[s];
 8009adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	4a9b      	ldr	r2, [pc, #620]	; (8009d50 <log_Cal+0x558>)
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4413      	add	r3, r2
 8009ae6:	ed93 7a00 	vldr	s14, [r3]
 8009aea:	4a99      	ldr	r2, [pc, #612]	; (8009d50 <log_Cal+0x558>)
 8009aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4413      	add	r3, r2
 8009af2:	edd3 7a00 	vldr	s15, [r3]
 8009af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009afa:	ee17 0a90 	vmov	r0, s15
 8009afe:	f7fe fc5b 	bl	80083b8 <__aeabi_f2d>
 8009b02:	4604      	mov	r4, r0
 8009b04:	460d      	mov	r5, r1
 8009b06:	68b8      	ldr	r0, [r7, #8]
 8009b08:	f7fe fc56 	bl	80083b8 <__aeabi_f2d>
 8009b0c:	4680      	mov	r8, r0
 8009b0e:	4689      	mov	r9, r1
 8009b10:	4b90      	ldr	r3, [pc, #576]	; (8009d54 <log_Cal+0x55c>)
 8009b12:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fe fc2d 	bl	8008374 <__aeabi_ui2d>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	4640      	mov	r0, r8
 8009b20:	4649      	mov	r1, r9
 8009b22:	f7fe fdcb 	bl	80086bc <__aeabi_ddiv>
 8009b26:	4602      	mov	r2, r0
 8009b28:	460b      	mov	r3, r1
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	4629      	mov	r1, r5
 8009b2e:	f7fe fdc5 	bl	80086bc <__aeabi_ddiv>
 8009b32:	4603      	mov	r3, r0
 8009b34:	460c      	mov	r4, r1
 8009b36:	4625      	mov	r5, r4
 8009b38:	461c      	mov	r4, r3
 8009b3a:	4b87      	ldr	r3, [pc, #540]	; (8009d58 <log_Cal+0x560>)
 8009b3c:	881b      	ldrh	r3, [r3, #0]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fe fc28 	bl	8008394 <__aeabi_i2d>
 8009b44:	4602      	mov	r2, r0
 8009b46:	460b      	mov	r3, r1
 8009b48:	4620      	mov	r0, r4
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	f7fe ff1c 	bl	8008988 <__aeabi_dcmpgt>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d018      	beq.n	8009b88 <log_Cal+0x390>
 8009b56:	4b80      	ldr	r3, [pc, #512]	; (8009d58 <log_Cal+0x560>)
 8009b58:	881b      	ldrh	r3, [r3, #0]
 8009b5a:	ee07 3a90 	vmov	s15, r3
 8009b5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009b62:	edd7 7a02 	vldr	s15, [r7, #8]
 8009b66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b6a:	4a79      	ldr	r2, [pc, #484]	; (8009d50 <log_Cal+0x558>)
 8009b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	edd3 7a00 	vldr	s15, [r3]
 8009b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b7e:	4a74      	ldr	r2, [pc, #464]	; (8009d50 <log_Cal+0x558>)
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	4413      	add	r3, r2
 8009b84:	edc3 7a00 	vstr	s15, [r3]
	for(int s=i-2;s>=0;s--){
 8009b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	da9d      	bge.n	8009ad0 <log_Cal+0x2d8>
	}

	for(int s=1;s<=i;s++){
 8009b94:	2301      	movs	r3, #1
 8009b96:	627b      	str	r3, [r7, #36]	; 0x24
 8009b98:	e05e      	b.n	8009c58 <log_Cal+0x460>
		Lo=second_load[s];
 8009b9a:	4a6c      	ldr	r2, [pc, #432]	; (8009d4c <log_Cal+0x554>)
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	4413      	add	r3, r2
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	60bb      	str	r3, [r7, #8]
		//Lo_buff += Lo;
		if((secondsp[s] - secondsp[s-1])/(Lo/(double)work_ram[26])>Accm)secondsp[s]=Accm*Lo+secondsp[s-1];
 8009ba6:	4a6a      	ldr	r2, [pc, #424]	; (8009d50 <log_Cal+0x558>)
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4413      	add	r3, r2
 8009bae:	ed93 7a00 	vldr	s14, [r3]
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	4a66      	ldr	r2, [pc, #408]	; (8009d50 <log_Cal+0x558>)
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	4413      	add	r3, r2
 8009bbc:	edd3 7a00 	vldr	s15, [r3]
 8009bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bc4:	ee17 0a90 	vmov	r0, s15
 8009bc8:	f7fe fbf6 	bl	80083b8 <__aeabi_f2d>
 8009bcc:	4604      	mov	r4, r0
 8009bce:	460d      	mov	r5, r1
 8009bd0:	68b8      	ldr	r0, [r7, #8]
 8009bd2:	f7fe fbf1 	bl	80083b8 <__aeabi_f2d>
 8009bd6:	4680      	mov	r8, r0
 8009bd8:	4689      	mov	r9, r1
 8009bda:	4b5e      	ldr	r3, [pc, #376]	; (8009d54 <log_Cal+0x55c>)
 8009bdc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7fe fbc8 	bl	8008374 <__aeabi_ui2d>
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	4640      	mov	r0, r8
 8009bea:	4649      	mov	r1, r9
 8009bec:	f7fe fd66 	bl	80086bc <__aeabi_ddiv>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	f7fe fd60 	bl	80086bc <__aeabi_ddiv>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	460c      	mov	r4, r1
 8009c00:	4625      	mov	r5, r4
 8009c02:	461c      	mov	r4, r3
 8009c04:	4b55      	ldr	r3, [pc, #340]	; (8009d5c <log_Cal+0x564>)
 8009c06:	881b      	ldrh	r3, [r3, #0]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fe fbc3 	bl	8008394 <__aeabi_i2d>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	460b      	mov	r3, r1
 8009c12:	4620      	mov	r0, r4
 8009c14:	4629      	mov	r1, r5
 8009c16:	f7fe feb7 	bl	8008988 <__aeabi_dcmpgt>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d018      	beq.n	8009c52 <log_Cal+0x45a>
 8009c20:	4b4e      	ldr	r3, [pc, #312]	; (8009d5c <log_Cal+0x564>)
 8009c22:	881b      	ldrh	r3, [r3, #0]
 8009c24:	ee07 3a90 	vmov	s15, r3
 8009c28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009c2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009c30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	3b01      	subs	r3, #1
 8009c38:	4a45      	ldr	r2, [pc, #276]	; (8009d50 <log_Cal+0x558>)
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	4413      	add	r3, r2
 8009c3e:	edd3 7a00 	vldr	s15, [r3]
 8009c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c46:	4a42      	ldr	r2, [pc, #264]	; (8009d50 <log_Cal+0x558>)
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	4413      	add	r3, r2
 8009c4e:	edc3 7a00 	vstr	s15, [r3]
	for(int s=1;s<=i;s++){
 8009c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c54:	3301      	adds	r3, #1
 8009c56:	627b      	str	r3, [r7, #36]	; 0x24
 8009c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d29c      	bcs.n	8009b9a <log_Cal+0x3a2>

	}
	for(int s=0;s<=i;s++){
 8009c60:	2300      	movs	r3, #0
 8009c62:	623b      	str	r3, [r7, #32]
 8009c64:	e06b      	b.n	8009d3e <log_Cal+0x546>
		if(secondsp[s+1]>=secondsp[s]){
 8009c66:	6a3b      	ldr	r3, [r7, #32]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	4a39      	ldr	r2, [pc, #228]	; (8009d50 <log_Cal+0x558>)
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	4413      	add	r3, r2
 8009c70:	ed93 7a00 	vldr	s14, [r3]
 8009c74:	4a36      	ldr	r2, [pc, #216]	; (8009d50 <log_Cal+0x558>)
 8009c76:	6a3b      	ldr	r3, [r7, #32]
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	edd3 7a00 	vldr	s15, [r3]
 8009c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c88:	db17      	blt.n	8009cba <log_Cal+0x4c2>
			if(sd_buff==0)sd = secondsp[s];
 8009c8a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009c8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c96:	d105      	bne.n	8009ca4 <log_Cal+0x4ac>
 8009c98:	4a2d      	ldr	r2, [pc, #180]	; (8009d50 <log_Cal+0x558>)
 8009c9a:	6a3b      	ldr	r3, [r7, #32]
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4413      	add	r3, r2
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	643b      	str	r3, [r7, #64]	; 0x40
			sd_buff++;
 8009ca4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009ca8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009cb0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			sd_slo= 0;
 8009cb4:	f04f 0300 	mov.w	r3, #0
 8009cb8:	63bb      	str	r3, [r7, #56]	; 0x38

		}
		if(secondsp[s+1]<=secondsp[s]){
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	4a24      	ldr	r2, [pc, #144]	; (8009d50 <log_Cal+0x558>)
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	ed93 7a00 	vldr	s14, [r3]
 8009cc8:	4a21      	ldr	r2, [pc, #132]	; (8009d50 <log_Cal+0x558>)
 8009cca:	6a3b      	ldr	r3, [r7, #32]
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	edd3 7a00 	vldr	s15, [r3]
 8009cd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cdc:	d82c      	bhi.n	8009d38 <log_Cal+0x540>

			if(sd_buff <= 5 && sd_slo==0) speed_sloow(s-sd_buff,s,sd);
 8009cde:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009ce2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8009ce6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cee:	d818      	bhi.n	8009d22 <log_Cal+0x52a>
 8009cf0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009cf4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cfc:	d111      	bne.n	8009d22 <log_Cal+0x52a>
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	ee07 3a90 	vmov	s15, r3
 8009d04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009d08:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d14:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8009d18:	6a39      	ldr	r1, [r7, #32]
 8009d1a:	ee17 0a90 	vmov	r0, s15
 8009d1e:	f7ff f955 	bl	8008fcc <speed_sloow>
			sd_slo++;
 8009d22:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009d26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d2e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			sd_buff= 0;
 8009d32:	f04f 0300 	mov.w	r3, #0
 8009d36:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int s=0;s<=i;s++){
 8009d38:	6a3b      	ldr	r3, [r7, #32]
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	623b      	str	r3, [r7, #32]
 8009d3e:	6a3b      	ldr	r3, [r7, #32]
 8009d40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d28f      	bcs.n	8009c66 <log_Cal+0x46e>

		}
	}
	for(int s=i;s>=0;s--){
 8009d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d48:	61fb      	str	r3, [r7, #28]
 8009d4a:	e075      	b.n	8009e38 <log_Cal+0x640>
 8009d4c:	20006160 	.word	0x20006160
 8009d50:	20000210 	.word	0x20000210
 8009d54:	2000c318 	.word	0x2000c318
 8009d58:	2000c312 	.word	0x2000c312
 8009d5c:	2000c314 	.word	0x2000c314
		if(secondsp[s-1]>=secondsp[s]){
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	3b01      	subs	r3, #1
 8009d64:	4a5f      	ldr	r2, [pc, #380]	; (8009ee4 <log_Cal+0x6ec>)
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	4413      	add	r3, r2
 8009d6a:	ed93 7a00 	vldr	s14, [r3]
 8009d6e:	4a5d      	ldr	r2, [pc, #372]	; (8009ee4 <log_Cal+0x6ec>)
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4413      	add	r3, r2
 8009d76:	edd3 7a00 	vldr	s15, [r3]
 8009d7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d82:	db17      	blt.n	8009db4 <log_Cal+0x5bc>
			if(sd_buff==0)sd = secondsp[s];
 8009d84:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009d88:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d90:	d105      	bne.n	8009d9e <log_Cal+0x5a6>
 8009d92:	4a54      	ldr	r2, [pc, #336]	; (8009ee4 <log_Cal+0x6ec>)
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	643b      	str	r3, [r7, #64]	; 0x40
			sd_buff++;
 8009d9e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009da2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009da6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009daa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			sd_slo= 0;
 8009dae:	f04f 0300 	mov.w	r3, #0
 8009db2:	63bb      	str	r3, [r7, #56]	; 0x38

		}
		if(secondsp[s-1]<=secondsp[s]){
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	3b01      	subs	r3, #1
 8009db8:	4a4a      	ldr	r2, [pc, #296]	; (8009ee4 <log_Cal+0x6ec>)
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	ed93 7a00 	vldr	s14, [r3]
 8009dc2:	4a48      	ldr	r2, [pc, #288]	; (8009ee4 <log_Cal+0x6ec>)
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4413      	add	r3, r2
 8009dca:	edd3 7a00 	vldr	s15, [r3]
 8009dce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd6:	d82c      	bhi.n	8009e32 <log_Cal+0x63a>

			if(sd_buff <=  5 && sd_slo==0) speed_sloow(s,s+sd_buff,sd);
 8009dd8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009ddc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8009de0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009de8:	d818      	bhi.n	8009e1c <log_Cal+0x624>
 8009dea:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009dee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009df6:	d111      	bne.n	8009e1c <log_Cal+0x624>
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	ee07 3a90 	vmov	s15, r3
 8009dfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e02:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e0e:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8009e12:	ee17 1a90 	vmov	r1, s15
 8009e16:	69f8      	ldr	r0, [r7, #28]
 8009e18:	f7ff f8d8 	bl	8008fcc <speed_sloow>
			sd_slo++;
 8009e1c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009e20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e28:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			sd_buff= 0;
 8009e2c:	f04f 0300 	mov.w	r3, #0
 8009e30:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int s=i;s>=0;s--){
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	3b01      	subs	r3, #1
 8009e36:	61fb      	str	r3, [r7, #28]
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	da90      	bge.n	8009d60 <log_Cal+0x568>
//			}
//			s=s-h;
//		}
//		buff = secondsp[s];
//	}
	count_num = i;
 8009e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e40:	4a29      	ldr	r2, [pc, #164]	; (8009ee8 <log_Cal+0x6f0>)
 8009e42:	6013      	str	r3, [r2, #0]
//		//printf("%d,",s);
//		printf("%f\n\r",mon_speed);
//		HAL_Delay(10);
//		count_num = s;
//	}
	i=0;
 8009e44:	2300      	movs	r3, #0
 8009e46:	657b      	str	r3, [r7, #84]	; 0x54
	loadlog_adress = start_adress_sector9;
 8009e48:	4b28      	ldr	r3, [pc, #160]	; (8009eec <log_Cal+0x6f4>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a28      	ldr	r2, [pc, #160]	; (8009ef0 <log_Cal+0x6f8>)
 8009e4e:	6013      	str	r3, [r2, #0]
	while(1){
		Lo=*(float*)loadlog_adress;
 8009e50:	4b27      	ldr	r3, [pc, #156]	; (8009ef0 <log_Cal+0x6f8>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	60bb      	str	r3, [r7, #8]
		if(isnan(Lo) != 0)break;
 8009e58:	ed97 7a02 	vldr	s14, [r7, #8]
 8009e5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009e60:	eeb4 7a67 	vcmp.f32	s14, s15
 8009e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e68:	d611      	bvs.n	8009e8e <log_Cal+0x696>
		second_load[i] = Lo;
 8009e6a:	4a22      	ldr	r2, [pc, #136]	; (8009ef4 <log_Cal+0x6fc>)
 8009e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	601a      	str	r2, [r3, #0]
		loadlog_adress+= 0x04;
 8009e76:	4b1e      	ldr	r3, [pc, #120]	; (8009ef0 <log_Cal+0x6f8>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	4a1c      	ldr	r2, [pc, #112]	; (8009ef0 <log_Cal+0x6f8>)
 8009e7e:	6013      	str	r3, [r2, #0]
		//printf("%lf\r\n",Lo);
		LED(2);
 8009e80:	2002      	movs	r0, #2
 8009e82:	f002 f913 	bl	800c0ac <LED>
		i++;
 8009e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e88:	3301      	adds	r3, #1
 8009e8a:	657b      	str	r3, [r7, #84]	; 0x54
		Lo=*(float*)loadlog_adress;
 8009e8c:	e7e0      	b.n	8009e50 <log_Cal+0x658>
		if(isnan(Lo) != 0)break;
 8009e8e:	bf00      	nop
		//HAL_Delay(500);

	}

	side_adress = start_adress_sector10;
 8009e90:	4b19      	ldr	r3, [pc, #100]	; (8009ef8 <log_Cal+0x700>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a19      	ldr	r2, [pc, #100]	; (8009efc <log_Cal+0x704>)
 8009e96:	6013      	str	r3, [r2, #0]
	while(1){

		cao = *(uint32_t*)side_adress;
 8009e98:	4b18      	ldr	r3, [pc, #96]	; (8009efc <log_Cal+0x704>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	613b      	str	r3, [r7, #16]
		fu =  *(float*)side_adress;
 8009ea0:	4b16      	ldr	r3, [pc, #88]	; (8009efc <log_Cal+0x704>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	60fb      	str	r3, [r7, #12]
		if(isnan(fu) != 0)break;
 8009ea8:	ed97 7a03 	vldr	s14, [r7, #12]
 8009eac:	edd7 7a03 	vldr	s15, [r7, #12]
 8009eb0:	eeb4 7a67 	vcmp.f32	s14, s15
 8009eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eb8:	d60e      	bvs.n	8009ed8 <log_Cal+0x6e0>
		correction[d] = cao;
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	b299      	uxth	r1, r3
 8009ebe:	4a10      	ldr	r2, [pc, #64]	; (8009f00 <log_Cal+0x708>)
 8009ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ec2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		d++;
 8009ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ec8:	3301      	adds	r3, #1
 8009eca:	653b      	str	r3, [r7, #80]	; 0x50
		side_adress+= 0x04;
 8009ecc:	4b0b      	ldr	r3, [pc, #44]	; (8009efc <log_Cal+0x704>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	3304      	adds	r3, #4
 8009ed2:	4a0a      	ldr	r2, [pc, #40]	; (8009efc <log_Cal+0x704>)
 8009ed4:	6013      	str	r3, [r2, #0]
		cao = *(uint32_t*)side_adress;
 8009ed6:	e7df      	b.n	8009e98 <log_Cal+0x6a0>
		if(isnan(fu) != 0)break;
 8009ed8:	bf00      	nop
	}
}
 8009eda:	bf00      	nop
 8009edc:	3758      	adds	r7, #88	; 0x58
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009ee4:	20000210 	.word	0x20000210
 8009ee8:	2000c0b8 	.word	0x2000c0b8
 8009eec:	080164a8 	.word	0x080164a8
 8009ef0:	2000c2f4 	.word	0x2000c2f4
 8009ef4:	20006160 	.word	0x20006160
 8009ef8:	080164ac 	.word	0x080164ac
 8009efc:	2000c2fc 	.word	0x2000c2fc
 8009f00:	2000c0c0 	.word	0x2000c0c0
 8009f04:	00000000 	.word	0x00000000

08009f08 <second_driv>:
inline void second_driv(float log){
 8009f08:	b5b0      	push	{r4, r5, r7, lr}
 8009f0a:	b088      	sub	sp, #32
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	ed87 0a01 	vstr	s0, [r7, #4]
	static  int hu=0;
	static float logbuff2=0;
	static float cale_val=0;
	static uint16_t num=0;
	static uint16_t corr = 0;
	float cale=0;
 8009f12:	f04f 0300 	mov.w	r3, #0
 8009f16:	613b      	str	r3, [r7, #16]
	static int frp=0;
	static int frap = 0;
	static int cao=0;
	int cao_d=0;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	60fb      	str	r3, [r7, #12]
	int cao_v=10000;
 8009f1c:	f242 7310 	movw	r3, #10000	; 0x2710
 8009f20:	61fb      	str	r3, [r7, #28]
	int carr_d=0;
 8009f22:	2300      	movs	r3, #0
 8009f24:	61bb      	str	r3, [r7, #24]
	int cou_buff=0;
 8009f26:	2300      	movs	r3, #0
 8009f28:	617b      	str	r3, [r7, #20]
	static uint16_t coi=0;
	static int cros=39;

	//float fu=0;
	static uint d=0;
	if(i<=0)corr=correction[0];
 8009f2a:	4b91      	ldr	r3, [pc, #580]	; (800a170 <second_driv+0x268>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	dc03      	bgt.n	8009f3a <second_driv+0x32>
 8009f32:	4b90      	ldr	r3, [pc, #576]	; (800a174 <second_driv+0x26c>)
 8009f34:	881a      	ldrh	r2, [r3, #0]
 8009f36:	4b90      	ldr	r3, [pc, #576]	; (800a178 <second_driv+0x270>)
 8009f38:	801a      	strh	r2, [r3, #0]
	num++;
 8009f3a:	4b90      	ldr	r3, [pc, #576]	; (800a17c <second_driv+0x274>)
 8009f3c:	881b      	ldrh	r3, [r3, #0]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	4b8e      	ldr	r3, [pc, #568]	; (800a17c <second_driv+0x274>)
 8009f44:	801a      	strh	r2, [r3, #0]
	cale_val += calc_angle()*T;
 8009f46:	f000 fd53 	bl	800a9f0 <calc_angle>
 8009f4a:	ee10 3a10 	vmov	r3, s0
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fe fa32 	bl	80083b8 <__aeabi_f2d>
 8009f54:	a380      	add	r3, pc, #512	; (adr r3, 800a158 <second_driv+0x250>)
 8009f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5a:	f7fe fa85 	bl	8008468 <__aeabi_dmul>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	460c      	mov	r4, r1
 8009f62:	4625      	mov	r5, r4
 8009f64:	461c      	mov	r4, r3
 8009f66:	4b86      	ldr	r3, [pc, #536]	; (800a180 <second_driv+0x278>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7fe fa24 	bl	80083b8 <__aeabi_f2d>
 8009f70:	4602      	mov	r2, r0
 8009f72:	460b      	mov	r3, r1
 8009f74:	4620      	mov	r0, r4
 8009f76:	4629      	mov	r1, r5
 8009f78:	f7fe f8c0 	bl	80080fc <__adddf3>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	460c      	mov	r4, r1
 8009f80:	4618      	mov	r0, r3
 8009f82:	4621      	mov	r1, r4
 8009f84:	f7fe fd48 	bl	8008a18 <__aeabi_d2f>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	4b7d      	ldr	r3, [pc, #500]	; (800a180 <second_driv+0x278>)
 8009f8c:	601a      	str	r2, [r3, #0]

	logbuff = logbuff+ log;
 8009f8e:	4b7d      	ldr	r3, [pc, #500]	; (800a184 <second_driv+0x27c>)
 8009f90:	ed93 7a00 	vldr	s14, [r3]
 8009f94:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f9c:	4b79      	ldr	r3, [pc, #484]	; (800a184 <second_driv+0x27c>)
 8009f9e:	edc3 7a00 	vstr	s15, [r3]
	logbuff2 = logbuff2 + log;
 8009fa2:	4b79      	ldr	r3, [pc, #484]	; (800a188 <second_driv+0x280>)
 8009fa4:	ed93 7a00 	vldr	s14, [r3]
 8009fa8:	edd7 7a01 	vldr	s15, [r7, #4]
 8009fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fb0:	4b75      	ldr	r3, [pc, #468]	; (800a188 <second_driv+0x280>)
 8009fb2:	edc3 7a00 	vstr	s15, [r3]
	if(logbuff2>=10.000){
 8009fb6:	4b74      	ldr	r3, [pc, #464]	; (800a188 <second_driv+0x280>)
 8009fb8:	edd3 7a00 	vldr	s15, [r3]
 8009fbc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8009fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fc8:	db40      	blt.n	800a04c <second_driv+0x144>
		log_count++;
 8009fca:	4b70      	ldr	r3, [pc, #448]	; (800a18c <second_driv+0x284>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	4a6e      	ldr	r2, [pc, #440]	; (800a18c <second_driv+0x284>)
 8009fd2:	6013      	str	r3, [r2, #0]
		log_flag = 1;
 8009fd4:	4b6e      	ldr	r3, [pc, #440]	; (800a190 <second_driv+0x288>)
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	701a      	strb	r2, [r3, #0]
		cale = cale_val;
 8009fda:	4b69      	ldr	r3, [pc, #420]	; (800a180 <second_driv+0x278>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	613b      	str	r3, [r7, #16]
		if((cale_buff-cale)<=0.05 && (cale_buff-cale)>=-0.05 )frp++;//0.005
 8009fe0:	4b6c      	ldr	r3, [pc, #432]	; (800a194 <second_driv+0x28c>)
 8009fe2:	ed93 7a00 	vldr	s14, [r3]
 8009fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8009fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fee:	ee17 0a90 	vmov	r0, s15
 8009ff2:	f7fe f9e1 	bl	80083b8 <__aeabi_f2d>
 8009ff6:	a35a      	add	r3, pc, #360	; (adr r3, 800a160 <second_driv+0x258>)
 8009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffc:	f7fe fcb0 	bl	8008960 <__aeabi_dcmple>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d017      	beq.n	800a036 <second_driv+0x12e>
 800a006:	4b63      	ldr	r3, [pc, #396]	; (800a194 <second_driv+0x28c>)
 800a008:	ed93 7a00 	vldr	s14, [r3]
 800a00c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a010:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a014:	ee17 0a90 	vmov	r0, s15
 800a018:	f7fe f9ce 	bl	80083b8 <__aeabi_f2d>
 800a01c:	a352      	add	r3, pc, #328	; (adr r3, 800a168 <second_driv+0x260>)
 800a01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a022:	f7fe fca7 	bl	8008974 <__aeabi_dcmpge>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d004      	beq.n	800a036 <second_driv+0x12e>
 800a02c:	4b5a      	ldr	r3, [pc, #360]	; (800a198 <second_driv+0x290>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	3301      	adds	r3, #1
 800a032:	4a59      	ldr	r2, [pc, #356]	; (800a198 <second_driv+0x290>)
 800a034:	6013      	str	r3, [r2, #0]
		cale_buff = cale;
 800a036:	4a57      	ldr	r2, [pc, #348]	; (800a194 <second_driv+0x28c>)
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	6013      	str	r3, [r2, #0]
		cale_val=0;
 800a03c:	4b50      	ldr	r3, [pc, #320]	; (800a180 <second_driv+0x278>)
 800a03e:	f04f 0200 	mov.w	r2, #0
 800a042:	601a      	str	r2, [r3, #0]
		logbuff2=0;
 800a044:	4b50      	ldr	r3, [pc, #320]	; (800a188 <second_driv+0x280>)
 800a046:	f04f 0200 	mov.w	r2, #0
 800a04a:	601a      	str	r2, [r3, #0]
	}
	//test = logbuff;
	//driv_fan(speedget);
	if(straight_flag){
 800a04c:	4b53      	ldr	r3, [pc, #332]	; (800a19c <second_driv+0x294>)
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d011      	beq.n	800a078 <second_driv+0x170>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800a054:	2200      	movs	r2, #0
 800a056:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a05a:	4851      	ldr	r0, [pc, #324]	; (800a1a0 <second_driv+0x298>)
 800a05c:	f006 f8ba 	bl	80101d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800a060:	2200      	movs	r2, #0
 800a062:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a066:	484e      	ldr	r0, [pc, #312]	; (800a1a0 <second_driv+0x298>)
 800a068:	f006 f8b4 	bl	80101d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800a06c:	2200      	movs	r2, #0
 800a06e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a072:	484b      	ldr	r0, [pc, #300]	; (800a1a0 <second_driv+0x298>)
 800a074:	f006 f8ae 	bl	80101d4 <HAL_GPIO_WritePin>
	}
	//else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
	if(logbuff >= second_load[i]){
 800a078:	4b3d      	ldr	r3, [pc, #244]	; (800a170 <second_driv+0x268>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a49      	ldr	r2, [pc, #292]	; (800a1a4 <second_driv+0x29c>)
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	ed93 7a00 	vldr	s14, [r3]
 800a086:	4b3f      	ldr	r3, [pc, #252]	; (800a184 <second_driv+0x27c>)
 800a088:	edd3 7a00 	vldr	s15, [r3]
 800a08c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a094:	f200 8106 	bhi.w	800a2a4 <second_driv+0x39c>
		if(logbuff > second_load[i+1]) i++;
 800a098:	4b35      	ldr	r3, [pc, #212]	; (800a170 <second_driv+0x268>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	3301      	adds	r3, #1
 800a09e:	4a41      	ldr	r2, [pc, #260]	; (800a1a4 <second_driv+0x29c>)
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	4413      	add	r3, r2
 800a0a4:	ed93 7a00 	vldr	s14, [r3]
 800a0a8:	4b36      	ldr	r3, [pc, #216]	; (800a184 <second_driv+0x27c>)
 800a0aa:	edd3 7a00 	vldr	s15, [r3]
 800a0ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0b6:	d504      	bpl.n	800a0c2 <second_driv+0x1ba>
 800a0b8:	4b2d      	ldr	r3, [pc, #180]	; (800a170 <second_driv+0x268>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	4a2c      	ldr	r2, [pc, #176]	; (800a170 <second_driv+0x268>)
 800a0c0:	6013      	str	r3, [r2, #0]

		coi++;
 800a0c2:	4b39      	ldr	r3, [pc, #228]	; (800a1a8 <second_driv+0x2a0>)
 800a0c4:	881b      	ldrh	r3, [r3, #0]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	b29a      	uxth	r2, r3
 800a0ca:	4b37      	ldr	r3, [pc, #220]	; (800a1a8 <second_driv+0x2a0>)
 800a0cc:	801a      	strh	r2, [r3, #0]
		if(secondsp[i]<1500 && count_num > i && maker_flag==1)secondsp[i]=1500;
 800a0ce:	4b28      	ldr	r3, [pc, #160]	; (800a170 <second_driv+0x268>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a36      	ldr	r2, [pc, #216]	; (800a1ac <second_driv+0x2a4>)
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4413      	add	r3, r2
 800a0d8:	edd3 7a00 	vldr	s15, [r3]
 800a0dc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a1b0 <second_driv+0x2a8>
 800a0e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e8:	d510      	bpl.n	800a10c <second_driv+0x204>
 800a0ea:	4b32      	ldr	r3, [pc, #200]	; (800a1b4 <second_driv+0x2ac>)
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	4b20      	ldr	r3, [pc, #128]	; (800a170 <second_driv+0x268>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	dd0a      	ble.n	800a10c <second_driv+0x204>
 800a0f6:	4b30      	ldr	r3, [pc, #192]	; (800a1b8 <second_driv+0x2b0>)
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d106      	bne.n	800a10c <second_driv+0x204>
 800a0fe:	4b1c      	ldr	r3, [pc, #112]	; (800a170 <second_driv+0x268>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a2a      	ldr	r2, [pc, #168]	; (800a1ac <second_driv+0x2a4>)
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	4413      	add	r3, r2
 800a108:	4a2c      	ldr	r2, [pc, #176]	; (800a1bc <second_driv+0x2b4>)
 800a10a:	601a      	str	r2, [r3, #0]
		if(count_num-100 < i || i <= 100){
 800a10c:	4b29      	ldr	r3, [pc, #164]	; (800a1b4 <second_driv+0x2ac>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800a114:	4b16      	ldr	r3, [pc, #88]	; (800a170 <second_driv+0x268>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	429a      	cmp	r2, r3
 800a11a:	db03      	blt.n	800a124 <second_driv+0x21c>
 800a11c:	4b14      	ldr	r3, [pc, #80]	; (800a170 <second_driv+0x268>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b64      	cmp	r3, #100	; 0x64
 800a122:	dc4f      	bgt.n	800a1c4 <second_driv+0x2bc>
			goal=1;
 800a124:	4b26      	ldr	r3, [pc, #152]	; (800a1c0 <second_driv+0x2b8>)
 800a126:	2201      	movs	r2, #1
 800a128:	701a      	strb	r2, [r3, #0]
			if(secondsp[i]<1500)secondsp[i]=1500;
 800a12a:	4b11      	ldr	r3, [pc, #68]	; (800a170 <second_driv+0x268>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a1f      	ldr	r2, [pc, #124]	; (800a1ac <second_driv+0x2a4>)
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	4413      	add	r3, r2
 800a134:	edd3 7a00 	vldr	s15, [r3]
 800a138:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a1b0 <second_driv+0x2a8>
 800a13c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a144:	d541      	bpl.n	800a1ca <second_driv+0x2c2>
 800a146:	4b0a      	ldr	r3, [pc, #40]	; (800a170 <second_driv+0x268>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a18      	ldr	r2, [pc, #96]	; (800a1ac <second_driv+0x2a4>)
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	4413      	add	r3, r2
 800a150:	4a1a      	ldr	r2, [pc, #104]	; (800a1bc <second_driv+0x2b4>)
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	e039      	b.n	800a1ca <second_driv+0x2c2>
 800a156:	bf00      	nop
 800a158:	d2f1a9fc 	.word	0xd2f1a9fc
 800a15c:	3f50624d 	.word	0x3f50624d
 800a160:	9999999a 	.word	0x9999999a
 800a164:	3fa99999 	.word	0x3fa99999
 800a168:	9999999a 	.word	0x9999999a
 800a16c:	bfa99999 	.word	0xbfa99999
 800a170:	2000c270 	.word	0x2000c270
 800a174:	2000c0c0 	.word	0x2000c0c0
 800a178:	2000c274 	.word	0x2000c274
 800a17c:	2000c276 	.word	0x2000c276
 800a180:	2000c278 	.word	0x2000c278
 800a184:	2000c27c 	.word	0x2000c27c
 800a188:	2000c280 	.word	0x2000c280
 800a18c:	2000c0b4 	.word	0x2000c0b4
 800a190:	2000020a 	.word	0x2000020a
 800a194:	2000c284 	.word	0x2000c284
 800a198:	2000c288 	.word	0x2000c288
 800a19c:	2000020c 	.word	0x2000020c
 800a1a0:	40020000 	.word	0x40020000
 800a1a4:	20006160 	.word	0x20006160
 800a1a8:	2000c28c 	.word	0x2000c28c
 800a1ac:	20000210 	.word	0x20000210
 800a1b0:	44bb8000 	.word	0x44bb8000
 800a1b4:	2000c0b8 	.word	0x2000c0b8
 800a1b8:	2000c2bc 	.word	0x2000c2bc
 800a1bc:	44bb8000 	.word	0x44bb8000
 800a1c0:	20000008 	.word	0x20000008
		}
		else goal=0;
 800a1c4:	4ba2      	ldr	r3, [pc, #648]	; (800a450 <second_driv+0x548>)
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	701a      	strb	r2, [r3, #0]
		if(count_num+100<=i) error();
 800a1ca:	4ba2      	ldr	r3, [pc, #648]	; (800a454 <second_driv+0x54c>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800a1d2:	4ba1      	ldr	r3, [pc, #644]	; (800a458 <second_driv+0x550>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	dc01      	bgt.n	800a1de <second_driv+0x2d6>
 800a1da:	f002 f8d1 	bl	800c380 <error>
		Average_speed = secondsp[i];
 800a1de:	4b9e      	ldr	r3, [pc, #632]	; (800a458 <second_driv+0x550>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a9e      	ldr	r2, [pc, #632]	; (800a45c <second_driv+0x554>)
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4413      	add	r3, r2
 800a1e8:	edd3 7a00 	vldr	s15, [r3]
 800a1ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1f0:	ee17 3a90 	vmov	r3, s15
 800a1f4:	b21a      	sxth	r2, r3
 800a1f6:	4b9a      	ldr	r3, [pc, #616]	; (800a460 <second_driv+0x558>)
 800a1f8:	801a      	strh	r2, [r3, #0]
		co++;
 800a1fa:	4b9a      	ldr	r3, [pc, #616]	; (800a464 <second_driv+0x55c>)
 800a1fc:	881b      	ldrh	r3, [r3, #0]
 800a1fe:	3301      	adds	r3, #1
 800a200:	b29a      	uxth	r2, r3
 800a202:	4b98      	ldr	r3, [pc, #608]	; (800a464 <second_driv+0x55c>)
 800a204:	801a      	strh	r2, [r3, #0]
		i++;
 800a206:	4b94      	ldr	r3, [pc, #592]	; (800a458 <second_driv+0x550>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3301      	adds	r3, #1
 800a20c:	4a92      	ldr	r2, [pc, #584]	; (800a458 <second_driv+0x550>)
 800a20e:	6013      	str	r3, [r2, #0]
		cao++;
 800a210:	4b95      	ldr	r3, [pc, #596]	; (800a468 <second_driv+0x560>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	3301      	adds	r3, #1
 800a216:	4a94      	ldr	r2, [pc, #592]	; (800a468 <second_driv+0x560>)
 800a218:	6013      	str	r3, [r2, #0]
		FLASH_Write_Word_F(actual__callog_adress,cale_val);
 800a21a:	4b94      	ldr	r3, [pc, #592]	; (800a46c <second_driv+0x564>)
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	4b94      	ldr	r3, [pc, #592]	; (800a470 <second_driv+0x568>)
 800a220:	edd3 7a00 	vldr	s15, [r3]
 800a224:	eeb0 0a67 	vmov.f32	s0, s15
 800a228:	4610      	mov	r0, r2
 800a22a:	f000 faa1 	bl	800a770 <FLASH_Write_Word_F>
		FLASH_Write_Word_F(actual__velo_adress,Average_speed);
 800a22e:	4b91      	ldr	r3, [pc, #580]	; (800a474 <second_driv+0x56c>)
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	4b8b      	ldr	r3, [pc, #556]	; (800a460 <second_driv+0x558>)
 800a234:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a238:	ee07 3a90 	vmov	s15, r3
 800a23c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a240:	eeb0 0a67 	vmov.f32	s0, s15
 800a244:	4610      	mov	r0, r2
 800a246:	f000 fa93 	bl	800a770 <FLASH_Write_Word_F>
		FLASH_Write_Word_F(plan_velo_adress,speedget);
 800a24a:	4b8b      	ldr	r3, [pc, #556]	; (800a478 <second_driv+0x570>)
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	4b8b      	ldr	r3, [pc, #556]	; (800a47c <second_driv+0x574>)
 800a250:	edd3 7a00 	vldr	s15, [r3]
 800a254:	eeb0 0a67 	vmov.f32	s0, s15
 800a258:	4610      	mov	r0, r2
 800a25a:	f000 fa89 	bl	800a770 <FLASH_Write_Word_F>
		plan_velo_adress += 0x04;
 800a25e:	4b86      	ldr	r3, [pc, #536]	; (800a478 <second_driv+0x570>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3304      	adds	r3, #4
 800a264:	4a84      	ldr	r2, [pc, #528]	; (800a478 <second_driv+0x570>)
 800a266:	6013      	str	r3, [r2, #0]
		actual__velo_adress += 0x04;
 800a268:	4b82      	ldr	r3, [pc, #520]	; (800a474 <second_driv+0x56c>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	3304      	adds	r3, #4
 800a26e:	4a81      	ldr	r2, [pc, #516]	; (800a474 <second_driv+0x56c>)
 800a270:	6013      	str	r3, [r2, #0]
		actual__callog_adress+= 0x04;
 800a272:	4b7e      	ldr	r3, [pc, #504]	; (800a46c <second_driv+0x564>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	3304      	adds	r3, #4
 800a278:	4a7c      	ldr	r2, [pc, #496]	; (800a46c <second_driv+0x564>)
 800a27a:	6013      	str	r3, [r2, #0]
//			//if(abs((corr-i) <= 20) && cao >= 30) straight_flag = true;
//			//if(corr <= i)corr=correction[d+1];
//		}

//		cale_buff = cale;
		if(frp >= 40 || cross_line){
 800a27c:	4b80      	ldr	r3, [pc, #512]	; (800a480 <second_driv+0x578>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b27      	cmp	r3, #39	; 0x27
 800a282:	dc03      	bgt.n	800a28c <second_driv+0x384>
 800a284:	4b7f      	ldr	r3, [pc, #508]	; (800a484 <second_driv+0x57c>)
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d008      	beq.n	800a29e <second_driv+0x396>
			straight_flag = true;
 800a28c:	4b7e      	ldr	r3, [pc, #504]	; (800a488 <second_driv+0x580>)
 800a28e:	2201      	movs	r2, #1
 800a290:	701a      	strb	r2, [r3, #0]
			frp=30;
 800a292:	4b7b      	ldr	r3, [pc, #492]	; (800a480 <second_driv+0x578>)
 800a294:	221e      	movs	r2, #30
 800a296:	601a      	str	r2, [r3, #0]
			frap = 0;
 800a298:	4b7c      	ldr	r3, [pc, #496]	; (800a48c <second_driv+0x584>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	601a      	str	r2, [r3, #0]
		}

		//cale_val=0;
		num=0;
 800a29e:	4b7c      	ldr	r3, [pc, #496]	; (800a490 <second_driv+0x588>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	801a      	strh	r2, [r3, #0]
	}
//	if(correc_maker==1 ){
	if(correc_maker==1  && straight_flag == 1){
 800a2a4:	4b7b      	ldr	r3, [pc, #492]	; (800a494 <second_driv+0x58c>)
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d17d      	bne.n	800a3a8 <second_driv+0x4a0>
 800a2ac:	4b76      	ldr	r3, [pc, #472]	; (800a488 <second_driv+0x580>)
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d179      	bne.n	800a3a8 <second_driv+0x4a0>

		hu=0;
 800a2b4:	4b78      	ldr	r3, [pc, #480]	; (800a498 <second_driv+0x590>)
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	601a      	str	r2, [r3, #0]
		while(1){
			cao = correction[hu];
 800a2ba:	4b77      	ldr	r3, [pc, #476]	; (800a498 <second_driv+0x590>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a77      	ldr	r2, [pc, #476]	; (800a49c <second_driv+0x594>)
 800a2c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	4b68      	ldr	r3, [pc, #416]	; (800a468 <second_driv+0x560>)
 800a2c8:	601a      	str	r2, [r3, #0]
			if(correction[hu]==0 && hu > 0)break;
 800a2ca:	4b73      	ldr	r3, [pc, #460]	; (800a498 <second_driv+0x590>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a73      	ldr	r2, [pc, #460]	; (800a49c <second_driv+0x594>)
 800a2d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d103      	bne.n	800a2e0 <second_driv+0x3d8>
 800a2d8:	4b6f      	ldr	r3, [pc, #444]	; (800a498 <second_driv+0x590>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	dc1a      	bgt.n	800a316 <second_driv+0x40e>
			cao_d = abs(i-cao);
 800a2e0:	4b5d      	ldr	r3, [pc, #372]	; (800a458 <second_driv+0x550>)
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	4b60      	ldr	r3, [pc, #384]	; (800a468 <second_driv+0x560>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	bfb8      	it	lt
 800a2ee:	425b      	neglt	r3, r3
 800a2f0:	60fb      	str	r3, [r7, #12]

			//if(cao_d<30)break;
			if (cao_v > cao_d){
 800a2f2:	69fa      	ldr	r2, [r7, #28]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	dd07      	ble.n	800a30a <second_driv+0x402>
				cao_v = cao_d;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	61fb      	str	r3, [r7, #28]
				cou_buff = cao;
 800a2fe:	4b5a      	ldr	r3, [pc, #360]	; (800a468 <second_driv+0x560>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	617b      	str	r3, [r7, #20]
				carr_d=hu;
 800a304:	4b64      	ldr	r3, [pc, #400]	; (800a498 <second_driv+0x590>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	61bb      	str	r3, [r7, #24]
			}
			hu++;
 800a30a:	4b63      	ldr	r3, [pc, #396]	; (800a498 <second_driv+0x590>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	3301      	adds	r3, #1
 800a310:	4a61      	ldr	r2, [pc, #388]	; (800a498 <second_driv+0x590>)
 800a312:	6013      	str	r3, [r2, #0]
			cao = correction[hu];
 800a314:	e7d1      	b.n	800a2ba <second_driv+0x3b2>
			if(correction[hu]==0 && hu > 0)break;
 800a316:	bf00      	nop

		}
		if(abs(i-cou_buff)<=30 /*|| (cao >= 500 && abs(i-cou_buff)<=500)*/){
 800a318:	4b4f      	ldr	r3, [pc, #316]	; (800a458 <second_driv+0x550>)
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	1ad3      	subs	r3, r2, r3
 800a320:	f113 0f1e 	cmn.w	r3, #30
 800a324:	db37      	blt.n	800a396 <second_driv+0x48e>
 800a326:	4b4c      	ldr	r3, [pc, #304]	; (800a458 <second_driv+0x550>)
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	1ad3      	subs	r3, r2, r3
 800a32e:	2b1e      	cmp	r3, #30
 800a330:	dc31      	bgt.n	800a396 <second_driv+0x48e>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800a332:	2201      	movs	r2, #1
 800a334:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a338:	4859      	ldr	r0, [pc, #356]	; (800a4a0 <second_driv+0x598>)
 800a33a:	f005 ff4b 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800a33e:	2201      	movs	r2, #1
 800a340:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a344:	4856      	ldr	r0, [pc, #344]	; (800a4a0 <second_driv+0x598>)
 800a346:	f005 ff45 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800a34a:	2201      	movs	r2, #1
 800a34c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a350:	4853      	ldr	r0, [pc, #332]	; (800a4a0 <second_driv+0x598>)
 800a352:	f005 ff3f 	bl	80101d4 <HAL_GPIO_WritePin>
			i = cou_buff;
 800a356:	4a40      	ldr	r2, [pc, #256]	; (800a458 <second_driv+0x550>)
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	6013      	str	r3, [r2, #0]
			logbuff=second_load[i];
 800a35c:	4b3e      	ldr	r3, [pc, #248]	; (800a458 <second_driv+0x550>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a50      	ldr	r2, [pc, #320]	; (800a4a4 <second_driv+0x59c>)
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a4f      	ldr	r2, [pc, #316]	; (800a4a8 <second_driv+0x5a0>)
 800a36a:	6013      	str	r3, [r2, #0]
			hu = carr_d;
 800a36c:	4a4a      	ldr	r2, [pc, #296]	; (800a498 <second_driv+0x590>)
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	6013      	str	r3, [r2, #0]
			d= carr_d+1;
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	3301      	adds	r3, #1
 800a376:	461a      	mov	r2, r3
 800a378:	4b4c      	ldr	r3, [pc, #304]	; (800a4ac <second_driv+0x5a4>)
 800a37a:	601a      	str	r2, [r3, #0]
			corr=correction[d];
 800a37c:	4b4b      	ldr	r3, [pc, #300]	; (800a4ac <second_driv+0x5a4>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a46      	ldr	r2, [pc, #280]	; (800a49c <second_driv+0x594>)
 800a382:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800a386:	4b4a      	ldr	r3, [pc, #296]	; (800a4b0 <second_driv+0x5a8>)
 800a388:	801a      	strh	r2, [r3, #0]
			cao=0;
 800a38a:	4b37      	ldr	r3, [pc, #220]	; (800a468 <second_driv+0x560>)
 800a38c:	2200      	movs	r2, #0
 800a38e:	601a      	str	r2, [r3, #0]
			coi=0;
 800a390:	4b48      	ldr	r3, [pc, #288]	; (800a4b4 <second_driv+0x5ac>)
 800a392:	2200      	movs	r2, #0
 800a394:	801a      	strh	r2, [r3, #0]


		}
//		d++;
//		corr=correction[d];
		straight_flag=false;
 800a396:	4b3c      	ldr	r3, [pc, #240]	; (800a488 <second_driv+0x580>)
 800a398:	2200      	movs	r2, #0
 800a39a:	701a      	strb	r2, [r3, #0]
		correc_maker = false;
 800a39c:	4b3d      	ldr	r3, [pc, #244]	; (800a494 <second_driv+0x58c>)
 800a39e:	2200      	movs	r2, #0
 800a3a0:	701a      	strb	r2, [r3, #0]
		frp=0;
 800a3a2:	4b37      	ldr	r3, [pc, #220]	; (800a480 <second_driv+0x578>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	601a      	str	r2, [r3, #0]
	}
	if(cross_maker){
 800a3a8:	4b43      	ldr	r3, [pc, #268]	; (800a4b8 <second_driv+0x5b0>)
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d03b      	beq.n	800a428 <second_driv+0x520>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a3b6:	483a      	ldr	r0, [pc, #232]	; (800a4a0 <second_driv+0x598>)
 800a3b8:	f005 ff0c 	bl	80101d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800a3bc:	2201      	movs	r2, #1
 800a3be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a3c2:	4837      	ldr	r0, [pc, #220]	; (800a4a0 <second_driv+0x598>)
 800a3c4:	f005 ff06 	bl	80101d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a3ce:	4834      	ldr	r0, [pc, #208]	; (800a4a0 <second_driv+0x598>)
 800a3d0:	f005 ff00 	bl	80101d4 <HAL_GPIO_WritePin>
		i = work_ram[cros];
 800a3d4:	4b39      	ldr	r3, [pc, #228]	; (800a4bc <second_driv+0x5b4>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a39      	ldr	r2, [pc, #228]	; (800a4c0 <second_driv+0x5b8>)
 800a3da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	4b1d      	ldr	r3, [pc, #116]	; (800a458 <second_driv+0x550>)
 800a3e2:	601a      	str	r2, [r3, #0]
		logbuff=second_load[i];
 800a3e4:	4b1c      	ldr	r3, [pc, #112]	; (800a458 <second_driv+0x550>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a2e      	ldr	r2, [pc, #184]	; (800a4a4 <second_driv+0x59c>)
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a2d      	ldr	r2, [pc, #180]	; (800a4a8 <second_driv+0x5a0>)
 800a3f2:	6013      	str	r3, [r2, #0]
		cross_maker = false;
 800a3f4:	4b30      	ldr	r3, [pc, #192]	; (800a4b8 <second_driv+0x5b0>)
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	701a      	strb	r2, [r3, #0]
		cros++;
 800a3fa:	4b30      	ldr	r3, [pc, #192]	; (800a4bc <second_driv+0x5b4>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3301      	adds	r3, #1
 800a400:	4a2e      	ldr	r2, [pc, #184]	; (800a4bc <second_driv+0x5b4>)
 800a402:	6013      	str	r3, [r2, #0]
		if(work_ram[cros]>=5000 || work_ram[cros]<=0) error();
 800a404:	4b2d      	ldr	r3, [pc, #180]	; (800a4bc <second_driv+0x5b4>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a2d      	ldr	r2, [pc, #180]	; (800a4c0 <second_driv+0x5b8>)
 800a40a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a40e:	f241 3287 	movw	r2, #4999	; 0x1387
 800a412:	4293      	cmp	r3, r2
 800a414:	d806      	bhi.n	800a424 <second_driv+0x51c>
 800a416:	4b29      	ldr	r3, [pc, #164]	; (800a4bc <second_driv+0x5b4>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a29      	ldr	r2, [pc, #164]	; (800a4c0 <second_driv+0x5b8>)
 800a41c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d101      	bne.n	800a428 <second_driv+0x520>
 800a424:	f001 ffac 	bl	800c380 <error>
	}
	if(correc_maker==1){
 800a428:	4b1a      	ldr	r3, [pc, #104]	; (800a494 <second_driv+0x58c>)
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d10b      	bne.n	800a448 <second_driv+0x540>
		frp=0;
 800a430:	4b13      	ldr	r3, [pc, #76]	; (800a480 <second_driv+0x578>)
 800a432:	2200      	movs	r2, #0
 800a434:	601a      	str	r2, [r3, #0]
		coi=0;
 800a436:	4b1f      	ldr	r3, [pc, #124]	; (800a4b4 <second_driv+0x5ac>)
 800a438:	2200      	movs	r2, #0
 800a43a:	801a      	strh	r2, [r3, #0]
		straight_flag = false;
 800a43c:	4b12      	ldr	r3, [pc, #72]	; (800a488 <second_driv+0x580>)
 800a43e:	2200      	movs	r2, #0
 800a440:	701a      	strb	r2, [r3, #0]
		correc_maker = false;
 800a442:	4b14      	ldr	r3, [pc, #80]	; (800a494 <second_driv+0x58c>)
 800a444:	2200      	movs	r2, #0
 800a446:	701a      	strb	r2, [r3, #0]

	}

}
 800a448:	bf00      	nop
 800a44a:	3720      	adds	r7, #32
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bdb0      	pop	{r4, r5, r7, pc}
 800a450:	20000008 	.word	0x20000008
 800a454:	2000c0b8 	.word	0x2000c0b8
 800a458:	2000c270 	.word	0x2000c270
 800a45c:	20000210 	.word	0x20000210
 800a460:	20014332 	.word	0x20014332
 800a464:	20000208 	.word	0x20000208
 800a468:	2000c290 	.word	0x2000c290
 800a46c:	2000c2e8 	.word	0x2000c2e8
 800a470:	2000c278 	.word	0x2000c278
 800a474:	2000c2f8 	.word	0x2000c2f8
 800a478:	2000c2f0 	.word	0x2000c2f0
 800a47c:	20014610 	.word	0x20014610
 800a480:	2000c288 	.word	0x2000c288
 800a484:	2000c2d0 	.word	0x2000c2d0
 800a488:	2000020c 	.word	0x2000020c
 800a48c:	2000c294 	.word	0x2000c294
 800a490:	2000c276 	.word	0x2000c276
 800a494:	2000c0b0 	.word	0x2000c0b0
 800a498:	2000c298 	.word	0x2000c298
 800a49c:	2000c0c0 	.word	0x2000c0c0
 800a4a0:	40020000 	.word	0x40020000
 800a4a4:	20006160 	.word	0x20006160
 800a4a8:	2000c27c 	.word	0x2000c27c
 800a4ac:	2000c29c 	.word	0x2000c29c
 800a4b0:	2000c274 	.word	0x2000c274
 800a4b4:	2000c28c 	.word	0x2000c28c
 800a4b8:	2000c250 	.word	0x2000c250
 800a4bc:	20000004 	.word	0x20000004
 800a4c0:	2000c318 	.word	0x2000c318

0800a4c4 <log_play>:

void log_play(void){
 800a4c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4c8:	b096      	sub	sp, #88	; 0x58
 800a4ca:	af0a      	add	r7, sp, #40	; 0x28
	float Ca,Lo,SP,PLsp,PLca;
	float Lo_buff=0;
 800a4cc:	f04f 0300 	mov.w	r3, #0
 800a4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	int count=0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	62bb      	str	r3, [r7, #40]	; 0x28
	second_soeed=2;
 800a4d6:	4b4e      	ldr	r3, [pc, #312]	; (800a610 <log_play+0x14c>)
 800a4d8:	2202      	movs	r2, #2
 800a4da:	701a      	strb	r2, [r3, #0]
	log_Cal();
 800a4dc:	f7ff f98c 	bl	80097f8 <log_Cal>
	log_init ();
 800a4e0:	f7fe fd38 	bl	8008f54 <log_init>
	while(1){
		PLca =*(float*)actual__callog_adress;
 800a4e4:	4b4b      	ldr	r3, [pc, #300]	; (800a614 <log_play+0x150>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	627b      	str	r3, [r7, #36]	; 0x24
		PLsp =*(float*)actual__velo_adress;
 800a4ec:	4b4a      	ldr	r3, [pc, #296]	; (800a618 <log_play+0x154>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	623b      	str	r3, [r7, #32]
		SP =*(float*)plan_velo_adress;
 800a4f4:	4b49      	ldr	r3, [pc, #292]	; (800a61c <log_play+0x158>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	61fb      	str	r3, [r7, #28]
		Lo=*(float*)loadlog_adress-Lo_buff;
 800a4fc:	4b48      	ldr	r3, [pc, #288]	; (800a620 <log_play+0x15c>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	ed93 7a00 	vldr	s14, [r3]
 800a504:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a50c:	edc7 7a06 	vstr	s15, [r7, #24]
		Ca=*(float*)callog_adress;
 800a510:	4b44      	ldr	r3, [pc, #272]	; (800a624 <log_play+0x160>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	617b      	str	r3, [r7, #20]
		if(isnan(Ca) != 0)break;
 800a518:	ed97 7a05 	vldr	s14, [r7, #20]
 800a51c:	edd7 7a05 	vldr	s15, [r7, #20]
 800a520:	eeb4 7a67 	vcmp.f32	s14, s15
 800a524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a528:	d66b      	bvs.n	800a602 <log_play+0x13e>
		Lo_buff += Lo;
 800a52a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a52e:	edd7 7a06 	vldr	s15, [r7, #24]
 800a532:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a536:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		if(secondsp[count]<=1800)secondsp[count]=2000;
 800a53a:	4a3b      	ldr	r2, [pc, #236]	; (800a628 <log_play+0x164>)
 800a53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	4413      	add	r3, r2
 800a542:	edd3 7a00 	vldr	s15, [r3]
 800a546:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800a62c <log_play+0x168>
 800a54a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a552:	d805      	bhi.n	800a560 <log_play+0x9c>
 800a554:	4a34      	ldr	r2, [pc, #208]	; (800a628 <log_play+0x164>)
 800a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	4413      	add	r3, r2
 800a55c:	4a34      	ldr	r2, [pc, #208]	; (800a630 <log_play+0x16c>)
 800a55e:	601a      	str	r2, [r3, #0]
		printf("%lf,%lf,%lf,%lf,%lf,%lf\n\r",Lo,Ca,secondsp[count],SP,PLsp,PLca);
 800a560:	69b8      	ldr	r0, [r7, #24]
 800a562:	f7fd ff29 	bl	80083b8 <__aeabi_f2d>
 800a566:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800a56a:	6978      	ldr	r0, [r7, #20]
 800a56c:	f7fd ff24 	bl	80083b8 <__aeabi_f2d>
 800a570:	4604      	mov	r4, r0
 800a572:	460d      	mov	r5, r1
 800a574:	4a2c      	ldr	r2, [pc, #176]	; (800a628 <log_play+0x164>)
 800a576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4413      	add	r3, r2
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4618      	mov	r0, r3
 800a580:	f7fd ff1a 	bl	80083b8 <__aeabi_f2d>
 800a584:	4680      	mov	r8, r0
 800a586:	4689      	mov	r9, r1
 800a588:	69f8      	ldr	r0, [r7, #28]
 800a58a:	f7fd ff15 	bl	80083b8 <__aeabi_f2d>
 800a58e:	4682      	mov	sl, r0
 800a590:	468b      	mov	fp, r1
 800a592:	6a38      	ldr	r0, [r7, #32]
 800a594:	f7fd ff10 	bl	80083b8 <__aeabi_f2d>
 800a598:	e9c7 0100 	strd	r0, r1, [r7]
 800a59c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a59e:	f7fd ff0b 	bl	80083b8 <__aeabi_f2d>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a5aa:	ed97 7b00 	vldr	d7, [r7]
 800a5ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a5b2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800a5b6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a5ba:	e9cd 4500 	strd	r4, r5, [sp]
 800a5be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a5c2:	481c      	ldr	r0, [pc, #112]	; (800a634 <log_play+0x170>)
 800a5c4:	f009 fe72 	bl	80142ac <iprintf>
		count++;
 800a5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	62bb      	str	r3, [r7, #40]	; 0x28
		//HAL_Delay(1);
		callog_adress+= 0x04;
 800a5ce:	4b15      	ldr	r3, [pc, #84]	; (800a624 <log_play+0x160>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	3304      	adds	r3, #4
 800a5d4:	4a13      	ldr	r2, [pc, #76]	; (800a624 <log_play+0x160>)
 800a5d6:	6013      	str	r3, [r2, #0]
		loadlog_adress+= 0x04;
 800a5d8:	4b11      	ldr	r3, [pc, #68]	; (800a620 <log_play+0x15c>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	3304      	adds	r3, #4
 800a5de:	4a10      	ldr	r2, [pc, #64]	; (800a620 <log_play+0x15c>)
 800a5e0:	6013      	str	r3, [r2, #0]
		plan_velo_adress+= 0x04;
 800a5e2:	4b0e      	ldr	r3, [pc, #56]	; (800a61c <log_play+0x158>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	3304      	adds	r3, #4
 800a5e8:	4a0c      	ldr	r2, [pc, #48]	; (800a61c <log_play+0x158>)
 800a5ea:	6013      	str	r3, [r2, #0]
		actual__velo_adress+= 0x04;
 800a5ec:	4b0a      	ldr	r3, [pc, #40]	; (800a618 <log_play+0x154>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	4a09      	ldr	r2, [pc, #36]	; (800a618 <log_play+0x154>)
 800a5f4:	6013      	str	r3, [r2, #0]
		actual__callog_adress+= 0x04;
 800a5f6:	4b07      	ldr	r3, [pc, #28]	; (800a614 <log_play+0x150>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	3304      	adds	r3, #4
 800a5fc:	4a05      	ldr	r2, [pc, #20]	; (800a614 <log_play+0x150>)
 800a5fe:	6013      	str	r3, [r2, #0]
		PLca =*(float*)actual__callog_adress;
 800a600:	e770      	b.n	800a4e4 <log_play+0x20>
		if(isnan(Ca) != 0)break;
 800a602:	bf00      	nop
		//plan_velo_adress+= 0x04;
	}

}
 800a604:	bf00      	nop
 800a606:	3730      	adds	r7, #48	; 0x30
 800a608:	46bd      	mov	sp, r7
 800a60a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a60e:	bf00      	nop
 800a610:	2000c0bc 	.word	0x2000c0bc
 800a614:	2000c2e8 	.word	0x2000c2e8
 800a618:	2000c2f8 	.word	0x2000c2f8
 800a61c:	2000c2f0 	.word	0x2000c2f0
 800a620:	2000c2f4 	.word	0x2000c2f4
 800a624:	2000c2ec 	.word	0x2000c2ec
 800a628:	20000210 	.word	0x20000210
 800a62c:	44e10000 	.word	0x44e10000
 800a630:	44fa0000 	.word	0x44fa0000
 800a634:	08016408 	.word	0x08016408

0800a638 <FLASH_Unlock>:
const uint32_t end_adress_sector10 	 = 	0x80DFFFF;
const uint32_t start_adress_sector11 =  0x80E0000; //sentor11 start address
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;

inline static void FLASH_Unlock(void)
{
 800a638:	b480      	push	{r7}
 800a63a:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 800a63c:	4b05      	ldr	r3, [pc, #20]	; (800a654 <FLASH_Unlock+0x1c>)
 800a63e:	4a06      	ldr	r2, [pc, #24]	; (800a658 <FLASH_Unlock+0x20>)
 800a640:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800a642:	4b04      	ldr	r3, [pc, #16]	; (800a654 <FLASH_Unlock+0x1c>)
 800a644:	4a05      	ldr	r2, [pc, #20]	; (800a65c <FLASH_Unlock+0x24>)
 800a646:	605a      	str	r2, [r3, #4]
}
 800a648:	bf00      	nop
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	40023c00 	.word	0x40023c00
 800a658:	45670123 	.word	0x45670123
 800a65c:	cdef89ab 	.word	0xcdef89ab

0800a660 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 800a660:	b480      	push	{r7}
 800a662:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 800a664:	4b05      	ldr	r3, [pc, #20]	; (800a67c <FLASH_Lock+0x1c>)
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	4a04      	ldr	r2, [pc, #16]	; (800a67c <FLASH_Lock+0x1c>)
 800a66a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a66e:	6113      	str	r3, [r2, #16]

}
 800a670:	bf00      	nop
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	40023c00 	.word	0x40023c00

0800a680 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800a680:	b480      	push	{r7}
 800a682:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800a684:	bf00      	nop
 800a686:	4b05      	ldr	r3, [pc, #20]	; (800a69c <FLASH_WaitBusy+0x1c>)
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1f9      	bne.n	800a686 <FLASH_WaitBusy+0x6>
}
 800a692:	bf00      	nop
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr
 800a69c:	40023c00 	.word	0x40023c00

0800a6a0 <FLASH_Erease8>:

	FLASH_Lock();
}

void FLASH_Erease8(void)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	af00      	add	r7, sp, #0
	FLASH_Unlock();
 800a6a4:	f7ff ffc8 	bl	800a638 <FLASH_Unlock>

	FLASH_WaitBusy();
 800a6a8:	f7ff ffea 	bl	800a680 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_CR_SER;//SER Bitset
 800a6ac:	4b0b      	ldr	r3, [pc, #44]	; (800a6dc <FLASH_Erease8+0x3c>)
 800a6ae:	691b      	ldr	r3, [r3, #16]
 800a6b0:	4a0a      	ldr	r2, [pc, #40]	; (800a6dc <FLASH_Erease8+0x3c>)
 800a6b2:	f043 0302 	orr.w	r3, r3, #2
 800a6b6:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_SECTOR8 & FLASH_CR_SNB_Msk;//セクタ選択
 800a6b8:	4b08      	ldr	r3, [pc, #32]	; (800a6dc <FLASH_Erease8+0x3c>)
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	4a07      	ldr	r2, [pc, #28]	; (800a6dc <FLASH_Erease8+0x3c>)
 800a6be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6c2:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_STRT;//STRT Bitset
 800a6c4:	4b05      	ldr	r3, [pc, #20]	; (800a6dc <FLASH_Erease8+0x3c>)
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	4a04      	ldr	r2, [pc, #16]	; (800a6dc <FLASH_Erease8+0x3c>)
 800a6ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6ce:	6113      	str	r3, [r2, #16]

	FLASH_WaitBusy();
 800a6d0:	f7ff ffd6 	bl	800a680 <FLASH_WaitBusy>

	FLASH_Lock();
 800a6d4:	f7ff ffc4 	bl	800a660 <FLASH_Lock>
}
 800a6d8:	bf00      	nop
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	40023c00 	.word	0x40023c00

0800a6e0 <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b088      	sub	sp, #32
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 800a6ea:	f005 f93f 	bl	800f96c <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 800a6f2:	88fb      	ldrh	r3, [r7, #6]
 800a6f4:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 800a6fa:	2302      	movs	r3, #2
 800a6fc:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 800a6fe:	2300      	movs	r3, #0
 800a700:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 800a702:	f107 0208 	add.w	r2, r7, #8
 800a706:	f107 030c 	add.w	r3, r7, #12
 800a70a:	4611      	mov	r1, r2
 800a70c:	4618      	mov	r0, r3
 800a70e:	f005 fa8d 	bl	800fc2c <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 800a712:	f005 f94d 	bl	800f9b0 <HAL_FLASH_Lock>
}
 800a716:	bf00      	nop
 800a718:	3720      	adds	r7, #32
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
	...

0800a720 <FLASH_Write_Word_S>:

	FLASH_Lock();
}

void FLASH_Write_Word_S(uint32_t address, int32_t data)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800a72a:	f7ff ff85 	bl	800a638 <FLASH_Unlock>

	FLASH_WaitBusy();
 800a72e:	f7ff ffa7 	bl	800a680 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800a732:	4b0e      	ldr	r3, [pc, #56]	; (800a76c <FLASH_Write_Word_S+0x4c>)
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	4a0d      	ldr	r2, [pc, #52]	; (800a76c <FLASH_Write_Word_S+0x4c>)
 800a738:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a73c:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800a73e:	4b0b      	ldr	r3, [pc, #44]	; (800a76c <FLASH_Write_Word_S+0x4c>)
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	4a0a      	ldr	r2, [pc, #40]	; (800a76c <FLASH_Write_Word_S+0x4c>)
 800a744:	f043 0301 	orr.w	r3, r3, #1
 800a748:	6113      	str	r3, [r2, #16]

	*(__IO int32_t*)address = data;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	683a      	ldr	r2, [r7, #0]
 800a74e:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800a750:	f7ff ff96 	bl	800a680 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800a754:	4b05      	ldr	r3, [pc, #20]	; (800a76c <FLASH_Write_Word_S+0x4c>)
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	4a04      	ldr	r2, [pc, #16]	; (800a76c <FLASH_Write_Word_S+0x4c>)
 800a75a:	f023 0301 	bic.w	r3, r3, #1
 800a75e:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800a760:	f7ff ff7e 	bl	800a660 <FLASH_Lock>
}
 800a764:	bf00      	nop
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	40023c00 	.word	0x40023c00

0800a770 <FLASH_Write_Word_F>:

inline void FLASH_Write_Word_F(uint32_t address, float data)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 800a77c:	f7ff ff5c 	bl	800a638 <FLASH_Unlock>

	FLASH_WaitBusy();
 800a780:	f7ff ff7e 	bl	800a680 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800a784:	4b0e      	ldr	r3, [pc, #56]	; (800a7c0 <FLASH_Write_Word_F+0x50>)
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	4a0d      	ldr	r2, [pc, #52]	; (800a7c0 <FLASH_Write_Word_F+0x50>)
 800a78a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a78e:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800a790:	4b0b      	ldr	r3, [pc, #44]	; (800a7c0 <FLASH_Write_Word_F+0x50>)
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	4a0a      	ldr	r2, [pc, #40]	; (800a7c0 <FLASH_Write_Word_F+0x50>)
 800a796:	f043 0301 	orr.w	r3, r3, #1
 800a79a:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	683a      	ldr	r2, [r7, #0]
 800a7a0:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800a7a2:	f7ff ff6d 	bl	800a680 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800a7a6:	4b06      	ldr	r3, [pc, #24]	; (800a7c0 <FLASH_Write_Word_F+0x50>)
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	4a05      	ldr	r2, [pc, #20]	; (800a7c0 <FLASH_Write_Word_F+0x50>)
 800a7ac:	f023 0301 	bic.w	r3, r3, #1
 800a7b0:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800a7b2:	f7ff ff55 	bl	800a660 <FLASH_Lock>
}
 800a7b6:	bf00      	nop
 800a7b8:	3708      	adds	r7, #8
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	40023c00 	.word	0x40023c00

0800a7c4 <read_byte>:
#include "ICM_20648.h"

volatile int16_t	xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800a7ce:	79fb      	ldrb	r3, [r7, #7]
 800a7d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800a7d8:	2200      	movs	r2, #0
 800a7da:	2104      	movs	r1, #4
 800a7dc:	480d      	ldr	r0, [pc, #52]	; (800a814 <read_byte+0x50>)
 800a7de:	f005 fcf9 	bl	80101d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800a7e2:	f107 010f 	add.w	r1, r7, #15
 800a7e6:	2364      	movs	r3, #100	; 0x64
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	480b      	ldr	r0, [pc, #44]	; (800a818 <read_byte+0x54>)
 800a7ec:	f006 fdec 	bl	80113c8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 800a7f0:	f107 010e 	add.w	r1, r7, #14
 800a7f4:	2364      	movs	r3, #100	; 0x64
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	4807      	ldr	r0, [pc, #28]	; (800a818 <read_byte+0x54>)
 800a7fa:	f006 ff19 	bl	8011630 <HAL_SPI_Receive>
	CS_SET;
 800a7fe:	2201      	movs	r2, #1
 800a800:	2104      	movs	r1, #4
 800a802:	4804      	ldr	r0, [pc, #16]	; (800a814 <read_byte+0x50>)
 800a804:	f005 fce6 	bl	80101d4 <HAL_GPIO_WritePin>

	return val;
 800a808:	7bbb      	ldrb	r3, [r7, #14]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	40020c00 	.word	0x40020c00
 800a818:	200145b8 	.word	0x200145b8

0800a81c <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	4603      	mov	r3, r0
 800a824:	460a      	mov	r2, r1
 800a826:	71fb      	strb	r3, [r7, #7]
 800a828:	4613      	mov	r3, r2
 800a82a:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a832:	b2db      	uxtb	r3, r3
 800a834:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800a836:	2200      	movs	r2, #0
 800a838:	2104      	movs	r1, #4
 800a83a:	480c      	ldr	r0, [pc, #48]	; (800a86c <write_byte+0x50>)
 800a83c:	f005 fcca 	bl	80101d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800a840:	f107 010f 	add.w	r1, r7, #15
 800a844:	2364      	movs	r3, #100	; 0x64
 800a846:	2201      	movs	r2, #1
 800a848:	4809      	ldr	r0, [pc, #36]	; (800a870 <write_byte+0x54>)
 800a84a:	f006 fdbd 	bl	80113c8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800a84e:	1db9      	adds	r1, r7, #6
 800a850:	2364      	movs	r3, #100	; 0x64
 800a852:	2201      	movs	r2, #1
 800a854:	4806      	ldr	r0, [pc, #24]	; (800a870 <write_byte+0x54>)
 800a856:	f006 fdb7 	bl	80113c8 <HAL_SPI_Transmit>
	CS_SET;
 800a85a:	2201      	movs	r2, #1
 800a85c:	2104      	movs	r1, #4
 800a85e:	4803      	ldr	r0, [pc, #12]	; (800a86c <write_byte+0x50>)
 800a860:	f005 fcb8 	bl	80101d4 <HAL_GPIO_WritePin>
}
 800a864:	bf00      	nop
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	40020c00 	.word	0x40020c00
 800a870:	200145b8 	.word	0x200145b8

0800a874 <IMU_init>:

uint8_t IMU_init() {
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800a87a:	2000      	movs	r0, #0
 800a87c:	f7ff ffa2 	bl	800a7c4 <read_byte>
 800a880:	4603      	mov	r3, r0
 800a882:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 800a884:	79bb      	ldrb	r3, [r7, #6]
 800a886:	2be0      	cmp	r3, #224	; 0xe0
 800a888:	d119      	bne.n	800a8be <IMU_init+0x4a>
		ret = 1;
 800a88a:	2301      	movs	r3, #1
 800a88c:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800a88e:	2101      	movs	r1, #1
 800a890:	2006      	movs	r0, #6
 800a892:	f7ff ffc3 	bl	800a81c <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800a896:	2110      	movs	r1, #16
 800a898:	2003      	movs	r0, #3
 800a89a:	f7ff ffbf 	bl	800a81c <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800a89e:	2120      	movs	r1, #32
 800a8a0:	207f      	movs	r0, #127	; 0x7f
 800a8a2:	f7ff ffbb 	bl	800a81c <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 800a8a6:	2117      	movs	r1, #23
 800a8a8:	2001      	movs	r0, #1
 800a8aa:	f7ff ffb7 	bl	800a81c <write_byte>

		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//	レンジ±16g
 800a8ae:	2106      	movs	r1, #6
 800a8b0:	2014      	movs	r0, #20
 800a8b2:	f7ff ffb3 	bl	800a81c <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	207f      	movs	r0, #127	; 0x7f
 800a8ba:	f7ff ffaf 	bl	800a81c <write_byte>
	}
	return ret;
 800a8be:	79fb      	ldrb	r3, [r7, #7]
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3708      	adds	r7, #8
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <read_gyro_data>:

void read_zg_data() {
	zg = ((int16_t)read_byte(0x37) << 8) | ((int16_t)read_byte(0x38));
}

void read_gyro_data() {
 800a8c8:	b598      	push	{r3, r4, r7, lr}
 800a8ca:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 800a8cc:	2033      	movs	r0, #51	; 0x33
 800a8ce:	f7ff ff79 	bl	800a7c4 <read_byte>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	021b      	lsls	r3, r3, #8
 800a8d6:	b21c      	sxth	r4, r3
 800a8d8:	2034      	movs	r0, #52	; 0x34
 800a8da:	f7ff ff73 	bl	800a7c4 <read_byte>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	b21b      	sxth	r3, r3
 800a8e2:	4323      	orrs	r3, r4
 800a8e4:	b21a      	sxth	r2, r3
 800a8e6:	4b11      	ldr	r3, [pc, #68]	; (800a92c <read_gyro_data+0x64>)
 800a8e8:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 800a8ea:	2035      	movs	r0, #53	; 0x35
 800a8ec:	f7ff ff6a 	bl	800a7c4 <read_byte>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	021b      	lsls	r3, r3, #8
 800a8f4:	b21c      	sxth	r4, r3
 800a8f6:	2036      	movs	r0, #54	; 0x36
 800a8f8:	f7ff ff64 	bl	800a7c4 <read_byte>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	b21b      	sxth	r3, r3
 800a900:	4323      	orrs	r3, r4
 800a902:	b21a      	sxth	r2, r3
 800a904:	4b0a      	ldr	r3, [pc, #40]	; (800a930 <read_gyro_data+0x68>)
 800a906:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 800a908:	2037      	movs	r0, #55	; 0x37
 800a90a:	f7ff ff5b 	bl	800a7c4 <read_byte>
 800a90e:	4603      	mov	r3, r0
 800a910:	021b      	lsls	r3, r3, #8
 800a912:	b21c      	sxth	r4, r3
 800a914:	2038      	movs	r0, #56	; 0x38
 800a916:	f7ff ff55 	bl	800a7c4 <read_byte>
 800a91a:	4603      	mov	r3, r0
 800a91c:	b21b      	sxth	r3, r3
 800a91e:	4323      	orrs	r3, r4
 800a920:	b21a      	sxth	r2, r3
 800a922:	4b04      	ldr	r3, [pc, #16]	; (800a934 <read_gyro_data+0x6c>)
 800a924:	801a      	strh	r2, [r3, #0]
}
 800a926:	bf00      	nop
 800a928:	bd98      	pop	{r3, r4, r7, pc}
 800a92a:	bf00      	nop
 800a92c:	2000c308 	.word	0x2000c308
 800a930:	2000c306 	.word	0x2000c306
 800a934:	2000c300 	.word	0x2000c300

0800a938 <off_angle>:
extern  uint16_t work_ram[BACKUP_FLASH_SECTOR_SIZE] __attribute__ ((aligned(4)));
 char _backup_flash_start;
float ang_average=0;

 float ang;
void off_angle(){
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
	float average;
	int i;
	Flash_load();
 800a93e:	f001 fa79 	bl	800be34 <Flash_load>
	IMU_init();
 800a942:	f7ff ff97 	bl	800a874 <IMU_init>
	//HAL_Delay(1500);

	for(i=0;i<=1000;i++){
 800a946:	2300      	movs	r3, #0
 800a948:	603b      	str	r3, [r7, #0]
 800a94a:	e014      	b.n	800a976 <off_angle+0x3e>
		read_gyro_data();
 800a94c:	f7ff ffbc 	bl	800a8c8 <read_gyro_data>
		average = average+zg;
 800a950:	4b21      	ldr	r3, [pc, #132]	; (800a9d8 <off_angle+0xa0>)
 800a952:	881b      	ldrh	r3, [r3, #0]
 800a954:	b21b      	sxth	r3, r3
 800a956:	ee07 3a90 	vmov	s15, r3
 800a95a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a95e:	ed97 7a01 	vldr	s14, [r7, #4]
 800a962:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a966:	edc7 7a01 	vstr	s15, [r7, #4]
		HAL_Delay(1);
 800a96a:	2001      	movs	r0, #1
 800a96c:	f003 fefc 	bl	800e768 <HAL_Delay>
	for(i=0;i<=1000;i++){
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	3301      	adds	r3, #1
 800a974:	603b      	str	r3, [r7, #0]
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a97c:	dde6      	ble.n	800a94c <off_angle+0x14>
	}
	LED(4);
 800a97e:	2004      	movs	r0, #4
 800a980:	f001 fb94 	bl	800c0ac <LED>
	ang_average = average/1000;
 800a984:	ed97 7a01 	vldr	s14, [r7, #4]
 800a988:	eddf 6a14 	vldr	s13, [pc, #80]	; 800a9dc <off_angle+0xa4>
 800a98c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a990:	4b13      	ldr	r3, [pc, #76]	; (800a9e0 <off_angle+0xa8>)
 800a992:	edc3 7a00 	vstr	s15, [r3]
	if(average<=0) average = -average*100;
 800a996:	edd7 7a01 	vldr	s15, [r7, #4]
 800a99a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9a2:	d809      	bhi.n	800a9b8 <off_angle+0x80>
 800a9a4:	edd7 7a01 	vldr	s15, [r7, #4]
 800a9a8:	eef1 7a67 	vneg.f32	s15, s15
 800a9ac:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800a9e4 <off_angle+0xac>
 800a9b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a9b4:	edc7 7a01 	vstr	s15, [r7, #4]
	work_ram[30]= average;
 800a9b8:	edd7 7a01 	vldr	s15, [r7, #4]
 800a9bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9c0:	ee17 3a90 	vmov	r3, s15
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	4b08      	ldr	r3, [pc, #32]	; (800a9e8 <off_angle+0xb0>)
 800a9c8:	879a      	strh	r2, [r3, #60]	; 0x3c
	//if(average>=50) average=-average/10;


//	printf("%f\r\n",ang_average);
//	printf("%d\r\n",work_ram[30]);
	Flash_store();
 800a9ca:	f001 fa43 	bl	800be54 <Flash_store>
}
 800a9ce:	bf00      	nop
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	2000c300 	.word	0x2000c300
 800a9dc:	447a0000 	.word	0x447a0000
 800a9e0:	2000c2a0 	.word	0x2000c2a0
 800a9e4:	42c80000 	.word	0x42c80000
 800a9e8:	2000c318 	.word	0x2000c318
 800a9ec:	00000000 	.word	0x00000000

0800a9f0 <calc_angle>:
inline float calc_angle(){
 800a9f0:	b5b0      	push	{r4, r5, r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
	float omega_z=0;
 800a9f6:	f04f 0300 	mov.w	r3, #0
 800a9fa:	607b      	str	r3, [r7, #4]
	static float pre_zg;
	float R_IMU2 = 0.1;
 800a9fc:	4b32      	ldr	r3, [pc, #200]	; (800aac8 <calc_angle+0xd8>)
 800a9fe:	603b      	str	r3, [r7, #0]
	//float angle;
	read_gyro_data();
 800aa00:	f7ff ff62 	bl	800a8c8 <read_gyro_data>
	omega_z = (((float)zg-ang_average) / 16.4) * PI / 180;
 800aa04:	4b31      	ldr	r3, [pc, #196]	; (800aacc <calc_angle+0xdc>)
 800aa06:	881b      	ldrh	r3, [r3, #0]
 800aa08:	b21b      	sxth	r3, r3
 800aa0a:	ee07 3a90 	vmov	s15, r3
 800aa0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa12:	4b2f      	ldr	r3, [pc, #188]	; (800aad0 <calc_angle+0xe0>)
 800aa14:	edd3 7a00 	vldr	s15, [r3]
 800aa18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa1c:	ee17 0a90 	vmov	r0, s15
 800aa20:	f7fd fcca 	bl	80083b8 <__aeabi_f2d>
 800aa24:	a324      	add	r3, pc, #144	; (adr r3, 800aab8 <calc_angle+0xc8>)
 800aa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2a:	f7fd fe47 	bl	80086bc <__aeabi_ddiv>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	460c      	mov	r4, r1
 800aa32:	4618      	mov	r0, r3
 800aa34:	4621      	mov	r1, r4
 800aa36:	a322      	add	r3, pc, #136	; (adr r3, 800aac0 <calc_angle+0xd0>)
 800aa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3c:	f7fd fd14 	bl	8008468 <__aeabi_dmul>
 800aa40:	4603      	mov	r3, r0
 800aa42:	460c      	mov	r4, r1
 800aa44:	4618      	mov	r0, r3
 800aa46:	4621      	mov	r1, r4
 800aa48:	f04f 0200 	mov.w	r2, #0
 800aa4c:	4b21      	ldr	r3, [pc, #132]	; (800aad4 <calc_angle+0xe4>)
 800aa4e:	f7fd fe35 	bl	80086bc <__aeabi_ddiv>
 800aa52:	4603      	mov	r3, r0
 800aa54:	460c      	mov	r4, r1
 800aa56:	4618      	mov	r0, r3
 800aa58:	4621      	mov	r1, r4
 800aa5a:	f7fd ffdd 	bl	8008a18 <__aeabi_d2f>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	607b      	str	r3, [r7, #4]
	//angle = angle+ (omega_z * 0.01);
	//if(driv_flag==2)omega_z= ((R_IMU2)*(omega_z) + (1.0 - (R_IMU2))* (pre_zg));
	omega_z= ((R_IMU)*(omega_z) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f7fd fca8 	bl	80083b8 <__aeabi_f2d>
 800aa68:	4604      	mov	r4, r0
 800aa6a:	460d      	mov	r5, r1
 800aa6c:	4b1a      	ldr	r3, [pc, #104]	; (800aad8 <calc_angle+0xe8>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fd fca1 	bl	80083b8 <__aeabi_f2d>
 800aa76:	f04f 0200 	mov.w	r2, #0
 800aa7a:	f04f 0300 	mov.w	r3, #0
 800aa7e:	f7fd fcf3 	bl	8008468 <__aeabi_dmul>
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	4620      	mov	r0, r4
 800aa88:	4629      	mov	r1, r5
 800aa8a:	f7fd fb37 	bl	80080fc <__adddf3>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	460c      	mov	r4, r1
 800aa92:	4618      	mov	r0, r3
 800aa94:	4621      	mov	r1, r4
 800aa96:	f7fd ffbf 	bl	8008a18 <__aeabi_d2f>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	607b      	str	r3, [r7, #4]
	pre_zg =  omega_z;
 800aa9e:	4a0e      	ldr	r2, [pc, #56]	; (800aad8 <calc_angle+0xe8>)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6013      	str	r3, [r2, #0]

	return omega_z;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	ee07 3a90 	vmov	s15, r3
}
 800aaaa:	eeb0 0a67 	vmov.f32	s0, s15
 800aaae:	3708      	adds	r7, #8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bdb0      	pop	{r4, r5, r7, pc}
 800aab4:	f3af 8000 	nop.w
 800aab8:	66666666 	.word	0x66666666
 800aabc:	40306666 	.word	0x40306666
 800aac0:	fc8b007a 	.word	0xfc8b007a
 800aac4:	400921fa 	.word	0x400921fa
 800aac8:	3dcccccd 	.word	0x3dcccccd
 800aacc:	2000c300 	.word	0x2000c300
 800aad0:	2000c2a0 	.word	0x2000c2a0
 800aad4:	40668000 	.word	0x40668000
 800aad8:	2000c2a4 	.word	0x2000c2a4
 800aadc:	00000000 	.word	0x00000000

0800aae0 <Line_Motor>:
uint16_t  Ki;
uint16_t  Kd ;
extern float speedget ;

//float speedval_I=0 ;
inline float Line_Motor(){
 800aae0:	b5b0      	push	{r4, r5, r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
	static float sensvalBuf;
	static float sensval_I = 0;
	static float sensval_IBuf ;
	float sensval_D =0;
 800aae6:	f04f 0300 	mov.w	r3, #0
 800aaea:	607b      	str	r3, [r7, #4]
	float sensval;//偏差


	sensval = senseGet();//hensa
 800aaec:	f002 ff1c 	bl	800d928 <senseGet>
 800aaf0:	ed87 0a00 	vstr	s0, [r7]

    sensval_I = sensval_I + (float)sensval*T;
 800aaf4:	4b60      	ldr	r3, [pc, #384]	; (800ac78 <Line_Motor+0x198>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fd fc5d 	bl	80083b8 <__aeabi_f2d>
 800aafe:	4604      	mov	r4, r0
 800ab00:	460d      	mov	r5, r1
 800ab02:	6838      	ldr	r0, [r7, #0]
 800ab04:	f7fd fc58 	bl	80083b8 <__aeabi_f2d>
 800ab08:	a357      	add	r3, pc, #348	; (adr r3, 800ac68 <Line_Motor+0x188>)
 800ab0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0e:	f7fd fcab 	bl	8008468 <__aeabi_dmul>
 800ab12:	4602      	mov	r2, r0
 800ab14:	460b      	mov	r3, r1
 800ab16:	4620      	mov	r0, r4
 800ab18:	4629      	mov	r1, r5
 800ab1a:	f7fd faef 	bl	80080fc <__adddf3>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	460c      	mov	r4, r1
 800ab22:	4618      	mov	r0, r3
 800ab24:	4621      	mov	r1, r4
 800ab26:	f7fd ff77 	bl	8008a18 <__aeabi_d2f>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	4b52      	ldr	r3, [pc, #328]	; (800ac78 <Line_Motor+0x198>)
 800ab2e:	601a      	str	r2, [r3, #0]
    sensval_IBuf = sensval_IBuf + sensval;
 800ab30:	4b52      	ldr	r3, [pc, #328]	; (800ac7c <Line_Motor+0x19c>)
 800ab32:	ed93 7a00 	vldr	s14, [r3]
 800ab36:	edd7 7a00 	vldr	s15, [r7]
 800ab3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab3e:	4b4f      	ldr	r3, [pc, #316]	; (800ac7c <Line_Motor+0x19c>)
 800ab40:	edc3 7a00 	vstr	s15, [r3]

    if(sensval_I >= 1000000) sensval_I = 1000000;
 800ab44:	4b4c      	ldr	r3, [pc, #304]	; (800ac78 <Line_Motor+0x198>)
 800ab46:	edd3 7a00 	vldr	s15, [r3]
 800ab4a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800ac80 <Line_Motor+0x1a0>
 800ab4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab56:	db02      	blt.n	800ab5e <Line_Motor+0x7e>
 800ab58:	4b47      	ldr	r3, [pc, #284]	; (800ac78 <Line_Motor+0x198>)
 800ab5a:	4a4a      	ldr	r2, [pc, #296]	; (800ac84 <Line_Motor+0x1a4>)
 800ab5c:	601a      	str	r2, [r3, #0]
    if(sensval_I <= (-1000000)) sensval_I = (-1000000);
 800ab5e:	4b46      	ldr	r3, [pc, #280]	; (800ac78 <Line_Motor+0x198>)
 800ab60:	edd3 7a00 	vldr	s15, [r3]
 800ab64:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800ac88 <Line_Motor+0x1a8>
 800ab68:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab70:	d802      	bhi.n	800ab78 <Line_Motor+0x98>
 800ab72:	4b41      	ldr	r3, [pc, #260]	; (800ac78 <Line_Motor+0x198>)
 800ab74:	4a45      	ldr	r2, [pc, #276]	; (800ac8c <Line_Motor+0x1ac>)
 800ab76:	601a      	str	r2, [r3, #0]

    sensval_D = (sensvalBuf - sensval)/T;
 800ab78:	4b45      	ldr	r3, [pc, #276]	; (800ac90 <Line_Motor+0x1b0>)
 800ab7a:	ed93 7a00 	vldr	s14, [r3]
 800ab7e:	edd7 7a00 	vldr	s15, [r7]
 800ab82:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab86:	ee17 0a90 	vmov	r0, s15
 800ab8a:	f7fd fc15 	bl	80083b8 <__aeabi_f2d>
 800ab8e:	a336      	add	r3, pc, #216	; (adr r3, 800ac68 <Line_Motor+0x188>)
 800ab90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab94:	f7fd fd92 	bl	80086bc <__aeabi_ddiv>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	4621      	mov	r1, r4
 800aba0:	f7fd ff3a 	bl	8008a18 <__aeabi_d2f>
 800aba4:	4603      	mov	r3, r0
 800aba6:	607b      	str	r3, [r7, #4]
    sensvalBuf = sensval;
 800aba8:	4a39      	ldr	r2, [pc, #228]	; (800ac90 <Line_Motor+0x1b0>)
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	6013      	str	r3, [r2, #0]

	return ((sensval* (float)Kp*0.001)+(sensval_I*(float)Ki*0.0001)-(sensval_D*(float)Kd*0.0001));
 800abae:	4b39      	ldr	r3, [pc, #228]	; (800ac94 <Line_Motor+0x1b4>)
 800abb0:	881b      	ldrh	r3, [r3, #0]
 800abb2:	ee07 3a90 	vmov	s15, r3
 800abb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800abba:	edd7 7a00 	vldr	s15, [r7]
 800abbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abc2:	ee17 0a90 	vmov	r0, s15
 800abc6:	f7fd fbf7 	bl	80083b8 <__aeabi_f2d>
 800abca:	a327      	add	r3, pc, #156	; (adr r3, 800ac68 <Line_Motor+0x188>)
 800abcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd0:	f7fd fc4a 	bl	8008468 <__aeabi_dmul>
 800abd4:	4603      	mov	r3, r0
 800abd6:	460c      	mov	r4, r1
 800abd8:	4625      	mov	r5, r4
 800abda:	461c      	mov	r4, r3
 800abdc:	4b2e      	ldr	r3, [pc, #184]	; (800ac98 <Line_Motor+0x1b8>)
 800abde:	881b      	ldrh	r3, [r3, #0]
 800abe0:	ee07 3a90 	vmov	s15, r3
 800abe4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800abe8:	4b23      	ldr	r3, [pc, #140]	; (800ac78 <Line_Motor+0x198>)
 800abea:	edd3 7a00 	vldr	s15, [r3]
 800abee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf2:	ee17 0a90 	vmov	r0, s15
 800abf6:	f7fd fbdf 	bl	80083b8 <__aeabi_f2d>
 800abfa:	a31d      	add	r3, pc, #116	; (adr r3, 800ac70 <Line_Motor+0x190>)
 800abfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac00:	f7fd fc32 	bl	8008468 <__aeabi_dmul>
 800ac04:	4602      	mov	r2, r0
 800ac06:	460b      	mov	r3, r1
 800ac08:	4620      	mov	r0, r4
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	f7fd fa76 	bl	80080fc <__adddf3>
 800ac10:	4603      	mov	r3, r0
 800ac12:	460c      	mov	r4, r1
 800ac14:	4625      	mov	r5, r4
 800ac16:	461c      	mov	r4, r3
 800ac18:	4b20      	ldr	r3, [pc, #128]	; (800ac9c <Line_Motor+0x1bc>)
 800ac1a:	881b      	ldrh	r3, [r3, #0]
 800ac1c:	ee07 3a90 	vmov	s15, r3
 800ac20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac24:	edd7 7a01 	vldr	s15, [r7, #4]
 800ac28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac2c:	ee17 0a90 	vmov	r0, s15
 800ac30:	f7fd fbc2 	bl	80083b8 <__aeabi_f2d>
 800ac34:	a30e      	add	r3, pc, #56	; (adr r3, 800ac70 <Line_Motor+0x190>)
 800ac36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3a:	f7fd fc15 	bl	8008468 <__aeabi_dmul>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	460b      	mov	r3, r1
 800ac42:	4620      	mov	r0, r4
 800ac44:	4629      	mov	r1, r5
 800ac46:	f7fd fa57 	bl	80080f8 <__aeabi_dsub>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	460c      	mov	r4, r1
 800ac4e:	4618      	mov	r0, r3
 800ac50:	4621      	mov	r1, r4
 800ac52:	f7fd fee1 	bl	8008a18 <__aeabi_d2f>
 800ac56:	4603      	mov	r3, r0
 800ac58:	ee07 3a90 	vmov	s15, r3


}
 800ac5c:	eeb0 0a67 	vmov.f32	s0, s15
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bdb0      	pop	{r4, r5, r7, pc}
 800ac66:	bf00      	nop
 800ac68:	d2f1a9fc 	.word	0xd2f1a9fc
 800ac6c:	3f50624d 	.word	0x3f50624d
 800ac70:	eb1c432d 	.word	0xeb1c432d
 800ac74:	3f1a36e2 	.word	0x3f1a36e2
 800ac78:	2000c2a8 	.word	0x2000c2a8
 800ac7c:	2000c2ac 	.word	0x2000c2ac
 800ac80:	49742400 	.word	0x49742400
 800ac84:	49742400 	.word	0x49742400
 800ac88:	c9742400 	.word	0xc9742400
 800ac8c:	c9742400 	.word	0xc9742400
 800ac90:	2000c2b0 	.word	0x2000c2b0
 800ac94:	2000c310 	.word	0x2000c310
 800ac98:	2000c30c 	.word	0x2000c30c
 800ac9c:	2000c30e 	.word	0x2000c30e

0800aca0 <speed_get>:
inline float speed_get(){
 800aca0:	b590      	push	{r4, r7, lr}
 800aca2:	b089      	sub	sp, #36	; 0x24
 800aca4:	af00      	add	r7, sp, #0
	//static float speedbuffg=0;
	float speedget_L=0;
 800aca6:	f04f 0300 	mov.w	r3, #0
 800acaa:	61fb      	str	r3, [r7, #28]
	float speedget_R=0;
 800acac:	f04f 0300 	mov.w	r3, #0
 800acb0:	61bb      	str	r3, [r7, #24]
	float load_L,load_R=0;
 800acb2:	f04f 0300 	mov.w	r3, #0
 800acb6:	617b      	str	r3, [r7, #20]
	static float val=0;
	float load=0;
 800acb8:	f04f 0300 	mov.w	r3, #0
 800acbc:	613b      	str	r3, [r7, #16]
	int L=0;
 800acbe:	2300      	movs	r3, #0
 800acc0:	60fb      	str	r3, [r7, #12]
	int R=0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	60bb      	str	r3, [r7, #8]
//	static int i =0;
	L = TIM3 -> CNT -32768;
 800acc6:	4b52      	ldr	r3, [pc, #328]	; (800ae10 <speed_get+0x170>)
 800acc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acca:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800acce:	60fb      	str	r3, [r7, #12]
	TIM3 -> CNT = 32768;
 800acd0:	4b4f      	ldr	r3, [pc, #316]	; (800ae10 <speed_get+0x170>)
 800acd2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800acd6:	625a      	str	r2, [r3, #36]	; 0x24

	R = TIM4 -> CNT -32768;;
 800acd8:	4b4e      	ldr	r3, [pc, #312]	; (800ae14 <speed_get+0x174>)
 800acda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acdc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800ace0:	60bb      	str	r3, [r7, #8]
	TIM4 -> CNT = 32768;
 800ace2:	4b4c      	ldr	r3, [pc, #304]	; (800ae14 <speed_get+0x174>)
 800ace4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ace8:	625a      	str	r2, [r3, #36]	; 0x24
//	speedget_R = (((24.1/4096)*(float)R)/T);
//	speedget_L = (((24.1/4096)*(float)L)/T);
//	speedget_R = (((24.1/4096)*(float)R)/T);
//	speedget_L = (((23/4096)*(float)L)/T);
//	speedget_R = (((23/4096)*(float)R)/T);
	load_L = (25.3/2048)*(float)L;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	ee07 3a90 	vmov	s15, r3
 800acf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800acf4:	ee17 0a90 	vmov	r0, s15
 800acf8:	f7fd fb5e 	bl	80083b8 <__aeabi_f2d>
 800acfc:	a340      	add	r3, pc, #256	; (adr r3, 800ae00 <speed_get+0x160>)
 800acfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad02:	f7fd fbb1 	bl	8008468 <__aeabi_dmul>
 800ad06:	4603      	mov	r3, r0
 800ad08:	460c      	mov	r4, r1
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	4621      	mov	r1, r4
 800ad0e:	f7fd fe83 	bl	8008a18 <__aeabi_d2f>
 800ad12:	4603      	mov	r3, r0
 800ad14:	607b      	str	r3, [r7, #4]
	load_R = (25.3/2048)*(float)R;
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	ee07 3a90 	vmov	s15, r3
 800ad1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad20:	ee17 0a90 	vmov	r0, s15
 800ad24:	f7fd fb48 	bl	80083b8 <__aeabi_f2d>
 800ad28:	a335      	add	r3, pc, #212	; (adr r3, 800ae00 <speed_get+0x160>)
 800ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2e:	f7fd fb9b 	bl	8008468 <__aeabi_dmul>
 800ad32:	4603      	mov	r3, r0
 800ad34:	460c      	mov	r4, r1
 800ad36:	4618      	mov	r0, r3
 800ad38:	4621      	mov	r1, r4
 800ad3a:	f7fd fe6d 	bl	8008a18 <__aeabi_d2f>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	617b      	str	r3, [r7, #20]
	speedget_L = load_L/T;
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7fd fb38 	bl	80083b8 <__aeabi_f2d>
 800ad48:	a32f      	add	r3, pc, #188	; (adr r3, 800ae08 <speed_get+0x168>)
 800ad4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4e:	f7fd fcb5 	bl	80086bc <__aeabi_ddiv>
 800ad52:	4603      	mov	r3, r0
 800ad54:	460c      	mov	r4, r1
 800ad56:	4618      	mov	r0, r3
 800ad58:	4621      	mov	r1, r4
 800ad5a:	f7fd fe5d 	bl	8008a18 <__aeabi_d2f>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	61fb      	str	r3, [r7, #28]
	speedget_R = load_R/T;
 800ad62:	6978      	ldr	r0, [r7, #20]
 800ad64:	f7fd fb28 	bl	80083b8 <__aeabi_f2d>
 800ad68:	a327      	add	r3, pc, #156	; (adr r3, 800ae08 <speed_get+0x168>)
 800ad6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6e:	f7fd fca5 	bl	80086bc <__aeabi_ddiv>
 800ad72:	4603      	mov	r3, r0
 800ad74:	460c      	mov	r4, r1
 800ad76:	4618      	mov	r0, r3
 800ad78:	4621      	mov	r1, r4
 800ad7a:	f7fd fe4d 	bl	8008a18 <__aeabi_d2f>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	61bb      	str	r3, [r7, #24]
//	if(load_L <= 0) load_L=0;
//	if(load_R <= 0) load_R=0;
	load = (load_R+load_L)/2.0f;
 800ad82:	ed97 7a05 	vldr	s14, [r7, #20]
 800ad86:	edd7 7a01 	vldr	s15, [r7, #4]
 800ad8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad8e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ad92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ad96:	edc7 7a04 	vstr	s15, [r7, #16]
	//load = (((24.1/4096)*(float)L)+((24.1/4096)*(float)R))/2;
	speedget = (speedget_R+speedget_L)/2;
 800ad9a:	ed97 7a06 	vldr	s14, [r7, #24]
 800ad9e:	edd7 7a07 	vldr	s15, [r7, #28]
 800ada2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ada6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800adaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800adae:	4b1a      	ldr	r3, [pc, #104]	; (800ae18 <speed_get+0x178>)
 800adb0:	edc3 7a00 	vstr	s15, [r3]
	//speedbuffg += speedget*T;
	if(driv_flag==1&& maker_flag==1){
 800adb4:	4b19      	ldr	r3, [pc, #100]	; (800ae1c <speed_get+0x17c>)
 800adb6:	881b      	ldrh	r3, [r3, #0]
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d109      	bne.n	800add0 <speed_get+0x130>
 800adbc:	4b18      	ldr	r3, [pc, #96]	; (800ae20 <speed_get+0x180>)
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d105      	bne.n	800add0 <speed_get+0x130>

		first_driv(load);
 800adc4:	ed97 0a04 	vldr	s0, [r7, #16]
 800adc8:	f7fe fa84 	bl	80092d4 <first_driv>
		first_cale();
 800adcc:	f7fe f948 	bl	8009060 <first_cale>
	}
	if(driv_flag==2 && maker_flag==1)second_driv(load);
 800add0:	4b12      	ldr	r3, [pc, #72]	; (800ae1c <speed_get+0x17c>)
 800add2:	881b      	ldrh	r3, [r3, #0]
 800add4:	2b02      	cmp	r3, #2
 800add6:	d107      	bne.n	800ade8 <speed_get+0x148>
 800add8:	4b11      	ldr	r3, [pc, #68]	; (800ae20 <speed_get+0x180>)
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d103      	bne.n	800ade8 <speed_get+0x148>
 800ade0:	ed97 0a04 	vldr	s0, [r7, #16]
 800ade4:	f7ff f890 	bl	8009f08 <second_driv>

	return speedget;
 800ade8:	4b0b      	ldr	r3, [pc, #44]	; (800ae18 <speed_get+0x178>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	ee07 3a90 	vmov	s15, r3
}
 800adf0:	eeb0 0a67 	vmov.f32	s0, s15
 800adf4:	3724      	adds	r7, #36	; 0x24
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd90      	pop	{r4, r7, pc}
 800adfa:	bf00      	nop
 800adfc:	f3af 8000 	nop.w
 800ae00:	cccccccd 	.word	0xcccccccd
 800ae04:	3f894ccc 	.word	0x3f894ccc
 800ae08:	d2f1a9fc 	.word	0xd2f1a9fc
 800ae0c:	3f50624d 	.word	0x3f50624d
 800ae10:	40000400 	.word	0x40000400
 800ae14:	40000800 	.word	0x40000800
 800ae18:	20014610 	.word	0x20014610
 800ae1c:	2000c2c0 	.word	0x2000c2c0
 800ae20:	2000c2bc 	.word	0x2000c2bc
 800ae24:	00000000 	.word	0x00000000

0800ae28 <Speed_Motor>:
inline void Speed_Motor(){
 800ae28:	b5b0      	push	{r4, r5, r7, lr}
 800ae2a:	ed2d 8b02 	vpush	{d8}
 800ae2e:	b088      	sub	sp, #32
 800ae30:	af00      	add	r7, sp, #0
	int16_t MotorL=0,MotorR=0;
 800ae32:	2300      	movs	r3, #0
 800ae34:	83fb      	strh	r3, [r7, #30]
 800ae36:	2300      	movs	r3, #0
 800ae38:	83bb      	strh	r3, [r7, #28]

	float speedval;
	float val_v = 0;
 800ae3a:	f04f 0300 	mov.w	r3, #0
 800ae3e:	61bb      	str	r3, [r7, #24]
	float val_k=0;
 800ae40:	f04f 0300 	mov.w	r3, #0
 800ae44:	617b      	str	r3, [r7, #20]
	float se=0;
 800ae46:	f04f 0300 	mov.w	r3, #0
 800ae4a:	613b      	str	r3, [r7, #16]
	static float speedval_I=0 ;
	static float speed_buff=0;
	float val= 0;
 800ae4c:	f04f 0300 	mov.w	r3, #0
 800ae50:	60fb      	str	r3, [r7, #12]
	float sKp = 2.5;//1.8
 800ae52:	4bcd      	ldr	r3, [pc, #820]	; (800b188 <Speed_Motor+0x360>)
 800ae54:	60bb      	str	r3, [r7, #8]
	float sKi= 28;//20
 800ae56:	4bcd      	ldr	r3, [pc, #820]	; (800b18c <Speed_Motor+0x364>)
 800ae58:	607b      	str	r3, [r7, #4]
	//float lKi= 20;

	speedval = (float)Average_speed - speed_get();
 800ae5a:	4bcd      	ldr	r3, [pc, #820]	; (800b190 <Speed_Motor+0x368>)
 800ae5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae60:	ee07 3a90 	vmov	s15, r3
 800ae64:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800ae68:	f7ff ff1a 	bl	800aca0 <speed_get>
 800ae6c:	eef0 7a40 	vmov.f32	s15, s0
 800ae70:	ee78 7a67 	vsub.f32	s15, s16, s15
 800ae74:	edc7 7a00 	vstr	s15, [r7]
//	speedval = 0- speed_get();

	if(speed_buff != Average_speed && speed_buff > Average_speed && speedval_I > 0)speedval_I=0;
 800ae78:	4bc5      	ldr	r3, [pc, #788]	; (800b190 <Speed_Motor+0x368>)
 800ae7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae7e:	ee07 3a90 	vmov	s15, r3
 800ae82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ae86:	4bc3      	ldr	r3, [pc, #780]	; (800b194 <Speed_Motor+0x36c>)
 800ae88:	edd3 7a00 	vldr	s15, [r3]
 800ae8c:	eeb4 7a67 	vcmp.f32	s14, s15
 800ae90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae94:	d01a      	beq.n	800aecc <Speed_Motor+0xa4>
 800ae96:	4bbe      	ldr	r3, [pc, #760]	; (800b190 <Speed_Motor+0x368>)
 800ae98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae9c:	ee07 3a90 	vmov	s15, r3
 800aea0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aea4:	4bbb      	ldr	r3, [pc, #748]	; (800b194 <Speed_Motor+0x36c>)
 800aea6:	edd3 7a00 	vldr	s15, [r3]
 800aeaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aeae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb2:	d50b      	bpl.n	800aecc <Speed_Motor+0xa4>
 800aeb4:	4bb8      	ldr	r3, [pc, #736]	; (800b198 <Speed_Motor+0x370>)
 800aeb6:	edd3 7a00 	vldr	s15, [r3]
 800aeba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aec2:	dd03      	ble.n	800aecc <Speed_Motor+0xa4>
 800aec4:	4bb4      	ldr	r3, [pc, #720]	; (800b198 <Speed_Motor+0x370>)
 800aec6:	f04f 0200 	mov.w	r2, #0
 800aeca:	601a      	str	r2, [r3, #0]
	if(speed_buff != Average_speed && speed_buff < Average_speed && speedval_I < 0)speedval_I=0;
 800aecc:	4bb0      	ldr	r3, [pc, #704]	; (800b190 <Speed_Motor+0x368>)
 800aece:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aed2:	ee07 3a90 	vmov	s15, r3
 800aed6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aeda:	4bae      	ldr	r3, [pc, #696]	; (800b194 <Speed_Motor+0x36c>)
 800aedc:	edd3 7a00 	vldr	s15, [r3]
 800aee0:	eeb4 7a67 	vcmp.f32	s14, s15
 800aee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aee8:	d01a      	beq.n	800af20 <Speed_Motor+0xf8>
 800aeea:	4ba9      	ldr	r3, [pc, #676]	; (800b190 <Speed_Motor+0x368>)
 800aeec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aef0:	ee07 3a90 	vmov	s15, r3
 800aef4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aef8:	4ba6      	ldr	r3, [pc, #664]	; (800b194 <Speed_Motor+0x36c>)
 800aefa:	edd3 7a00 	vldr	s15, [r3]
 800aefe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800af02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af06:	dd0b      	ble.n	800af20 <Speed_Motor+0xf8>
 800af08:	4ba3      	ldr	r3, [pc, #652]	; (800b198 <Speed_Motor+0x370>)
 800af0a:	edd3 7a00 	vldr	s15, [r3]
 800af0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800af12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af16:	d503      	bpl.n	800af20 <Speed_Motor+0xf8>
 800af18:	4b9f      	ldr	r3, [pc, #636]	; (800b198 <Speed_Motor+0x370>)
 800af1a:	f04f 0200 	mov.w	r2, #0
 800af1e:	601a      	str	r2, [r3, #0]
	speed_buff = Average_speed;
 800af20:	4b9b      	ldr	r3, [pc, #620]	; (800b190 <Speed_Motor+0x368>)
 800af22:	f9b3 3000 	ldrsh.w	r3, [r3]
 800af26:	ee07 3a90 	vmov	s15, r3
 800af2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af2e:	4b99      	ldr	r3, [pc, #612]	; (800b194 <Speed_Motor+0x36c>)
 800af30:	edc3 7a00 	vstr	s15, [r3]
	//if(speedval <= 10.0 && speedval >= (-10.0))speedval_I=0;
	speedval_I = speedval_I + ((float)speedval*T);
 800af34:	4b98      	ldr	r3, [pc, #608]	; (800b198 <Speed_Motor+0x370>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fd fa3d 	bl	80083b8 <__aeabi_f2d>
 800af3e:	4604      	mov	r4, r0
 800af40:	460d      	mov	r5, r1
 800af42:	6838      	ldr	r0, [r7, #0]
 800af44:	f7fd fa38 	bl	80083b8 <__aeabi_f2d>
 800af48:	a38d      	add	r3, pc, #564	; (adr r3, 800b180 <Speed_Motor+0x358>)
 800af4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4e:	f7fd fa8b 	bl	8008468 <__aeabi_dmul>
 800af52:	4602      	mov	r2, r0
 800af54:	460b      	mov	r3, r1
 800af56:	4620      	mov	r0, r4
 800af58:	4629      	mov	r1, r5
 800af5a:	f7fd f8cf 	bl	80080fc <__adddf3>
 800af5e:	4603      	mov	r3, r0
 800af60:	460c      	mov	r4, r1
 800af62:	4618      	mov	r0, r3
 800af64:	4621      	mov	r1, r4
 800af66:	f7fd fd57 	bl	8008a18 <__aeabi_d2f>
 800af6a:	4602      	mov	r2, r0
 800af6c:	4b8a      	ldr	r3, [pc, #552]	; (800b198 <Speed_Motor+0x370>)
 800af6e:	601a      	str	r2, [r3, #0]

	//if(speedval <= 10.0 && speedval >= (-10.0))speedval_I=0;

	if(speedval_I >= 100000) speedval_I = 100000;
 800af70:	4b89      	ldr	r3, [pc, #548]	; (800b198 <Speed_Motor+0x370>)
 800af72:	edd3 7a00 	vldr	s15, [r3]
 800af76:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800b19c <Speed_Motor+0x374>
 800af7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af82:	db02      	blt.n	800af8a <Speed_Motor+0x162>
 800af84:	4b84      	ldr	r3, [pc, #528]	; (800b198 <Speed_Motor+0x370>)
 800af86:	4a86      	ldr	r2, [pc, #536]	; (800b1a0 <Speed_Motor+0x378>)
 800af88:	601a      	str	r2, [r3, #0]
	if(speedval_I <= (-100000)) speedval_I = (-100000);
 800af8a:	4b83      	ldr	r3, [pc, #524]	; (800b198 <Speed_Motor+0x370>)
 800af8c:	edd3 7a00 	vldr	s15, [r3]
 800af90:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800b1a4 <Speed_Motor+0x37c>
 800af94:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af9c:	d802      	bhi.n	800afa4 <Speed_Motor+0x17c>
 800af9e:	4b7e      	ldr	r3, [pc, #504]	; (800b198 <Speed_Motor+0x370>)
 800afa0:	4a81      	ldr	r2, [pc, #516]	; (800b1a8 <Speed_Motor+0x380>)
 800afa2:	601a      	str	r2, [r3, #0]

	val_v = (speedval* sKp)+((float)speedval_I*sKi);
 800afa4:	ed97 7a00 	vldr	s14, [r7]
 800afa8:	edd7 7a02 	vldr	s15, [r7, #8]
 800afac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800afb0:	4b79      	ldr	r3, [pc, #484]	; (800b198 <Speed_Motor+0x370>)
 800afb2:	edd3 6a00 	vldr	s13, [r3]
 800afb6:	edd7 7a01 	vldr	s15, [r7, #4]
 800afba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800afbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afc2:	edc7 7a06 	vstr	s15, [r7, #24]
	val_k  = Line_Motor();
 800afc6:	f7ff fd8b 	bl	800aae0 <Line_Motor>
 800afca:	ed87 0a05 	vstr	s0, [r7, #20]
//	if(val_v >= 1400 && val_k >= 2000) val_v =1400;
//	if(val_v <= -1400 && val_k <= -2000) val_v = -1400;
	if(val_v >= 2000) val_v =2000;
 800afce:	edd7 7a06 	vldr	s15, [r7, #24]
 800afd2:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800b1b8 <Speed_Motor+0x390>
 800afd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afde:	db01      	blt.n	800afe4 <Speed_Motor+0x1bc>
 800afe0:	4b72      	ldr	r3, [pc, #456]	; (800b1ac <Speed_Motor+0x384>)
 800afe2:	61bb      	str	r3, [r7, #24]
	if(val_v <= -2000) val_v = -2000;
 800afe4:	edd7 7a06 	vldr	s15, [r7, #24]
 800afe8:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800b1b0 <Speed_Motor+0x388>
 800afec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aff4:	d801      	bhi.n	800affa <Speed_Motor+0x1d2>
 800aff6:	4b6f      	ldr	r3, [pc, #444]	; (800b1b4 <Speed_Motor+0x38c>)
 800aff8:	61bb      	str	r3, [r7, #24]
	if(val_k >= 2000){
 800affa:	edd7 7a05 	vldr	s15, [r7, #20]
 800affe:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800b1b8 <Speed_Motor+0x390>
 800b002:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b00a:	db01      	blt.n	800b010 <Speed_Motor+0x1e8>
		val_k =2000;
 800b00c:	4b67      	ldr	r3, [pc, #412]	; (800b1ac <Speed_Motor+0x384>)
 800b00e:	617b      	str	r3, [r7, #20]
		//val_v = 0;
	}
	if(val_k <= -2000){
 800b010:	edd7 7a05 	vldr	s15, [r7, #20]
 800b014:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800b1b0 <Speed_Motor+0x388>
 800b018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b020:	d801      	bhi.n	800b026 <Speed_Motor+0x1fe>
		val_k = -2000;
 800b022:	4b64      	ldr	r3, [pc, #400]	; (800b1b4 <Speed_Motor+0x38c>)
 800b024:	617b      	str	r3, [r7, #20]
		//val_v = 0;
	}
//	if(val_k >= 2000) val_v = 0;
//	if(val_k <= -2000) val_v = 0;
	MotorL = roundf(val_v + val_k);
 800b026:	ed97 7a06 	vldr	s14, [r7, #24]
 800b02a:	edd7 7a05 	vldr	s15, [r7, #20]
 800b02e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b032:	eeb0 0a67 	vmov.f32	s0, s15
 800b036:	f00b f9b5 	bl	80163a4 <roundf>
 800b03a:	eef0 7a40 	vmov.f32	s15, s0
 800b03e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b042:	ee17 3a90 	vmov	r3, s15
 800b046:	83fb      	strh	r3, [r7, #30]
	MotorR =roundf( val_v - val_k);
 800b048:	ed97 7a06 	vldr	s14, [r7, #24]
 800b04c:	edd7 7a05 	vldr	s15, [r7, #20]
 800b050:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b054:	eeb0 0a67 	vmov.f32	s0, s15
 800b058:	f00b f9a4 	bl	80163a4 <roundf>
 800b05c:	eef0 7a40 	vmov.f32	s15, s0
 800b060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b064:	ee17 3a90 	vmov	r3, s15
 800b068:	83bb      	strh	r3, [r7, #28]
	if(MotorL>=2000  ){
 800b06a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b06e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b072:	db28      	blt.n	800b0c6 <Speed_Motor+0x29e>
		se = MotorL-2000;
 800b074:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b078:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800b07c:	ee07 3a90 	vmov	s15, r3
 800b080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b084:	edc7 7a04 	vstr	s15, [r7, #16]
		MotorL = (val_v-se)+val_k;
 800b088:	ed97 7a06 	vldr	s14, [r7, #24]
 800b08c:	edd7 7a04 	vldr	s15, [r7, #16]
 800b090:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b094:	edd7 7a05 	vldr	s15, [r7, #20]
 800b098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b09c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b0a0:	ee17 3a90 	vmov	r3, s15
 800b0a4:	83fb      	strh	r3, [r7, #30]
		MotorR = (val_v-se)-val_k;
 800b0a6:	ed97 7a06 	vldr	s14, [r7, #24]
 800b0aa:	edd7 7a04 	vldr	s15, [r7, #16]
 800b0ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b0b2:	edd7 7a05 	vldr	s15, [r7, #20]
 800b0b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b0be:	ee17 3a90 	vmov	r3, s15
 800b0c2:	83bb      	strh	r3, [r7, #28]
 800b0c4:	e0a7      	b.n	800b216 <Speed_Motor+0x3ee>
	}
	else if(MotorR>=2000){
 800b0c6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b0ca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b0ce:	db28      	blt.n	800b122 <Speed_Motor+0x2fa>
		se = MotorR-2000;
 800b0d0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b0d4:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800b0d8:	ee07 3a90 	vmov	s15, r3
 800b0dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0e0:	edc7 7a04 	vstr	s15, [r7, #16]
		MotorL = (val_v-se)+val_k;
 800b0e4:	ed97 7a06 	vldr	s14, [r7, #24]
 800b0e8:	edd7 7a04 	vldr	s15, [r7, #16]
 800b0ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b0f0:	edd7 7a05 	vldr	s15, [r7, #20]
 800b0f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b0fc:	ee17 3a90 	vmov	r3, s15
 800b100:	83fb      	strh	r3, [r7, #30]
		MotorR = (val_v-se)-val_k;
 800b102:	ed97 7a06 	vldr	s14, [r7, #24]
 800b106:	edd7 7a04 	vldr	s15, [r7, #16]
 800b10a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b10e:	edd7 7a05 	vldr	s15, [r7, #20]
 800b112:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b116:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b11a:	ee17 3a90 	vmov	r3, s15
 800b11e:	83bb      	strh	r3, [r7, #28]
 800b120:	e079      	b.n	800b216 <Speed_Motor+0x3ee>
	}
	else if(MotorL<=-2000 ){
 800b122:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b126:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 800b12a:	dc47      	bgt.n	800b1bc <Speed_Motor+0x394>
		se = MotorL+2000;
 800b12c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b130:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800b134:	ee07 3a90 	vmov	s15, r3
 800b138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b13c:	edc7 7a04 	vstr	s15, [r7, #16]
		MotorL = (val_v-se)+val_k;
 800b140:	ed97 7a06 	vldr	s14, [r7, #24]
 800b144:	edd7 7a04 	vldr	s15, [r7, #16]
 800b148:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b14c:	edd7 7a05 	vldr	s15, [r7, #20]
 800b150:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b158:	ee17 3a90 	vmov	r3, s15
 800b15c:	83fb      	strh	r3, [r7, #30]
		MotorR = (val_v-se)-val_k;
 800b15e:	ed97 7a06 	vldr	s14, [r7, #24]
 800b162:	edd7 7a04 	vldr	s15, [r7, #16]
 800b166:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b16a:	edd7 7a05 	vldr	s15, [r7, #20]
 800b16e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b172:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b176:	ee17 3a90 	vmov	r3, s15
 800b17a:	83bb      	strh	r3, [r7, #28]
 800b17c:	e04b      	b.n	800b216 <Speed_Motor+0x3ee>
 800b17e:	bf00      	nop
 800b180:	d2f1a9fc 	.word	0xd2f1a9fc
 800b184:	3f50624d 	.word	0x3f50624d
 800b188:	40200000 	.word	0x40200000
 800b18c:	41e00000 	.word	0x41e00000
 800b190:	20014332 	.word	0x20014332
 800b194:	2000c2b4 	.word	0x2000c2b4
 800b198:	2000c2b8 	.word	0x2000c2b8
 800b19c:	47c35000 	.word	0x47c35000
 800b1a0:	47c35000 	.word	0x47c35000
 800b1a4:	c7c35000 	.word	0xc7c35000
 800b1a8:	c7c35000 	.word	0xc7c35000
 800b1ac:	44fa0000 	.word	0x44fa0000
 800b1b0:	c4fa0000 	.word	0xc4fa0000
 800b1b4:	c4fa0000 	.word	0xc4fa0000
 800b1b8:	44fa0000 	.word	0x44fa0000
	}
	else if(MotorR<=-2000 ){
 800b1bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b1c0:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 800b1c4:	dc27      	bgt.n	800b216 <Speed_Motor+0x3ee>
		se = MotorR+2000;
 800b1c6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b1ca:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800b1ce:	ee07 3a90 	vmov	s15, r3
 800b1d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1d6:	edc7 7a04 	vstr	s15, [r7, #16]
		MotorL = (val_v-se)+val_k;
 800b1da:	ed97 7a06 	vldr	s14, [r7, #24]
 800b1de:	edd7 7a04 	vldr	s15, [r7, #16]
 800b1e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b1e6:	edd7 7a05 	vldr	s15, [r7, #20]
 800b1ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b1f2:	ee17 3a90 	vmov	r3, s15
 800b1f6:	83fb      	strh	r3, [r7, #30]
		MotorR = (val_v-se)-val_k;
 800b1f8:	ed97 7a06 	vldr	s14, [r7, #24]
 800b1fc:	edd7 7a04 	vldr	s15, [r7, #16]
 800b200:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b204:	edd7 7a05 	vldr	s15, [r7, #20]
 800b208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b20c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b210:	ee17 3a90 	vmov	r3, s15
 800b214:	83bb      	strh	r3, [r7, #28]
	}
	if(speedval>=2000){
 800b216:	edd7 7a00 	vldr	s15, [r7]
 800b21a:	ed1f 7a19 	vldr	s14, [pc, #-100]	; 800b1b8 <Speed_Motor+0x390>
 800b21e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b226:	db07      	blt.n	800b238 <Speed_Motor+0x410>
		MotorL=MotorL+200;
 800b228:	8bfb      	ldrh	r3, [r7, #30]
 800b22a:	33c8      	adds	r3, #200	; 0xc8
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	83fb      	strh	r3, [r7, #30]
		MotorR=MotorR+200;
 800b230:	8bbb      	ldrh	r3, [r7, #28]
 800b232:	33c8      	adds	r3, #200	; 0xc8
 800b234:	b29b      	uxth	r3, r3
 800b236:	83bb      	strh	r3, [r7, #28]
	}
//	if(MotorL-MotorR <= 2000) fan_pressure(14.5,15.0);
//	else fan_pressure(14.5,14.5);
//	if(MotorR-MotorL <= 2000) fan_pressure(15.0,14.5);
//	else fan_pressure(14.5,14.5);
	Motor(MotorL,MotorR);
 800b238:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b23c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b240:	4611      	mov	r1, r2
 800b242:	4618      	mov	r0, r3
 800b244:	f001 f8f4 	bl	800c430 <Motor>


}
 800b248:	bf00      	nop
 800b24a:	3720      	adds	r7, #32
 800b24c:	46bd      	mov	sp, r7
 800b24e:	ecbd 8b02 	vpop	{d8}
 800b252:	bdb0      	pop	{r4, r5, r7, pc}

0800b254 <adjust_spped>:
#include "initial.h"

uint16_t Accm;
uint16_t Decm;

void adjust_spped(){
 800b254:	b580      	push	{r7, lr}
 800b256:	af00      	add	r7, sp, #0
	lcd_init();
 800b258:	f7fd fdde 	bl	8008e18 <lcd_init>
	lcd_clear();
 800b25c:	f7fd fe20 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800b260:	2100      	movs	r1, #0
 800b262:	2000      	movs	r0, #0
 800b264:	f7fd fe2c 	bl	8008ec0 <lcd_locate>
	lcd_printf("Ave_speed");
 800b268:	4833      	ldr	r0, [pc, #204]	; (800b338 <adjust_spped+0xe4>)
 800b26a:	f7fd fe53 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800b26e:	2101      	movs	r1, #1
 800b270:	2000      	movs	r0, #0
 800b272:	f7fd fe25 	bl	8008ec0 <lcd_locate>
	lcd_printf("%d",Average_speed);
 800b276:	4b31      	ldr	r3, [pc, #196]	; (800b33c <adjust_spped+0xe8>)
 800b278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b27c:	4619      	mov	r1, r3
 800b27e:	4830      	ldr	r0, [pc, #192]	; (800b340 <adjust_spped+0xec>)
 800b280:	f7fd fe48 	bl	8008f14 <lcd_printf>
	TIM4 -> CNT=32768;
 800b284:	4b2f      	ldr	r3, [pc, #188]	; (800b344 <adjust_spped+0xf0>)
 800b286:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b28a:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b28c:	e041      	b.n	800b312 <adjust_spped+0xbe>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800b28e:	2201      	movs	r2, #1
 800b290:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b294:	482c      	ldr	r0, [pc, #176]	; (800b348 <adjust_spped+0xf4>)
 800b296:	f004 ff9d 	bl	80101d4 <HAL_GPIO_WritePin>
		if(TIM4 -> CNT>32768+2000){
 800b29a:	4b2a      	ldr	r3, [pc, #168]	; (800b344 <adjust_spped+0xf0>)
 800b29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29e:	f248 72d0 	movw	r2, #34768	; 0x87d0
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d917      	bls.n	800b2d6 <adjust_spped+0x82>
			Average_speed += 100;
 800b2a6:	4b25      	ldr	r3, [pc, #148]	; (800b33c <adjust_spped+0xe8>)
 800b2a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	3364      	adds	r3, #100	; 0x64
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	b21a      	sxth	r2, r3
 800b2b4:	4b21      	ldr	r3, [pc, #132]	; (800b33c <adjust_spped+0xe8>)
 800b2b6:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b2b8:	2101      	movs	r1, #1
 800b2ba:	2000      	movs	r0, #0
 800b2bc:	f7fd fe00 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Average_speed);
 800b2c0:	4b1e      	ldr	r3, [pc, #120]	; (800b33c <adjust_spped+0xe8>)
 800b2c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	481d      	ldr	r0, [pc, #116]	; (800b340 <adjust_spped+0xec>)
 800b2ca:	f7fd fe23 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b2ce:	4b1d      	ldr	r3, [pc, #116]	; (800b344 <adjust_spped+0xf0>)
 800b2d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b2d4:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(TIM4 -> CNT<32768-2000){
 800b2d6:	4b1b      	ldr	r3, [pc, #108]	; (800b344 <adjust_spped+0xf0>)
 800b2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2da:	f647 022f 	movw	r2, #30767	; 0x782f
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d817      	bhi.n	800b312 <adjust_spped+0xbe>
			Average_speed -= 100;
 800b2e2:	4b16      	ldr	r3, [pc, #88]	; (800b33c <adjust_spped+0xe8>)
 800b2e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	3b64      	subs	r3, #100	; 0x64
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	b21a      	sxth	r2, r3
 800b2f0:	4b12      	ldr	r3, [pc, #72]	; (800b33c <adjust_spped+0xe8>)
 800b2f2:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b2f4:	2101      	movs	r1, #1
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	f7fd fde2 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Average_speed);
 800b2fc:	4b0f      	ldr	r3, [pc, #60]	; (800b33c <adjust_spped+0xe8>)
 800b2fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b302:	4619      	mov	r1, r3
 800b304:	480e      	ldr	r0, [pc, #56]	; (800b340 <adjust_spped+0xec>)
 800b306:	f7fd fe05 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b30a:	4b0e      	ldr	r3, [pc, #56]	; (800b344 <adjust_spped+0xf0>)
 800b30c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b310:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b312:	f001 f9c9 	bl	800c6a8 <switch_cheack>
 800b316:	4603      	mov	r3, r0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d1b8      	bne.n	800b28e <adjust_spped+0x3a>
		}
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800b31c:	2201      	movs	r2, #1
 800b31e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b322:	4809      	ldr	r0, [pc, #36]	; (800b348 <adjust_spped+0xf4>)
 800b324:	f004 ff56 	bl	80101d4 <HAL_GPIO_WritePin>
	work_ram[26]=Average_speed;
 800b328:	4b04      	ldr	r3, [pc, #16]	; (800b33c <adjust_spped+0xe8>)
 800b32a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b32e:	b29a      	uxth	r2, r3
 800b330:	4b06      	ldr	r3, [pc, #24]	; (800b34c <adjust_spped+0xf8>)
 800b332:	869a      	strh	r2, [r3, #52]	; 0x34

}
 800b334:	bf00      	nop
 800b336:	bd80      	pop	{r7, pc}
 800b338:	08016424 	.word	0x08016424
 800b33c:	20014332 	.word	0x20014332
 800b340:	08016430 	.word	0x08016430
 800b344:	40000800 	.word	0x40000800
 800b348:	40020000 	.word	0x40020000
 800b34c:	2000c318 	.word	0x2000c318

0800b350 <adjust_Kp>:
void adjust_Kp(){
 800b350:	b580      	push	{r7, lr}
 800b352:	af00      	add	r7, sp, #0
	lcd_init();
 800b354:	f7fd fd60 	bl	8008e18 <lcd_init>
	lcd_clear();
 800b358:	f7fd fda2 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800b35c:	2100      	movs	r1, #0
 800b35e:	2000      	movs	r0, #0
 800b360:	f7fd fdae 	bl	8008ec0 <lcd_locate>
	lcd_printf("Kp");
 800b364:	482e      	ldr	r0, [pc, #184]	; (800b420 <adjust_Kp+0xd0>)
 800b366:	f7fd fdd5 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800b36a:	2101      	movs	r1, #1
 800b36c:	2000      	movs	r0, #0
 800b36e:	f7fd fda7 	bl	8008ec0 <lcd_locate>
	lcd_printf("%d",Kp);
 800b372:	4b2c      	ldr	r3, [pc, #176]	; (800b424 <adjust_Kp+0xd4>)
 800b374:	881b      	ldrh	r3, [r3, #0]
 800b376:	4619      	mov	r1, r3
 800b378:	482b      	ldr	r0, [pc, #172]	; (800b428 <adjust_Kp+0xd8>)
 800b37a:	f7fd fdcb 	bl	8008f14 <lcd_printf>
	TIM4 -> CNT=32768;
 800b37e:	4b2b      	ldr	r3, [pc, #172]	; (800b42c <adjust_Kp+0xdc>)
 800b380:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b384:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b386:	e039      	b.n	800b3fc <adjust_Kp+0xac>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800b388:	2200      	movs	r2, #0
 800b38a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b38e:	4828      	ldr	r0, [pc, #160]	; (800b430 <adjust_Kp+0xe0>)
 800b390:	f004 ff20 	bl	80101d4 <HAL_GPIO_WritePin>
		if(TIM4 -> CNT>32768+2000){
 800b394:	4b25      	ldr	r3, [pc, #148]	; (800b42c <adjust_Kp+0xdc>)
 800b396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b398:	f248 72d0 	movw	r2, #34768	; 0x87d0
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d913      	bls.n	800b3c8 <adjust_Kp+0x78>
			Kp ++;
 800b3a0:	4b20      	ldr	r3, [pc, #128]	; (800b424 <adjust_Kp+0xd4>)
 800b3a2:	881b      	ldrh	r3, [r3, #0]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	4b1e      	ldr	r3, [pc, #120]	; (800b424 <adjust_Kp+0xd4>)
 800b3aa:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b3ac:	2101      	movs	r1, #1
 800b3ae:	2000      	movs	r0, #0
 800b3b0:	f7fd fd86 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Kp);
 800b3b4:	4b1b      	ldr	r3, [pc, #108]	; (800b424 <adjust_Kp+0xd4>)
 800b3b6:	881b      	ldrh	r3, [r3, #0]
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	481b      	ldr	r0, [pc, #108]	; (800b428 <adjust_Kp+0xd8>)
 800b3bc:	f7fd fdaa 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b3c0:	4b1a      	ldr	r3, [pc, #104]	; (800b42c <adjust_Kp+0xdc>)
 800b3c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b3c6:	625a      	str	r2, [r3, #36]	; 0x24
		}

		if(TIM4 -> CNT<32768-2000) {
 800b3c8:	4b18      	ldr	r3, [pc, #96]	; (800b42c <adjust_Kp+0xdc>)
 800b3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3cc:	f647 022f 	movw	r2, #30767	; 0x782f
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d813      	bhi.n	800b3fc <adjust_Kp+0xac>
			Kp --;
 800b3d4:	4b13      	ldr	r3, [pc, #76]	; (800b424 <adjust_Kp+0xd4>)
 800b3d6:	881b      	ldrh	r3, [r3, #0]
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	4b11      	ldr	r3, [pc, #68]	; (800b424 <adjust_Kp+0xd4>)
 800b3de:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b3e0:	2101      	movs	r1, #1
 800b3e2:	2000      	movs	r0, #0
 800b3e4:	f7fd fd6c 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Kp);
 800b3e8:	4b0e      	ldr	r3, [pc, #56]	; (800b424 <adjust_Kp+0xd4>)
 800b3ea:	881b      	ldrh	r3, [r3, #0]
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	480e      	ldr	r0, [pc, #56]	; (800b428 <adjust_Kp+0xd8>)
 800b3f0:	f7fd fd90 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b3f4:	4b0d      	ldr	r3, [pc, #52]	; (800b42c <adjust_Kp+0xdc>)
 800b3f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b3fa:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b3fc:	f001 f954 	bl	800c6a8 <switch_cheack>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1c0      	bne.n	800b388 <adjust_Kp+0x38>
		}
		}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800b406:	2201      	movs	r2, #1
 800b408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b40c:	4808      	ldr	r0, [pc, #32]	; (800b430 <adjust_Kp+0xe0>)
 800b40e:	f004 fee1 	bl	80101d4 <HAL_GPIO_WritePin>
	work_ram[27]=Kp;
 800b412:	4b04      	ldr	r3, [pc, #16]	; (800b424 <adjust_Kp+0xd4>)
 800b414:	881a      	ldrh	r2, [r3, #0]
 800b416:	4b07      	ldr	r3, [pc, #28]	; (800b434 <adjust_Kp+0xe4>)
 800b418:	86da      	strh	r2, [r3, #54]	; 0x36

}
 800b41a:	bf00      	nop
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	08016434 	.word	0x08016434
 800b424:	2000c310 	.word	0x2000c310
 800b428:	08016430 	.word	0x08016430
 800b42c:	40000800 	.word	0x40000800
 800b430:	40020000 	.word	0x40020000
 800b434:	2000c318 	.word	0x2000c318

0800b438 <adjust_Ki>:
void adjust_Ki(){
 800b438:	b580      	push	{r7, lr}
 800b43a:	af00      	add	r7, sp, #0
	lcd_init();
 800b43c:	f7fd fcec 	bl	8008e18 <lcd_init>
	lcd_clear();
 800b440:	f7fd fd2e 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800b444:	2100      	movs	r1, #0
 800b446:	2000      	movs	r0, #0
 800b448:	f7fd fd3a 	bl	8008ec0 <lcd_locate>
	lcd_printf("Ki");
 800b44c:	482e      	ldr	r0, [pc, #184]	; (800b508 <adjust_Ki+0xd0>)
 800b44e:	f7fd fd61 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800b452:	2101      	movs	r1, #1
 800b454:	2000      	movs	r0, #0
 800b456:	f7fd fd33 	bl	8008ec0 <lcd_locate>
	lcd_printf("%d",Ki);
 800b45a:	4b2c      	ldr	r3, [pc, #176]	; (800b50c <adjust_Ki+0xd4>)
 800b45c:	881b      	ldrh	r3, [r3, #0]
 800b45e:	4619      	mov	r1, r3
 800b460:	482b      	ldr	r0, [pc, #172]	; (800b510 <adjust_Ki+0xd8>)
 800b462:	f7fd fd57 	bl	8008f14 <lcd_printf>
	TIM4 -> CNT=32768;
 800b466:	4b2b      	ldr	r3, [pc, #172]	; (800b514 <adjust_Ki+0xdc>)
 800b468:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b46c:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b46e:	e039      	b.n	800b4e4 <adjust_Ki+0xac>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800b470:	2200      	movs	r2, #0
 800b472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b476:	4828      	ldr	r0, [pc, #160]	; (800b518 <adjust_Ki+0xe0>)
 800b478:	f004 feac 	bl	80101d4 <HAL_GPIO_WritePin>
		if(TIM4 -> CNT>32768+2000){
 800b47c:	4b25      	ldr	r3, [pc, #148]	; (800b514 <adjust_Ki+0xdc>)
 800b47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b480:	f248 72d0 	movw	r2, #34768	; 0x87d0
 800b484:	4293      	cmp	r3, r2
 800b486:	d913      	bls.n	800b4b0 <adjust_Ki+0x78>
			Ki++;
 800b488:	4b20      	ldr	r3, [pc, #128]	; (800b50c <adjust_Ki+0xd4>)
 800b48a:	881b      	ldrh	r3, [r3, #0]
 800b48c:	3301      	adds	r3, #1
 800b48e:	b29a      	uxth	r2, r3
 800b490:	4b1e      	ldr	r3, [pc, #120]	; (800b50c <adjust_Ki+0xd4>)
 800b492:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b494:	2101      	movs	r1, #1
 800b496:	2000      	movs	r0, #0
 800b498:	f7fd fd12 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Ki);
 800b49c:	4b1b      	ldr	r3, [pc, #108]	; (800b50c <adjust_Ki+0xd4>)
 800b49e:	881b      	ldrh	r3, [r3, #0]
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	481b      	ldr	r0, [pc, #108]	; (800b510 <adjust_Ki+0xd8>)
 800b4a4:	f7fd fd36 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b4a8:	4b1a      	ldr	r3, [pc, #104]	; (800b514 <adjust_Ki+0xdc>)
 800b4aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b4ae:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(TIM4 -> CNT<32768-2000) {
 800b4b0:	4b18      	ldr	r3, [pc, #96]	; (800b514 <adjust_Ki+0xdc>)
 800b4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b4:	f647 022f 	movw	r2, #30767	; 0x782f
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d813      	bhi.n	800b4e4 <adjust_Ki+0xac>
			Ki --;
 800b4bc:	4b13      	ldr	r3, [pc, #76]	; (800b50c <adjust_Ki+0xd4>)
 800b4be:	881b      	ldrh	r3, [r3, #0]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	b29a      	uxth	r2, r3
 800b4c4:	4b11      	ldr	r3, [pc, #68]	; (800b50c <adjust_Ki+0xd4>)
 800b4c6:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b4c8:	2101      	movs	r1, #1
 800b4ca:	2000      	movs	r0, #0
 800b4cc:	f7fd fcf8 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Ki);
 800b4d0:	4b0e      	ldr	r3, [pc, #56]	; (800b50c <adjust_Ki+0xd4>)
 800b4d2:	881b      	ldrh	r3, [r3, #0]
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	480e      	ldr	r0, [pc, #56]	; (800b510 <adjust_Ki+0xd8>)
 800b4d8:	f7fd fd1c 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b4dc:	4b0d      	ldr	r3, [pc, #52]	; (800b514 <adjust_Ki+0xdc>)
 800b4de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b4e2:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b4e4:	f001 f8e0 	bl	800c6a8 <switch_cheack>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1c0      	bne.n	800b470 <adjust_Ki+0x38>
		}
		}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b4f4:	4808      	ldr	r0, [pc, #32]	; (800b518 <adjust_Ki+0xe0>)
 800b4f6:	f004 fe6d 	bl	80101d4 <HAL_GPIO_WritePin>
	work_ram[28]=Ki;
 800b4fa:	4b04      	ldr	r3, [pc, #16]	; (800b50c <adjust_Ki+0xd4>)
 800b4fc:	881a      	ldrh	r2, [r3, #0]
 800b4fe:	4b07      	ldr	r3, [pc, #28]	; (800b51c <adjust_Ki+0xe4>)
 800b500:	871a      	strh	r2, [r3, #56]	; 0x38
}
 800b502:	bf00      	nop
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	08016438 	.word	0x08016438
 800b50c:	2000c30c 	.word	0x2000c30c
 800b510:	08016430 	.word	0x08016430
 800b514:	40000800 	.word	0x40000800
 800b518:	40020000 	.word	0x40020000
 800b51c:	2000c318 	.word	0x2000c318

0800b520 <adjust_Kd>:
void adjust_Kd(){
 800b520:	b580      	push	{r7, lr}
 800b522:	af00      	add	r7, sp, #0
	lcd_init();
 800b524:	f7fd fc78 	bl	8008e18 <lcd_init>
	lcd_clear();
 800b528:	f7fd fcba 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800b52c:	2100      	movs	r1, #0
 800b52e:	2000      	movs	r0, #0
 800b530:	f7fd fcc6 	bl	8008ec0 <lcd_locate>
	lcd_printf("Kd");
 800b534:	482e      	ldr	r0, [pc, #184]	; (800b5f0 <adjust_Kd+0xd0>)
 800b536:	f7fd fced 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800b53a:	2101      	movs	r1, #1
 800b53c:	2000      	movs	r0, #0
 800b53e:	f7fd fcbf 	bl	8008ec0 <lcd_locate>
	lcd_printf("%d",Kd);
 800b542:	4b2c      	ldr	r3, [pc, #176]	; (800b5f4 <adjust_Kd+0xd4>)
 800b544:	881b      	ldrh	r3, [r3, #0]
 800b546:	4619      	mov	r1, r3
 800b548:	482b      	ldr	r0, [pc, #172]	; (800b5f8 <adjust_Kd+0xd8>)
 800b54a:	f7fd fce3 	bl	8008f14 <lcd_printf>
	TIM4 -> CNT=32768;
 800b54e:	4b2b      	ldr	r3, [pc, #172]	; (800b5fc <adjust_Kd+0xdc>)
 800b550:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b554:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b556:	e039      	b.n	800b5cc <adjust_Kd+0xac>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800b558:	2200      	movs	r2, #0
 800b55a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b55e:	4828      	ldr	r0, [pc, #160]	; (800b600 <adjust_Kd+0xe0>)
 800b560:	f004 fe38 	bl	80101d4 <HAL_GPIO_WritePin>
		if(TIM4 -> CNT>32768+2000){
 800b564:	4b25      	ldr	r3, [pc, #148]	; (800b5fc <adjust_Kd+0xdc>)
 800b566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b568:	f248 72d0 	movw	r2, #34768	; 0x87d0
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d913      	bls.n	800b598 <adjust_Kd+0x78>
			Kd++;
 800b570:	4b20      	ldr	r3, [pc, #128]	; (800b5f4 <adjust_Kd+0xd4>)
 800b572:	881b      	ldrh	r3, [r3, #0]
 800b574:	3301      	adds	r3, #1
 800b576:	b29a      	uxth	r2, r3
 800b578:	4b1e      	ldr	r3, [pc, #120]	; (800b5f4 <adjust_Kd+0xd4>)
 800b57a:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b57c:	2101      	movs	r1, #1
 800b57e:	2000      	movs	r0, #0
 800b580:	f7fd fc9e 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Kd);
 800b584:	4b1b      	ldr	r3, [pc, #108]	; (800b5f4 <adjust_Kd+0xd4>)
 800b586:	881b      	ldrh	r3, [r3, #0]
 800b588:	4619      	mov	r1, r3
 800b58a:	481b      	ldr	r0, [pc, #108]	; (800b5f8 <adjust_Kd+0xd8>)
 800b58c:	f7fd fcc2 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b590:	4b1a      	ldr	r3, [pc, #104]	; (800b5fc <adjust_Kd+0xdc>)
 800b592:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b596:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(TIM4 -> CNT<32768-2000) {
 800b598:	4b18      	ldr	r3, [pc, #96]	; (800b5fc <adjust_Kd+0xdc>)
 800b59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59c:	f647 022f 	movw	r2, #30767	; 0x782f
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d813      	bhi.n	800b5cc <adjust_Kd+0xac>
			Kd --;
 800b5a4:	4b13      	ldr	r3, [pc, #76]	; (800b5f4 <adjust_Kd+0xd4>)
 800b5a6:	881b      	ldrh	r3, [r3, #0]
 800b5a8:	3b01      	subs	r3, #1
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	4b11      	ldr	r3, [pc, #68]	; (800b5f4 <adjust_Kd+0xd4>)
 800b5ae:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b5b0:	2101      	movs	r1, #1
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	f7fd fc84 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Kd);
 800b5b8:	4b0e      	ldr	r3, [pc, #56]	; (800b5f4 <adjust_Kd+0xd4>)
 800b5ba:	881b      	ldrh	r3, [r3, #0]
 800b5bc:	4619      	mov	r1, r3
 800b5be:	480e      	ldr	r0, [pc, #56]	; (800b5f8 <adjust_Kd+0xd8>)
 800b5c0:	f7fd fca8 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b5c4:	4b0d      	ldr	r3, [pc, #52]	; (800b5fc <adjust_Kd+0xdc>)
 800b5c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b5ca:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b5cc:	f001 f86c 	bl	800c6a8 <switch_cheack>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d1c0      	bne.n	800b558 <adjust_Kd+0x38>
		}
		}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b5dc:	4808      	ldr	r0, [pc, #32]	; (800b600 <adjust_Kd+0xe0>)
 800b5de:	f004 fdf9 	bl	80101d4 <HAL_GPIO_WritePin>
	work_ram[29]=Kd;
 800b5e2:	4b04      	ldr	r3, [pc, #16]	; (800b5f4 <adjust_Kd+0xd4>)
 800b5e4:	881a      	ldrh	r2, [r3, #0]
 800b5e6:	4b07      	ldr	r3, [pc, #28]	; (800b604 <adjust_Kd+0xe4>)
 800b5e8:	875a      	strh	r2, [r3, #58]	; 0x3a

}
 800b5ea:	bf00      	nop
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	0801643c 	.word	0x0801643c
 800b5f4:	2000c30e 	.word	0x2000c30e
 800b5f8:	08016430 	.word	0x08016430
 800b5fc:	40000800 	.word	0x40000800
 800b600:	40020000 	.word	0x40020000
 800b604:	2000c318 	.word	0x2000c318

0800b608 <tuning>:
void tuning(){
 800b608:	b580      	push	{r7, lr}
 800b60a:	af00      	add	r7, sp, #0
		adjust_spped();
 800b60c:	f7ff fe22 	bl	800b254 <adjust_spped>
		HAL_Delay(100);
 800b610:	2064      	movs	r0, #100	; 0x64
 800b612:	f003 f8a9 	bl	800e768 <HAL_Delay>
		adjust_Kp();
 800b616:	f7ff fe9b 	bl	800b350 <adjust_Kp>
		HAL_Delay(100);
 800b61a:	2064      	movs	r0, #100	; 0x64
 800b61c:	f003 f8a4 	bl	800e768 <HAL_Delay>
		adjust_Ki();
 800b620:	f7ff ff0a 	bl	800b438 <adjust_Ki>
		HAL_Delay(100);
 800b624:	2064      	movs	r0, #100	; 0x64
 800b626:	f003 f89f 	bl	800e768 <HAL_Delay>
		adjust_Kd();
 800b62a:	f7ff ff79 	bl	800b520 <adjust_Kd>
		HAL_Delay(100);
 800b62e:	2064      	movs	r0, #100	; 0x64
 800b630:	f003 f89a 	bl	800e768 <HAL_Delay>

	Flash_store();
 800b634:	f000 fc0e 	bl	800be54 <Flash_store>
	lcd_clear();
 800b638:	f7fd fc32 	bl	8008ea0 <lcd_clear>
}
 800b63c:	bf00      	nop
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <adjust_Accm>:
void adjust_Accm(){
 800b640:	b580      	push	{r7, lr}
 800b642:	af00      	add	r7, sp, #0

	lcd_init();
 800b644:	f7fd fbe8 	bl	8008e18 <lcd_init>
	lcd_clear();
 800b648:	f7fd fc2a 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800b64c:	2100      	movs	r1, #0
 800b64e:	2000      	movs	r0, #0
 800b650:	f7fd fc36 	bl	8008ec0 <lcd_locate>
	lcd_printf("Accm");
 800b654:	482e      	ldr	r0, [pc, #184]	; (800b710 <adjust_Accm+0xd0>)
 800b656:	f7fd fc5d 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800b65a:	2101      	movs	r1, #1
 800b65c:	2000      	movs	r0, #0
 800b65e:	f7fd fc2f 	bl	8008ec0 <lcd_locate>
	lcd_printf("%d",Accm);
 800b662:	4b2c      	ldr	r3, [pc, #176]	; (800b714 <adjust_Accm+0xd4>)
 800b664:	881b      	ldrh	r3, [r3, #0]
 800b666:	4619      	mov	r1, r3
 800b668:	482b      	ldr	r0, [pc, #172]	; (800b718 <adjust_Accm+0xd8>)
 800b66a:	f7fd fc53 	bl	8008f14 <lcd_printf>
	TIM4 -> CNT=32768;
 800b66e:	4b2b      	ldr	r3, [pc, #172]	; (800b71c <adjust_Accm+0xdc>)
 800b670:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b674:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b676:	e039      	b.n	800b6ec <adjust_Accm+0xac>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800b678:	2200      	movs	r2, #0
 800b67a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b67e:	4828      	ldr	r0, [pc, #160]	; (800b720 <adjust_Accm+0xe0>)
 800b680:	f004 fda8 	bl	80101d4 <HAL_GPIO_WritePin>
		if(TIM4 -> CNT>32768+2000){
 800b684:	4b25      	ldr	r3, [pc, #148]	; (800b71c <adjust_Accm+0xdc>)
 800b686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b688:	f248 72d0 	movw	r2, #34768	; 0x87d0
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d913      	bls.n	800b6b8 <adjust_Accm+0x78>
			Accm ++;
 800b690:	4b20      	ldr	r3, [pc, #128]	; (800b714 <adjust_Accm+0xd4>)
 800b692:	881b      	ldrh	r3, [r3, #0]
 800b694:	3301      	adds	r3, #1
 800b696:	b29a      	uxth	r2, r3
 800b698:	4b1e      	ldr	r3, [pc, #120]	; (800b714 <adjust_Accm+0xd4>)
 800b69a:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b69c:	2101      	movs	r1, #1
 800b69e:	2000      	movs	r0, #0
 800b6a0:	f7fd fc0e 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Accm);
 800b6a4:	4b1b      	ldr	r3, [pc, #108]	; (800b714 <adjust_Accm+0xd4>)
 800b6a6:	881b      	ldrh	r3, [r3, #0]
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	481b      	ldr	r0, [pc, #108]	; (800b718 <adjust_Accm+0xd8>)
 800b6ac:	f7fd fc32 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b6b0:	4b1a      	ldr	r3, [pc, #104]	; (800b71c <adjust_Accm+0xdc>)
 800b6b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b6b6:	625a      	str	r2, [r3, #36]	; 0x24
		}

		if(TIM4 -> CNT<32768-2000) {
 800b6b8:	4b18      	ldr	r3, [pc, #96]	; (800b71c <adjust_Accm+0xdc>)
 800b6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6bc:	f647 022f 	movw	r2, #30767	; 0x782f
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d813      	bhi.n	800b6ec <adjust_Accm+0xac>
			Accm --;
 800b6c4:	4b13      	ldr	r3, [pc, #76]	; (800b714 <adjust_Accm+0xd4>)
 800b6c6:	881b      	ldrh	r3, [r3, #0]
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	4b11      	ldr	r3, [pc, #68]	; (800b714 <adjust_Accm+0xd4>)
 800b6ce:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b6d0:	2101      	movs	r1, #1
 800b6d2:	2000      	movs	r0, #0
 800b6d4:	f7fd fbf4 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Accm);
 800b6d8:	4b0e      	ldr	r3, [pc, #56]	; (800b714 <adjust_Accm+0xd4>)
 800b6da:	881b      	ldrh	r3, [r3, #0]
 800b6dc:	4619      	mov	r1, r3
 800b6de:	480e      	ldr	r0, [pc, #56]	; (800b718 <adjust_Accm+0xd8>)
 800b6e0:	f7fd fc18 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b6e4:	4b0d      	ldr	r3, [pc, #52]	; (800b71c <adjust_Accm+0xdc>)
 800b6e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b6ea:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b6ec:	f000 ffdc 	bl	800c6a8 <switch_cheack>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d1c0      	bne.n	800b678 <adjust_Accm+0x38>
		}
		//HAL_Delay(100);
		}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b6fc:	4808      	ldr	r0, [pc, #32]	; (800b720 <adjust_Accm+0xe0>)
 800b6fe:	f004 fd69 	bl	80101d4 <HAL_GPIO_WritePin>
	work_ram[31]=Accm;
 800b702:	4b04      	ldr	r3, [pc, #16]	; (800b714 <adjust_Accm+0xd4>)
 800b704:	881a      	ldrh	r2, [r3, #0]
 800b706:	4b07      	ldr	r3, [pc, #28]	; (800b724 <adjust_Accm+0xe4>)
 800b708:	87da      	strh	r2, [r3, #62]	; 0x3e

}
 800b70a:	bf00      	nop
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	08016440 	.word	0x08016440
 800b714:	2000c314 	.word	0x2000c314
 800b718:	08016430 	.word	0x08016430
 800b71c:	40000800 	.word	0x40000800
 800b720:	40020000 	.word	0x40020000
 800b724:	2000c318 	.word	0x2000c318

0800b728 <adjust_Decm>:
void adjust_Decm(){
 800b728:	b580      	push	{r7, lr}
 800b72a:	af00      	add	r7, sp, #0

	lcd_init();
 800b72c:	f7fd fb74 	bl	8008e18 <lcd_init>
	lcd_clear();
 800b730:	f7fd fbb6 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800b734:	2100      	movs	r1, #0
 800b736:	2000      	movs	r0, #0
 800b738:	f7fd fbc2 	bl	8008ec0 <lcd_locate>
	lcd_printf("Decm");
 800b73c:	482e      	ldr	r0, [pc, #184]	; (800b7f8 <adjust_Decm+0xd0>)
 800b73e:	f7fd fbe9 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800b742:	2101      	movs	r1, #1
 800b744:	2000      	movs	r0, #0
 800b746:	f7fd fbbb 	bl	8008ec0 <lcd_locate>
	lcd_printf("%d",Decm);
 800b74a:	4b2c      	ldr	r3, [pc, #176]	; (800b7fc <adjust_Decm+0xd4>)
 800b74c:	881b      	ldrh	r3, [r3, #0]
 800b74e:	4619      	mov	r1, r3
 800b750:	482b      	ldr	r0, [pc, #172]	; (800b800 <adjust_Decm+0xd8>)
 800b752:	f7fd fbdf 	bl	8008f14 <lcd_printf>
	TIM4 -> CNT=32768;
 800b756:	4b2b      	ldr	r3, [pc, #172]	; (800b804 <adjust_Decm+0xdc>)
 800b758:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b75c:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b75e:	e039      	b.n	800b7d4 <adjust_Decm+0xac>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800b760:	2200      	movs	r2, #0
 800b762:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b766:	4828      	ldr	r0, [pc, #160]	; (800b808 <adjust_Decm+0xe0>)
 800b768:	f004 fd34 	bl	80101d4 <HAL_GPIO_WritePin>
		if(TIM4 -> CNT>32768+2000){
 800b76c:	4b25      	ldr	r3, [pc, #148]	; (800b804 <adjust_Decm+0xdc>)
 800b76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b770:	f248 72d0 	movw	r2, #34768	; 0x87d0
 800b774:	4293      	cmp	r3, r2
 800b776:	d913      	bls.n	800b7a0 <adjust_Decm+0x78>
			Decm ++;
 800b778:	4b20      	ldr	r3, [pc, #128]	; (800b7fc <adjust_Decm+0xd4>)
 800b77a:	881b      	ldrh	r3, [r3, #0]
 800b77c:	3301      	adds	r3, #1
 800b77e:	b29a      	uxth	r2, r3
 800b780:	4b1e      	ldr	r3, [pc, #120]	; (800b7fc <adjust_Decm+0xd4>)
 800b782:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b784:	2101      	movs	r1, #1
 800b786:	2000      	movs	r0, #0
 800b788:	f7fd fb9a 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Decm);
 800b78c:	4b1b      	ldr	r3, [pc, #108]	; (800b7fc <adjust_Decm+0xd4>)
 800b78e:	881b      	ldrh	r3, [r3, #0]
 800b790:	4619      	mov	r1, r3
 800b792:	481b      	ldr	r0, [pc, #108]	; (800b800 <adjust_Decm+0xd8>)
 800b794:	f7fd fbbe 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b798:	4b1a      	ldr	r3, [pc, #104]	; (800b804 <adjust_Decm+0xdc>)
 800b79a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b79e:	625a      	str	r2, [r3, #36]	; 0x24
		}

		if(TIM4 -> CNT<32768-2000) {
 800b7a0:	4b18      	ldr	r3, [pc, #96]	; (800b804 <adjust_Decm+0xdc>)
 800b7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a4:	f647 022f 	movw	r2, #30767	; 0x782f
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d813      	bhi.n	800b7d4 <adjust_Decm+0xac>
			Decm --;
 800b7ac:	4b13      	ldr	r3, [pc, #76]	; (800b7fc <adjust_Decm+0xd4>)
 800b7ae:	881b      	ldrh	r3, [r3, #0]
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	4b11      	ldr	r3, [pc, #68]	; (800b7fc <adjust_Decm+0xd4>)
 800b7b6:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b7b8:	2101      	movs	r1, #1
 800b7ba:	2000      	movs	r0, #0
 800b7bc:	f7fd fb80 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Decm);
 800b7c0:	4b0e      	ldr	r3, [pc, #56]	; (800b7fc <adjust_Decm+0xd4>)
 800b7c2:	881b      	ldrh	r3, [r3, #0]
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	480e      	ldr	r0, [pc, #56]	; (800b800 <adjust_Decm+0xd8>)
 800b7c8:	f7fd fba4 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b7cc:	4b0d      	ldr	r3, [pc, #52]	; (800b804 <adjust_Decm+0xdc>)
 800b7ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b7d2:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b7d4:	f000 ff68 	bl	800c6a8 <switch_cheack>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d1c0      	bne.n	800b760 <adjust_Decm+0x38>
		}
		//HAL_Delay(100);
		}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800b7de:	2201      	movs	r2, #1
 800b7e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b7e4:	4808      	ldr	r0, [pc, #32]	; (800b808 <adjust_Decm+0xe0>)
 800b7e6:	f004 fcf5 	bl	80101d4 <HAL_GPIO_WritePin>
	work_ram[32]=Decm;
 800b7ea:	4b04      	ldr	r3, [pc, #16]	; (800b7fc <adjust_Decm+0xd4>)
 800b7ec:	881a      	ldrh	r2, [r3, #0]
 800b7ee:	4b07      	ldr	r3, [pc, #28]	; (800b80c <adjust_Decm+0xe4>)
 800b7f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

}
 800b7f4:	bf00      	nop
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	08016448 	.word	0x08016448
 800b7fc:	2000c312 	.word	0x2000c312
 800b800:	08016430 	.word	0x08016430
 800b804:	40000800 	.word	0x40000800
 800b808:	40020000 	.word	0x40020000
 800b80c:	2000c318 	.word	0x2000c318

0800b810 <accel_tuning>:
void accel_tuning(){
 800b810:	b580      	push	{r7, lr}
 800b812:	af00      	add	r7, sp, #0
	adjust_Accm();
 800b814:	f7ff ff14 	bl	800b640 <adjust_Accm>
	HAL_Delay(100);
 800b818:	2064      	movs	r0, #100	; 0x64
 800b81a:	f002 ffa5 	bl	800e768 <HAL_Delay>
	adjust_Decm();
 800b81e:	f7ff ff83 	bl	800b728 <adjust_Decm>
	HAL_Delay(100);
 800b822:	2064      	movs	r0, #100	; 0x64
 800b824:	f002 ffa0 	bl	800e768 <HAL_Delay>

	Flash_store();
 800b828:	f000 fb14 	bl	800be54 <Flash_store>
	lcd_clear();
 800b82c:	f7fd fb38 	bl	8008ea0 <lcd_clear>
}
 800b830:	bf00      	nop
 800b832:	bd80      	pop	{r7, pc}

0800b834 <adjust_spped_100>:
void adjust_spped_100(){
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
	lcd_init();
 800b83a:	f7fd faed 	bl	8008e18 <lcd_init>
	lcd_clear();
 800b83e:	f7fd fb2f 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800b842:	2100      	movs	r1, #0
 800b844:	2000      	movs	r0, #0
 800b846:	f7fd fb3b 	bl	8008ec0 <lcd_locate>
	lcd_printf("100");
 800b84a:	482c      	ldr	r0, [pc, #176]	; (800b8fc <adjust_spped_100+0xc8>)
 800b84c:	f7fd fb62 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800b850:	2101      	movs	r1, #1
 800b852:	2000      	movs	r0, #0
 800b854:	f7fd fb34 	bl	8008ec0 <lcd_locate>
	uint speed_100 =work_ram[33];
 800b858:	4b29      	ldr	r3, [pc, #164]	; (800b900 <adjust_spped_100+0xcc>)
 800b85a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800b85e:	607b      	str	r3, [r7, #4]
	lcd_printf("%d",speed_100);
 800b860:	6879      	ldr	r1, [r7, #4]
 800b862:	4828      	ldr	r0, [pc, #160]	; (800b904 <adjust_spped_100+0xd0>)
 800b864:	f7fd fb56 	bl	8008f14 <lcd_printf>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800b868:	e030      	b.n	800b8cc <adjust_spped_100+0x98>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b86a:	2200      	movs	r2, #0
 800b86c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b870:	4825      	ldr	r0, [pc, #148]	; (800b908 <adjust_spped_100+0xd4>)
 800b872:	f004 fcaf 	bl	80101d4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_2)==0){
 800b876:	2104      	movs	r1, #4
 800b878:	4823      	ldr	r0, [pc, #140]	; (800b908 <adjust_spped_100+0xd4>)
 800b87a:	f004 fc93 	bl	80101a4 <HAL_GPIO_ReadPin>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d10a      	bne.n	800b89a <adjust_spped_100+0x66>
			speed_100 += 100;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	3364      	adds	r3, #100	; 0x64
 800b888:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800b88a:	2101      	movs	r1, #1
 800b88c:	2000      	movs	r0, #0
 800b88e:	f7fd fb17 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed_100);
 800b892:	6879      	ldr	r1, [r7, #4]
 800b894:	481b      	ldr	r0, [pc, #108]	; (800b904 <adjust_spped_100+0xd0>)
 800b896:	f7fd fb3d 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800b89a:	2064      	movs	r0, #100	; 0x64
 800b89c:	f002 ff64 	bl	800e768 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==0) {
 800b8a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b8a4:	4818      	ldr	r0, [pc, #96]	; (800b908 <adjust_spped_100+0xd4>)
 800b8a6:	f004 fc7d 	bl	80101a4 <HAL_GPIO_ReadPin>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d10a      	bne.n	800b8c6 <adjust_spped_100+0x92>
			speed_100 -= 100;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	3b64      	subs	r3, #100	; 0x64
 800b8b4:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800b8b6:	2101      	movs	r1, #1
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	f7fd fb01 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed_100);
 800b8be:	6879      	ldr	r1, [r7, #4]
 800b8c0:	4810      	ldr	r0, [pc, #64]	; (800b904 <adjust_spped_100+0xd0>)
 800b8c2:	f7fd fb27 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800b8c6:	2064      	movs	r0, #100	; 0x64
 800b8c8:	f002 ff4e 	bl	800e768 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800b8cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b8d0:	480d      	ldr	r0, [pc, #52]	; (800b908 <adjust_spped_100+0xd4>)
 800b8d2:	f004 fc67 	bl	80101a4 <HAL_GPIO_ReadPin>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d0c6      	beq.n	800b86a <adjust_spped_100+0x36>
		}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b8dc:	2201      	movs	r2, #1
 800b8de:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b8e2:	4809      	ldr	r0, [pc, #36]	; (800b908 <adjust_spped_100+0xd4>)
 800b8e4:	f004 fc76 	bl	80101d4 <HAL_GPIO_WritePin>
	work_ram[33]=speed_100;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	4b04      	ldr	r3, [pc, #16]	; (800b900 <adjust_spped_100+0xcc>)
 800b8ee:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 800b8f2:	bf00      	nop
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	08016450 	.word	0x08016450
 800b900:	2000c318 	.word	0x2000c318
 800b904:	08016430 	.word	0x08016430
 800b908:	40020800 	.word	0x40020800

0800b90c <adjust_spped_300>:
void adjust_spped_300(){
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
	lcd_init();
 800b912:	f7fd fa81 	bl	8008e18 <lcd_init>
	lcd_clear();
 800b916:	f7fd fac3 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800b91a:	2100      	movs	r1, #0
 800b91c:	2000      	movs	r0, #0
 800b91e:	f7fd facf 	bl	8008ec0 <lcd_locate>
	lcd_printf("300");
 800b922:	482c      	ldr	r0, [pc, #176]	; (800b9d4 <adjust_spped_300+0xc8>)
 800b924:	f7fd faf6 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800b928:	2101      	movs	r1, #1
 800b92a:	2000      	movs	r0, #0
 800b92c:	f7fd fac8 	bl	8008ec0 <lcd_locate>
	uint speed = work_ram[34];
 800b930:	4b29      	ldr	r3, [pc, #164]	; (800b9d8 <adjust_spped_300+0xcc>)
 800b932:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b936:	607b      	str	r3, [r7, #4]
	lcd_printf("%d",speed);
 800b938:	6879      	ldr	r1, [r7, #4]
 800b93a:	4828      	ldr	r0, [pc, #160]	; (800b9dc <adjust_spped_300+0xd0>)
 800b93c:	f7fd faea 	bl	8008f14 <lcd_printf>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800b940:	e030      	b.n	800b9a4 <adjust_spped_300+0x98>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b942:	2200      	movs	r2, #0
 800b944:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b948:	4825      	ldr	r0, [pc, #148]	; (800b9e0 <adjust_spped_300+0xd4>)
 800b94a:	f004 fc43 	bl	80101d4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_2)==0){
 800b94e:	2104      	movs	r1, #4
 800b950:	4823      	ldr	r0, [pc, #140]	; (800b9e0 <adjust_spped_300+0xd4>)
 800b952:	f004 fc27 	bl	80101a4 <HAL_GPIO_ReadPin>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10a      	bne.n	800b972 <adjust_spped_300+0x66>
			speed += 100;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	3364      	adds	r3, #100	; 0x64
 800b960:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800b962:	2101      	movs	r1, #1
 800b964:	2000      	movs	r0, #0
 800b966:	f7fd faab 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed);
 800b96a:	6879      	ldr	r1, [r7, #4]
 800b96c:	481b      	ldr	r0, [pc, #108]	; (800b9dc <adjust_spped_300+0xd0>)
 800b96e:	f7fd fad1 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800b972:	2064      	movs	r0, #100	; 0x64
 800b974:	f002 fef8 	bl	800e768 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==0) {
 800b978:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b97c:	4818      	ldr	r0, [pc, #96]	; (800b9e0 <adjust_spped_300+0xd4>)
 800b97e:	f004 fc11 	bl	80101a4 <HAL_GPIO_ReadPin>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10a      	bne.n	800b99e <adjust_spped_300+0x92>
			speed -= 100;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	3b64      	subs	r3, #100	; 0x64
 800b98c:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800b98e:	2101      	movs	r1, #1
 800b990:	2000      	movs	r0, #0
 800b992:	f7fd fa95 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed);
 800b996:	6879      	ldr	r1, [r7, #4]
 800b998:	4810      	ldr	r0, [pc, #64]	; (800b9dc <adjust_spped_300+0xd0>)
 800b99a:	f7fd fabb 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800b99e:	2064      	movs	r0, #100	; 0x64
 800b9a0:	f002 fee2 	bl	800e768 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800b9a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b9a8:	480d      	ldr	r0, [pc, #52]	; (800b9e0 <adjust_spped_300+0xd4>)
 800b9aa:	f004 fbfb 	bl	80101a4 <HAL_GPIO_ReadPin>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d0c6      	beq.n	800b942 <adjust_spped_300+0x36>
		}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b9ba:	4809      	ldr	r0, [pc, #36]	; (800b9e0 <adjust_spped_300+0xd4>)
 800b9bc:	f004 fc0a 	bl	80101d4 <HAL_GPIO_WritePin>
	work_ram[34]=speed;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	b29a      	uxth	r2, r3
 800b9c4:	4b04      	ldr	r3, [pc, #16]	; (800b9d8 <adjust_spped_300+0xcc>)
 800b9c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 800b9ca:	bf00      	nop
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	08016454 	.word	0x08016454
 800b9d8:	2000c318 	.word	0x2000c318
 800b9dc:	08016430 	.word	0x08016430
 800b9e0:	40020800 	.word	0x40020800

0800b9e4 <adjust_spped_500>:
void adjust_spped_500(){
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
	lcd_init();
 800b9ea:	f7fd fa15 	bl	8008e18 <lcd_init>
	lcd_clear();
 800b9ee:	f7fd fa57 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	2000      	movs	r0, #0
 800b9f6:	f7fd fa63 	bl	8008ec0 <lcd_locate>
	lcd_printf("500");
 800b9fa:	482c      	ldr	r0, [pc, #176]	; (800baac <adjust_spped_500+0xc8>)
 800b9fc:	f7fd fa8a 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800ba00:	2101      	movs	r1, #1
 800ba02:	2000      	movs	r0, #0
 800ba04:	f7fd fa5c 	bl	8008ec0 <lcd_locate>
	uint speed = work_ram[35];
 800ba08:	4b29      	ldr	r3, [pc, #164]	; (800bab0 <adjust_spped_500+0xcc>)
 800ba0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ba0e:	607b      	str	r3, [r7, #4]
	lcd_printf("%d",speed);
 800ba10:	6879      	ldr	r1, [r7, #4]
 800ba12:	4828      	ldr	r0, [pc, #160]	; (800bab4 <adjust_spped_500+0xd0>)
 800ba14:	f7fd fa7e 	bl	8008f14 <lcd_printf>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800ba18:	e030      	b.n	800ba7c <adjust_spped_500+0x98>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ba20:	4825      	ldr	r0, [pc, #148]	; (800bab8 <adjust_spped_500+0xd4>)
 800ba22:	f004 fbd7 	bl	80101d4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_2)==0){
 800ba26:	2104      	movs	r1, #4
 800ba28:	4823      	ldr	r0, [pc, #140]	; (800bab8 <adjust_spped_500+0xd4>)
 800ba2a:	f004 fbbb 	bl	80101a4 <HAL_GPIO_ReadPin>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10a      	bne.n	800ba4a <adjust_spped_500+0x66>
			speed += 100;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	3364      	adds	r3, #100	; 0x64
 800ba38:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800ba3a:	2101      	movs	r1, #1
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	f7fd fa3f 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed);
 800ba42:	6879      	ldr	r1, [r7, #4]
 800ba44:	481b      	ldr	r0, [pc, #108]	; (800bab4 <adjust_spped_500+0xd0>)
 800ba46:	f7fd fa65 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800ba4a:	2064      	movs	r0, #100	; 0x64
 800ba4c:	f002 fe8c 	bl	800e768 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==0) {
 800ba50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ba54:	4818      	ldr	r0, [pc, #96]	; (800bab8 <adjust_spped_500+0xd4>)
 800ba56:	f004 fba5 	bl	80101a4 <HAL_GPIO_ReadPin>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10a      	bne.n	800ba76 <adjust_spped_500+0x92>
			speed -= 100;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	3b64      	subs	r3, #100	; 0x64
 800ba64:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800ba66:	2101      	movs	r1, #1
 800ba68:	2000      	movs	r0, #0
 800ba6a:	f7fd fa29 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed);
 800ba6e:	6879      	ldr	r1, [r7, #4]
 800ba70:	4810      	ldr	r0, [pc, #64]	; (800bab4 <adjust_spped_500+0xd0>)
 800ba72:	f7fd fa4f 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800ba76:	2064      	movs	r0, #100	; 0x64
 800ba78:	f002 fe76 	bl	800e768 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800ba7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ba80:	480d      	ldr	r0, [pc, #52]	; (800bab8 <adjust_spped_500+0xd4>)
 800ba82:	f004 fb8f 	bl	80101a4 <HAL_GPIO_ReadPin>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d0c6      	beq.n	800ba1a <adjust_spped_500+0x36>
		}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ba92:	4809      	ldr	r0, [pc, #36]	; (800bab8 <adjust_spped_500+0xd4>)
 800ba94:	f004 fb9e 	bl	80101d4 <HAL_GPIO_WritePin>
	work_ram[35]=speed;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	4b04      	ldr	r3, [pc, #16]	; (800bab0 <adjust_spped_500+0xcc>)
 800ba9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
}
 800baa2:	bf00      	nop
 800baa4:	3708      	adds	r7, #8
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	08016458 	.word	0x08016458
 800bab0:	2000c318 	.word	0x2000c318
 800bab4:	08016430 	.word	0x08016430
 800bab8:	40020800 	.word	0x40020800

0800babc <adjust_spped_800>:
void adjust_spped_800(){
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
	lcd_init();
 800bac2:	f7fd f9a9 	bl	8008e18 <lcd_init>
	lcd_clear();
 800bac6:	f7fd f9eb 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800baca:	2100      	movs	r1, #0
 800bacc:	2000      	movs	r0, #0
 800bace:	f7fd f9f7 	bl	8008ec0 <lcd_locate>
	lcd_printf("800");
 800bad2:	482c      	ldr	r0, [pc, #176]	; (800bb84 <adjust_spped_800+0xc8>)
 800bad4:	f7fd fa1e 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800bad8:	2101      	movs	r1, #1
 800bada:	2000      	movs	r0, #0
 800badc:	f7fd f9f0 	bl	8008ec0 <lcd_locate>
	uint speed= work_ram[36];
 800bae0:	4b29      	ldr	r3, [pc, #164]	; (800bb88 <adjust_spped_800+0xcc>)
 800bae2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bae6:	607b      	str	r3, [r7, #4]
	lcd_printf("%d",speed);
 800bae8:	6879      	ldr	r1, [r7, #4]
 800baea:	4828      	ldr	r0, [pc, #160]	; (800bb8c <adjust_spped_800+0xd0>)
 800baec:	f7fd fa12 	bl	8008f14 <lcd_printf>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800baf0:	e030      	b.n	800bb54 <adjust_spped_800+0x98>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800baf2:	2200      	movs	r2, #0
 800baf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800baf8:	4825      	ldr	r0, [pc, #148]	; (800bb90 <adjust_spped_800+0xd4>)
 800bafa:	f004 fb6b 	bl	80101d4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_2)==0){
 800bafe:	2104      	movs	r1, #4
 800bb00:	4823      	ldr	r0, [pc, #140]	; (800bb90 <adjust_spped_800+0xd4>)
 800bb02:	f004 fb4f 	bl	80101a4 <HAL_GPIO_ReadPin>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d10a      	bne.n	800bb22 <adjust_spped_800+0x66>
			speed += 100;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	3364      	adds	r3, #100	; 0x64
 800bb10:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800bb12:	2101      	movs	r1, #1
 800bb14:	2000      	movs	r0, #0
 800bb16:	f7fd f9d3 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed);
 800bb1a:	6879      	ldr	r1, [r7, #4]
 800bb1c:	481b      	ldr	r0, [pc, #108]	; (800bb8c <adjust_spped_800+0xd0>)
 800bb1e:	f7fd f9f9 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800bb22:	2064      	movs	r0, #100	; 0x64
 800bb24:	f002 fe20 	bl	800e768 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==0) {
 800bb28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb2c:	4818      	ldr	r0, [pc, #96]	; (800bb90 <adjust_spped_800+0xd4>)
 800bb2e:	f004 fb39 	bl	80101a4 <HAL_GPIO_ReadPin>
 800bb32:	4603      	mov	r3, r0
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d10a      	bne.n	800bb4e <adjust_spped_800+0x92>
			speed -= 100;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	3b64      	subs	r3, #100	; 0x64
 800bb3c:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800bb3e:	2101      	movs	r1, #1
 800bb40:	2000      	movs	r0, #0
 800bb42:	f7fd f9bd 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed);
 800bb46:	6879      	ldr	r1, [r7, #4]
 800bb48:	4810      	ldr	r0, [pc, #64]	; (800bb8c <adjust_spped_800+0xd0>)
 800bb4a:	f7fd f9e3 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800bb4e:	2064      	movs	r0, #100	; 0x64
 800bb50:	f002 fe0a 	bl	800e768 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800bb54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bb58:	480d      	ldr	r0, [pc, #52]	; (800bb90 <adjust_spped_800+0xd4>)
 800bb5a:	f004 fb23 	bl	80101a4 <HAL_GPIO_ReadPin>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d0c6      	beq.n	800baf2 <adjust_spped_800+0x36>
		}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800bb64:	2201      	movs	r2, #1
 800bb66:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bb6a:	4809      	ldr	r0, [pc, #36]	; (800bb90 <adjust_spped_800+0xd4>)
 800bb6c:	f004 fb32 	bl	80101d4 <HAL_GPIO_WritePin>
	work_ram[36]=speed;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	4b04      	ldr	r3, [pc, #16]	; (800bb88 <adjust_spped_800+0xcc>)
 800bb76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 800bb7a:	bf00      	nop
 800bb7c:	3708      	adds	r7, #8
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	0801645c 	.word	0x0801645c
 800bb88:	2000c318 	.word	0x2000c318
 800bb8c:	08016430 	.word	0x08016430
 800bb90:	40020800 	.word	0x40020800

0800bb94 <adjust_spped_1000>:
void adjust_spped_1000(){
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
	lcd_init();
 800bb9a:	f7fd f93d 	bl	8008e18 <lcd_init>
	lcd_clear();
 800bb9e:	f7fd f97f 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800bba2:	2100      	movs	r1, #0
 800bba4:	2000      	movs	r0, #0
 800bba6:	f7fd f98b 	bl	8008ec0 <lcd_locate>
	lcd_printf("1000");
 800bbaa:	482c      	ldr	r0, [pc, #176]	; (800bc5c <adjust_spped_1000+0xc8>)
 800bbac:	f7fd f9b2 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800bbb0:	2101      	movs	r1, #1
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	f7fd f984 	bl	8008ec0 <lcd_locate>
	uint speed= work_ram[37];
 800bbb8:	4b29      	ldr	r3, [pc, #164]	; (800bc60 <adjust_spped_1000+0xcc>)
 800bbba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bbbe:	607b      	str	r3, [r7, #4]
	lcd_printf("%d",speed);
 800bbc0:	6879      	ldr	r1, [r7, #4]
 800bbc2:	4828      	ldr	r0, [pc, #160]	; (800bc64 <adjust_spped_1000+0xd0>)
 800bbc4:	f7fd f9a6 	bl	8008f14 <lcd_printf>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800bbc8:	e030      	b.n	800bc2c <adjust_spped_1000+0x98>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bbd0:	4825      	ldr	r0, [pc, #148]	; (800bc68 <adjust_spped_1000+0xd4>)
 800bbd2:	f004 faff 	bl	80101d4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_2)==0){
 800bbd6:	2104      	movs	r1, #4
 800bbd8:	4823      	ldr	r0, [pc, #140]	; (800bc68 <adjust_spped_1000+0xd4>)
 800bbda:	f004 fae3 	bl	80101a4 <HAL_GPIO_ReadPin>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10a      	bne.n	800bbfa <adjust_spped_1000+0x66>
			speed += 100;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	3364      	adds	r3, #100	; 0x64
 800bbe8:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800bbea:	2101      	movs	r1, #1
 800bbec:	2000      	movs	r0, #0
 800bbee:	f7fd f967 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed);
 800bbf2:	6879      	ldr	r1, [r7, #4]
 800bbf4:	481b      	ldr	r0, [pc, #108]	; (800bc64 <adjust_spped_1000+0xd0>)
 800bbf6:	f7fd f98d 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800bbfa:	2064      	movs	r0, #100	; 0x64
 800bbfc:	f002 fdb4 	bl	800e768 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==0) {
 800bc00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bc04:	4818      	ldr	r0, [pc, #96]	; (800bc68 <adjust_spped_1000+0xd4>)
 800bc06:	f004 facd 	bl	80101a4 <HAL_GPIO_ReadPin>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d10a      	bne.n	800bc26 <adjust_spped_1000+0x92>
			speed -= 100;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	3b64      	subs	r3, #100	; 0x64
 800bc14:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800bc16:	2101      	movs	r1, #1
 800bc18:	2000      	movs	r0, #0
 800bc1a:	f7fd f951 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed);
 800bc1e:	6879      	ldr	r1, [r7, #4]
 800bc20:	4810      	ldr	r0, [pc, #64]	; (800bc64 <adjust_spped_1000+0xd0>)
 800bc22:	f7fd f977 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800bc26:	2064      	movs	r0, #100	; 0x64
 800bc28:	f002 fd9e 	bl	800e768 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800bc2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bc30:	480d      	ldr	r0, [pc, #52]	; (800bc68 <adjust_spped_1000+0xd4>)
 800bc32:	f004 fab7 	bl	80101a4 <HAL_GPIO_ReadPin>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	d0c6      	beq.n	800bbca <adjust_spped_1000+0x36>
		}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bc42:	4809      	ldr	r0, [pc, #36]	; (800bc68 <adjust_spped_1000+0xd4>)
 800bc44:	f004 fac6 	bl	80101d4 <HAL_GPIO_WritePin>
	work_ram[37]=speed;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	b29a      	uxth	r2, r3
 800bc4c:	4b04      	ldr	r3, [pc, #16]	; (800bc60 <adjust_spped_1000+0xcc>)
 800bc4e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
}
 800bc52:	bf00      	nop
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	08016460 	.word	0x08016460
 800bc60:	2000c318 	.word	0x2000c318
 800bc64:	08016430 	.word	0x08016430
 800bc68:	40020800 	.word	0x40020800

0800bc6c <adjust_spped_MAX>:
void adjust_spped_MAX(){
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
	lcd_init();
 800bc72:	f7fd f8d1 	bl	8008e18 <lcd_init>
	lcd_clear();
 800bc76:	f7fd f913 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	2000      	movs	r0, #0
 800bc7e:	f7fd f91f 	bl	8008ec0 <lcd_locate>
	lcd_printf("MAX");
 800bc82:	482c      	ldr	r0, [pc, #176]	; (800bd34 <adjust_spped_MAX+0xc8>)
 800bc84:	f7fd f946 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800bc88:	2101      	movs	r1, #1
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	f7fd f918 	bl	8008ec0 <lcd_locate>
	uint speed= work_ram[38];
 800bc90:	4b29      	ldr	r3, [pc, #164]	; (800bd38 <adjust_spped_MAX+0xcc>)
 800bc92:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800bc96:	607b      	str	r3, [r7, #4]
	lcd_printf("%d",speed);
 800bc98:	6879      	ldr	r1, [r7, #4]
 800bc9a:	4828      	ldr	r0, [pc, #160]	; (800bd3c <adjust_spped_MAX+0xd0>)
 800bc9c:	f7fd f93a 	bl	8008f14 <lcd_printf>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800bca0:	e030      	b.n	800bd04 <adjust_spped_MAX+0x98>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800bca2:	2200      	movs	r2, #0
 800bca4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bca8:	4825      	ldr	r0, [pc, #148]	; (800bd40 <adjust_spped_MAX+0xd4>)
 800bcaa:	f004 fa93 	bl	80101d4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_2)==0){
 800bcae:	2104      	movs	r1, #4
 800bcb0:	4823      	ldr	r0, [pc, #140]	; (800bd40 <adjust_spped_MAX+0xd4>)
 800bcb2:	f004 fa77 	bl	80101a4 <HAL_GPIO_ReadPin>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d10a      	bne.n	800bcd2 <adjust_spped_MAX+0x66>
			speed += 100;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	3364      	adds	r3, #100	; 0x64
 800bcc0:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800bcc2:	2101      	movs	r1, #1
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	f7fd f8fb 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed);
 800bcca:	6879      	ldr	r1, [r7, #4]
 800bccc:	481b      	ldr	r0, [pc, #108]	; (800bd3c <adjust_spped_MAX+0xd0>)
 800bcce:	f7fd f921 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800bcd2:	2064      	movs	r0, #100	; 0x64
 800bcd4:	f002 fd48 	bl	800e768 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==0) {
 800bcd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bcdc:	4818      	ldr	r0, [pc, #96]	; (800bd40 <adjust_spped_MAX+0xd4>)
 800bcde:	f004 fa61 	bl	80101a4 <HAL_GPIO_ReadPin>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10a      	bne.n	800bcfe <adjust_spped_MAX+0x92>
			speed -= 100;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	3b64      	subs	r3, #100	; 0x64
 800bcec:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800bcee:	2101      	movs	r1, #1
 800bcf0:	2000      	movs	r0, #0
 800bcf2:	f7fd f8e5 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed);
 800bcf6:	6879      	ldr	r1, [r7, #4]
 800bcf8:	4810      	ldr	r0, [pc, #64]	; (800bd3c <adjust_spped_MAX+0xd0>)
 800bcfa:	f7fd f90b 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800bcfe:	2064      	movs	r0, #100	; 0x64
 800bd00:	f002 fd32 	bl	800e768 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800bd04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bd08:	480d      	ldr	r0, [pc, #52]	; (800bd40 <adjust_spped_MAX+0xd4>)
 800bd0a:	f004 fa4b 	bl	80101a4 <HAL_GPIO_ReadPin>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d0c6      	beq.n	800bca2 <adjust_spped_MAX+0x36>
		}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800bd14:	2201      	movs	r2, #1
 800bd16:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bd1a:	4809      	ldr	r0, [pc, #36]	; (800bd40 <adjust_spped_MAX+0xd4>)
 800bd1c:	f004 fa5a 	bl	80101d4 <HAL_GPIO_WritePin>
	work_ram[38]=speed;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	b29a      	uxth	r2, r3
 800bd24:	4b04      	ldr	r3, [pc, #16]	; (800bd38 <adjust_spped_MAX+0xcc>)
 800bd26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800bd2a:	bf00      	nop
 800bd2c:	3708      	adds	r7, #8
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	08016468 	.word	0x08016468
 800bd38:	2000c318 	.word	0x2000c318
 800bd3c:	08016430 	.word	0x08016430
 800bd40:	40020800 	.word	0x40020800

0800bd44 <speed_tuning>:
void speed_tuning(){
 800bd44:	b580      	push	{r7, lr}
 800bd46:	af00      	add	r7, sp, #0
	adjust_spped_100();
 800bd48:	f7ff fd74 	bl	800b834 <adjust_spped_100>
	HAL_Delay(100);
 800bd4c:	2064      	movs	r0, #100	; 0x64
 800bd4e:	f002 fd0b 	bl	800e768 <HAL_Delay>
	adjust_spped_300();
 800bd52:	f7ff fddb 	bl	800b90c <adjust_spped_300>
	HAL_Delay(100);
 800bd56:	2064      	movs	r0, #100	; 0x64
 800bd58:	f002 fd06 	bl	800e768 <HAL_Delay>
	adjust_spped_500();
 800bd5c:	f7ff fe42 	bl	800b9e4 <adjust_spped_500>
	HAL_Delay(100);
 800bd60:	2064      	movs	r0, #100	; 0x64
 800bd62:	f002 fd01 	bl	800e768 <HAL_Delay>
	adjust_spped_800();
 800bd66:	f7ff fea9 	bl	800babc <adjust_spped_800>
	HAL_Delay(100);
 800bd6a:	2064      	movs	r0, #100	; 0x64
 800bd6c:	f002 fcfc 	bl	800e768 <HAL_Delay>
	adjust_spped_1000();
 800bd70:	f7ff ff10 	bl	800bb94 <adjust_spped_1000>
	HAL_Delay(100);
 800bd74:	2064      	movs	r0, #100	; 0x64
 800bd76:	f002 fcf7 	bl	800e768 <HAL_Delay>
	adjust_spped_MAX();
 800bd7a:	f7ff ff77 	bl	800bc6c <adjust_spped_MAX>
	HAL_Delay(100);
 800bd7e:	2064      	movs	r0, #100	; 0x64
 800bd80:	f002 fcf2 	bl	800e768 <HAL_Delay>

	Flash_store();
 800bd84:	f000 f866 	bl	800be54 <Flash_store>
	lcd_clear();
 800bd88:	f7fd f88a 	bl	8008ea0 <lcd_clear>
}
 800bd8c:	bf00      	nop
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <Flash_clear>:




bool Flash_clear()
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b088      	sub	sp, #32
 800bd94:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800bd96:	f003 fde9 	bl	800f96c <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800bda2:	2302      	movs	r3, #2
 800bda4:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800bda6:	2301      	movs	r3, #1
 800bda8:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入る
    // 正常にEraseができたときは0xFFFFFFFFが入る
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800bdaa:	1d3a      	adds	r2, r7, #4
 800bdac:	f107 0308 	add.w	r3, r7, #8
 800bdb0:	4611      	mov	r1, r2
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f003 ff3a 	bl	800fc2c <HAL_FLASHEx_Erase>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 800bdbc:	f003 fdf8 	bl	800f9b0 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800bdc0:	7ffb      	ldrb	r3, [r7, #31]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d105      	bne.n	800bdd2 <Flash_clear+0x42>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdcc:	d101      	bne.n	800bdd2 <Flash_clear+0x42>
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e000      	b.n	800bdd4 <Flash_clear+0x44>
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	f003 0301 	and.w	r3, r3, #1
 800bdd8:	b2db      	uxtb	r3, r3
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3720      	adds	r7, #32
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}

0800bde2 <Flash_clear2>:
bool Flash_clear2()
{
 800bde2:	b580      	push	{r7, lr}
 800bde4:	b088      	sub	sp, #32
 800bde6:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800bde8:	f003 fdc0 	bl	800f96c <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800bdec:	2300      	movs	r3, #0
 800bdee:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM2;
 800bdf0:	2306      	movs	r3, #6
 800bdf2:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800bdf4:	2302      	movs	r3, #2
 800bdf6:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 6;
 800bdf8:	2306      	movs	r3, #6
 800bdfa:	617b      	str	r3, [r7, #20]


    // Eraseに失敗したsector番号がerror_sectorに入る
    // 正常にEraseができたときは0xFFFFFFFFが入る
    uint32_t error_sector;
    HAL_StatusTypeDef result2 = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800bdfc:	1d3a      	adds	r2, r7, #4
 800bdfe:	f107 0308 	add.w	r3, r7, #8
 800be02:	4611      	mov	r1, r2
 800be04:	4618      	mov	r0, r3
 800be06:	f003 ff11 	bl	800fc2c <HAL_FLASHEx_Erase>
 800be0a:	4603      	mov	r3, r0
 800be0c:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 800be0e:	f003 fdcf 	bl	800f9b0 <HAL_FLASH_Lock>

    return result2 == HAL_OK && error_sector == 0xFFFFFFFF;
 800be12:	7ffb      	ldrb	r3, [r7, #31]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d105      	bne.n	800be24 <Flash_clear2+0x42>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be1e:	d101      	bne.n	800be24 <Flash_clear2+0x42>
 800be20:	2301      	movs	r3, #1
 800be22:	e000      	b.n	800be26 <Flash_clear2+0x44>
 800be24:	2300      	movs	r3, #0
 800be26:	f003 0301 	and.w	r3, r3, #1
 800be2a:	b2db      	uxtb	r3, r3
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3720      	adds	r7, #32
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <Flash_load>:

uint16_t* Flash_load()
{
 800be34:	b580      	push	{r7, lr}
 800be36:	af00      	add	r7, sp, #0
    memcpy(work_ram, &_backup_flash_start, BACKUP_FLASH_SECTOR_SIZE);
 800be38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800be3c:	4903      	ldr	r1, [pc, #12]	; (800be4c <Flash_load+0x18>)
 800be3e:	4804      	ldr	r0, [pc, #16]	; (800be50 <Flash_load+0x1c>)
 800be40:	f007 fdc4 	bl	80139cc <memcpy>
    return work_ram;
 800be44:	4b02      	ldr	r3, [pc, #8]	; (800be50 <Flash_load+0x1c>)
}
 800be46:	4618      	mov	r0, r3
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	08004000 	.word	0x08004000
 800be50:	2000c318 	.word	0x2000c318

0800be54 <Flash_store>:

bool Flash_store()
{
 800be54:	b590      	push	{r4, r7, lr}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
    // Flashをclear
    if (!Flash_clear()) return false;
 800be5a:	f7ff ff99 	bl	800bd90 <Flash_clear>
 800be5e:	4603      	mov	r3, r0
 800be60:	f083 0301 	eor.w	r3, r3, #1
 800be64:	b2db      	uxtb	r3, r3
 800be66:	2b00      	cmp	r3, #0
 800be68:	d001      	beq.n	800be6e <Flash_store+0x1a>
 800be6a:	2300      	movs	r3, #0
 800be6c:	e02f      	b.n	800bece <Flash_store+0x7a>

    uint32_t *p_work_ram = (uint32_t*)work_ram;
 800be6e:	4b1a      	ldr	r3, [pc, #104]	; (800bed8 <Flash_store+0x84>)
 800be70:	607b      	str	r3, [r7, #4]

    HAL_FLASH_Unlock();
 800be72:	f003 fd7b 	bl	800f96c <HAL_FLASH_Unlock>

    // work_ramにあるデータを4バイトごとまとめて書き込む
    HAL_StatusTypeDef result;
    const size_t write_cnt = BACKUP_FLASH_SECTOR_SIZE / sizeof(uint32_t);
 800be76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be7a:	603b      	str	r3, [r7, #0]

    for (size_t i=0; i<write_cnt; i++)
 800be7c:	2300      	movs	r3, #0
 800be7e:	60bb      	str	r3, [r7, #8]
 800be80:	e017      	b.n	800beb2 <Flash_store+0x5e>
    {
        result = HAL_FLASH_Program(
                    FLASH_TYPEPROGRAM_WORD,
                    (uint32_t)(&_backup_flash_start) + sizeof(uint32_t) * i,
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	4a15      	ldr	r2, [pc, #84]	; (800bedc <Flash_store+0x88>)
        result = HAL_FLASH_Program(
 800be88:	1899      	adds	r1, r3, r2
                    p_work_ram[i]
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	4413      	add	r3, r2
 800be92:	681b      	ldr	r3, [r3, #0]
        result = HAL_FLASH_Program(
 800be94:	f04f 0400 	mov.w	r4, #0
 800be98:	461a      	mov	r2, r3
 800be9a:	4623      	mov	r3, r4
 800be9c:	2002      	movs	r0, #2
 800be9e:	f003 fd11 	bl	800f8c4 <HAL_FLASH_Program>
 800bea2:	4603      	mov	r3, r0
 800bea4:	73fb      	strb	r3, [r7, #15]
                );
        if (result != HAL_OK) break;
 800bea6:	7bfb      	ldrb	r3, [r7, #15]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d107      	bne.n	800bebc <Flash_store+0x68>
    for (size_t i=0; i<write_cnt; i++)
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	3301      	adds	r3, #1
 800beb0:	60bb      	str	r3, [r7, #8]
 800beb2:	68ba      	ldr	r2, [r7, #8]
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d3e3      	bcc.n	800be82 <Flash_store+0x2e>
 800beba:	e000      	b.n	800bebe <Flash_store+0x6a>
        if (result != HAL_OK) break;
 800bebc:	bf00      	nop
    }

    HAL_FLASH_Lock();
 800bebe:	f003 fd77 	bl	800f9b0 <HAL_FLASH_Lock>

    return result == HAL_OK;
 800bec2:	7bfb      	ldrb	r3, [r7, #15]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	bf0c      	ite	eq
 800bec8:	2301      	moveq	r3, #1
 800beca:	2300      	movne	r3, #0
 800becc:	b2db      	uxtb	r3, r3
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3714      	adds	r7, #20
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd90      	pop	{r4, r7, pc}
 800bed6:	bf00      	nop
 800bed8:	2000c318 	.word	0x2000c318
 800bedc:	08004000 	.word	0x08004000

0800bee0 <init>:
uint8_t maker_left;
uint8_t maker_flag=0;
uint8_t cross_flag=0;
uint8_t error_count=0;
void MX_TIM6_Init(void);
void init(){
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0

	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, SENSOR_NUMBER) != HAL_OK){
 800bee6:	220d      	movs	r2, #13
 800bee8:	4959      	ldr	r1, [pc, #356]	; (800c050 <init+0x170>)
 800beea:	485a      	ldr	r0, [pc, #360]	; (800c054 <init+0x174>)
 800beec:	f002 fca2 	bl	800e834 <HAL_ADC_Start_DMA>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d001      	beq.n	800befa <init+0x1a>
	  Error_Handler();
 800bef6:	f001 fc59 	bl	800d7ac <Error_Handler>
	}

	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK){
 800befa:	2104      	movs	r1, #4
 800befc:	4856      	ldr	r0, [pc, #344]	; (800c058 <init+0x178>)
 800befe:	f005 fff9 	bl	8011ef4 <HAL_TIM_PWM_Start>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d001      	beq.n	800bf0c <init+0x2c>
		  Error_Handler();
 800bf08:	f001 fc50 	bl	800d7ac <Error_Handler>
	}
	if (HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3) != HAL_OK){
 800bf0c:	2108      	movs	r1, #8
 800bf0e:	4853      	ldr	r0, [pc, #332]	; (800c05c <init+0x17c>)
 800bf10:	f005 fff0 	bl	8011ef4 <HAL_TIM_PWM_Start>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d001      	beq.n	800bf1e <init+0x3e>
	      Error_Handler();
 800bf1a:	f001 fc47 	bl	800d7ac <Error_Handler>
	}

	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3) != HAL_OK){
 800bf1e:	2108      	movs	r1, #8
 800bf20:	484f      	ldr	r0, [pc, #316]	; (800c060 <init+0x180>)
 800bf22:	f005 ffe7 	bl	8011ef4 <HAL_TIM_PWM_Start>
 800bf26:	4603      	mov	r3, r0
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d001      	beq.n	800bf30 <init+0x50>
		  Error_Handler();
 800bf2c:	f001 fc3e 	bl	800d7ac <Error_Handler>
	}
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK){
 800bf30:	210c      	movs	r1, #12
 800bf32:	484b      	ldr	r0, [pc, #300]	; (800c060 <init+0x180>)
 800bf34:	f005 ffde 	bl	8011ef4 <HAL_TIM_PWM_Start>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d001      	beq.n	800bf42 <init+0x62>
		  Error_Handler();
 800bf3e:	f001 fc35 	bl	800d7ac <Error_Handler>
	}
	lcd_init();
 800bf42:	f7fc ff69 	bl	8008e18 <lcd_init>
	lcd_clear();
 800bf46:	f7fc ffab 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800bf4a:	2100      	movs	r1, #0
 800bf4c:	2000      	movs	r0, #0
 800bf4e:	f7fc ffb7 	bl	8008ec0 <lcd_locate>
	lcd_printf("OK");
 800bf52:	4844      	ldr	r0, [pc, #272]	; (800c064 <init+0x184>)
 800bf54:	f7fc ffde 	bl	8008f14 <lcd_printf>

	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800bf58:	213c      	movs	r1, #60	; 0x3c
 800bf5a:	4843      	ldr	r0, [pc, #268]	; (800c068 <init+0x188>)
 800bf5c:	f006 f89a 	bl	8012094 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800bf60:	213c      	movs	r1, #60	; 0x3c
 800bf62:	4842      	ldr	r0, [pc, #264]	; (800c06c <init+0x18c>)
 800bf64:	f006 f896 	bl	8012094 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_ALL);
 800bf68:	213c      	movs	r1, #60	; 0x3c
 800bf6a:	483b      	ldr	r0, [pc, #236]	; (800c058 <init+0x178>)
 800bf6c:	f005 ffc2 	bl	8011ef4 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_ALL);
 800bf70:	213c      	movs	r1, #60	; 0x3c
 800bf72:	483a      	ldr	r0, [pc, #232]	; (800c05c <init+0x17c>)
 800bf74:	f005 ffbe 	bl	8011ef4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_ALL);
 800bf78:	213c      	movs	r1, #60	; 0x3c
 800bf7a:	4839      	ldr	r0, [pc, #228]	; (800c060 <init+0x180>)
 800bf7c:	f005 ffba 	bl	8011ef4 <HAL_TIM_PWM_Start>

	Flash_load();
 800bf80:	f7ff ff58 	bl	800be34 <Flash_load>
	for(int z=0;z<SENSOR_NUMBER;z++){
 800bf84:	2300      	movs	r3, #0
 800bf86:	607b      	str	r3, [r7, #4]
 800bf88:	e013      	b.n	800bfb2 <init+0xd2>
		ADC_dif[z] = work_ram[z];
 800bf8a:	4a39      	ldr	r2, [pc, #228]	; (800c070 <init+0x190>)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800bf92:	4a38      	ldr	r2, [pc, #224]	; (800c074 <init+0x194>)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ADC_Small[z]=work_ram[z+SENSOR_NUMBER];
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	330d      	adds	r3, #13
 800bf9e:	4a34      	ldr	r2, [pc, #208]	; (800c070 <init+0x190>)
 800bfa0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800bfa4:	4a34      	ldr	r2, [pc, #208]	; (800c078 <init+0x198>)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int z=0;z<SENSOR_NUMBER;z++){
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	3301      	adds	r3, #1
 800bfb0:	607b      	str	r3, [r7, #4]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2b0c      	cmp	r3, #12
 800bfb6:	dde8      	ble.n	800bf8a <init+0xaa>
	}
	flashcheck();
 800bfb8:	f000 fb38 	bl	800c62c <flashcheck>
	Average_speed=work_ram[26];
 800bfbc:	4b2c      	ldr	r3, [pc, #176]	; (800c070 <init+0x190>)
 800bfbe:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bfc0:	b21a      	sxth	r2, r3
 800bfc2:	4b2e      	ldr	r3, [pc, #184]	; (800c07c <init+0x19c>)
 800bfc4:	801a      	strh	r2, [r3, #0]
	Kp = work_ram[27];
 800bfc6:	4b2a      	ldr	r3, [pc, #168]	; (800c070 <init+0x190>)
 800bfc8:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800bfca:	4b2d      	ldr	r3, [pc, #180]	; (800c080 <init+0x1a0>)
 800bfcc:	801a      	strh	r2, [r3, #0]
	Ki = work_ram[28];
 800bfce:	4b28      	ldr	r3, [pc, #160]	; (800c070 <init+0x190>)
 800bfd0:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800bfd2:	4b2c      	ldr	r3, [pc, #176]	; (800c084 <init+0x1a4>)
 800bfd4:	801a      	strh	r2, [r3, #0]
	Kd = work_ram[29];
 800bfd6:	4b26      	ldr	r3, [pc, #152]	; (800c070 <init+0x190>)
 800bfd8:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800bfda:	4b2b      	ldr	r3, [pc, #172]	; (800c088 <init+0x1a8>)
 800bfdc:	801a      	strh	r2, [r3, #0]

	ang_average = work_ram[30]/1000;
 800bfde:	4b24      	ldr	r3, [pc, #144]	; (800c070 <init+0x190>)
 800bfe0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bfe2:	4a2a      	ldr	r2, [pc, #168]	; (800c08c <init+0x1ac>)
 800bfe4:	fba2 2303 	umull	r2, r3, r2, r3
 800bfe8:	099b      	lsrs	r3, r3, #6
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	ee07 3a90 	vmov	s15, r3
 800bff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bff4:	4b26      	ldr	r3, [pc, #152]	; (800c090 <init+0x1b0>)
 800bff6:	edc3 7a00 	vstr	s15, [r3]
	if(ang_average>=50) ang_average = (ang_average*-1)/100;
 800bffa:	4b25      	ldr	r3, [pc, #148]	; (800c090 <init+0x1b0>)
 800bffc:	edd3 7a00 	vldr	s15, [r3]
 800c000:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800c094 <init+0x1b4>
 800c004:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c00c:	db0b      	blt.n	800c026 <init+0x146>
 800c00e:	4b20      	ldr	r3, [pc, #128]	; (800c090 <init+0x1b0>)
 800c010:	edd3 7a00 	vldr	s15, [r3]
 800c014:	eeb1 7a67 	vneg.f32	s14, s15
 800c018:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800c098 <init+0x1b8>
 800c01c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c020:	4b1b      	ldr	r3, [pc, #108]	; (800c090 <init+0x1b0>)
 800c022:	edc3 7a00 	vstr	s15, [r3]
	Accm = work_ram[31];
 800c026:	4b12      	ldr	r3, [pc, #72]	; (800c070 <init+0x190>)
 800c028:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800c02a:	4b1c      	ldr	r3, [pc, #112]	; (800c09c <init+0x1bc>)
 800c02c:	801a      	strh	r2, [r3, #0]
	Decm = work_ram[32];
 800c02e:	4b10      	ldr	r3, [pc, #64]	; (800c070 <init+0x190>)
 800c030:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800c034:	4b1a      	ldr	r3, [pc, #104]	; (800c0a0 <init+0x1c0>)
 800c036:	801a      	strh	r2, [r3, #0]

	TIM4 -> CNT = 32768;
 800c038:	4b1a      	ldr	r3, [pc, #104]	; (800c0a4 <init+0x1c4>)
 800c03a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c03e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3 -> CNT = 32768;
 800c040:	4b19      	ldr	r3, [pc, #100]	; (800c0a8 <init+0x1c8>)
 800c042:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c046:	625a      	str	r2, [r3, #36]	; 0x24

}
 800c048:	bf00      	nop
 800c04a:	3708      	adds	r7, #8
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	20014318 	.word	0x20014318
 800c054:	200143f8 	.word	0x200143f8
 800c058:	200144e4 	.word	0x200144e4
 800c05c:	20014334 	.word	0x20014334
 800c060:	20014524 	.word	0x20014524
 800c064:	0801646c 	.word	0x0801646c
 800c068:	20014374 	.word	0x20014374
 800c06c:	200143b8 	.word	0x200143b8
 800c070:	2000c318 	.word	0x2000c318
 800c074:	20014658 	.word	0x20014658
 800c078:	20014674 	.word	0x20014674
 800c07c:	20014332 	.word	0x20014332
 800c080:	2000c310 	.word	0x2000c310
 800c084:	2000c30c 	.word	0x2000c30c
 800c088:	2000c30e 	.word	0x2000c30e
 800c08c:	10624dd3 	.word	0x10624dd3
 800c090:	2000c2a0 	.word	0x2000c2a0
 800c094:	42480000 	.word	0x42480000
 800c098:	42c80000 	.word	0x42c80000
 800c09c:	2000c314 	.word	0x2000c314
 800c0a0:	2000c312 	.word	0x2000c312
 800c0a4:	40000800 	.word	0x40000800
 800c0a8:	40000400 	.word	0x40000400

0800c0ac <LED>:
void LED(uint8_t x){
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	71fb      	strb	r3, [r7, #7]
	switch(x){
 800c0b6:	79fb      	ldrb	r3, [r7, #7]
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	2b07      	cmp	r3, #7
 800c0bc:	f200 80ac 	bhi.w	800c218 <LED+0x16c>
 800c0c0:	a201      	add	r2, pc, #4	; (adr r2, 800c0c8 <LED+0x1c>)
 800c0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c6:	bf00      	nop
 800c0c8:	0800c0e9 	.word	0x0800c0e9
 800c0cc:	0800c10f 	.word	0x0800c10f
 800c0d0:	0800c135 	.word	0x0800c135
 800c0d4:	0800c15b 	.word	0x0800c15b
 800c0d8:	0800c181 	.word	0x0800c181
 800c0dc:	0800c1a7 	.word	0x0800c1a7
 800c0e0:	0800c1cd 	.word	0x0800c1cd
 800c0e4:	0800c1f3 	.word	0x0800c1f3
		case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c0ee:	484c      	ldr	r0, [pc, #304]	; (800c220 <LED+0x174>)
 800c0f0:	f004 f870 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c0fa:	4849      	ldr	r0, [pc, #292]	; (800c220 <LED+0x174>)
 800c0fc:	f004 f86a 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800c100:	2201      	movs	r2, #1
 800c102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c106:	4846      	ldr	r0, [pc, #280]	; (800c220 <LED+0x174>)
 800c108:	f004 f864 	bl	80101d4 <HAL_GPIO_WritePin>
			break;
 800c10c:	e084      	b.n	800c218 <LED+0x16c>
		case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800c10e:	2201      	movs	r2, #1
 800c110:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c114:	4842      	ldr	r0, [pc, #264]	; (800c220 <LED+0x174>)
 800c116:	f004 f85d 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800c11a:	2200      	movs	r2, #0
 800c11c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c120:	483f      	ldr	r0, [pc, #252]	; (800c220 <LED+0x174>)
 800c122:	f004 f857 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800c126:	2201      	movs	r2, #1
 800c128:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c12c:	483c      	ldr	r0, [pc, #240]	; (800c220 <LED+0x174>)
 800c12e:	f004 f851 	bl	80101d4 <HAL_GPIO_WritePin>
			break;
 800c132:	e071      	b.n	800c218 <LED+0x16c>
		case 3:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800c134:	2200      	movs	r2, #0
 800c136:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c13a:	4839      	ldr	r0, [pc, #228]	; (800c220 <LED+0x174>)
 800c13c:	f004 f84a 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800c140:	2200      	movs	r2, #0
 800c142:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c146:	4836      	ldr	r0, [pc, #216]	; (800c220 <LED+0x174>)
 800c148:	f004 f844 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800c14c:	2201      	movs	r2, #1
 800c14e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c152:	4833      	ldr	r0, [pc, #204]	; (800c220 <LED+0x174>)
 800c154:	f004 f83e 	bl	80101d4 <HAL_GPIO_WritePin>
			break;
 800c158:	e05e      	b.n	800c218 <LED+0x16c>
		case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800c15a:	2201      	movs	r2, #1
 800c15c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c160:	482f      	ldr	r0, [pc, #188]	; (800c220 <LED+0x174>)
 800c162:	f004 f837 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800c166:	2201      	movs	r2, #1
 800c168:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c16c:	482c      	ldr	r0, [pc, #176]	; (800c220 <LED+0x174>)
 800c16e:	f004 f831 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800c172:	2200      	movs	r2, #0
 800c174:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c178:	4829      	ldr	r0, [pc, #164]	; (800c220 <LED+0x174>)
 800c17a:	f004 f82b 	bl	80101d4 <HAL_GPIO_WritePin>
			break;
 800c17e:	e04b      	b.n	800c218 <LED+0x16c>
		case 5:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800c180:	2200      	movs	r2, #0
 800c182:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c186:	4826      	ldr	r0, [pc, #152]	; (800c220 <LED+0x174>)
 800c188:	f004 f824 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800c18c:	2201      	movs	r2, #1
 800c18e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c192:	4823      	ldr	r0, [pc, #140]	; (800c220 <LED+0x174>)
 800c194:	f004 f81e 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800c198:	2200      	movs	r2, #0
 800c19a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c19e:	4820      	ldr	r0, [pc, #128]	; (800c220 <LED+0x174>)
 800c1a0:	f004 f818 	bl	80101d4 <HAL_GPIO_WritePin>
			break;
 800c1a4:	e038      	b.n	800c218 <LED+0x16c>
		case 6:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c1ac:	481c      	ldr	r0, [pc, #112]	; (800c220 <LED+0x174>)
 800c1ae:	f004 f811 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c1b8:	4819      	ldr	r0, [pc, #100]	; (800c220 <LED+0x174>)
 800c1ba:	f004 f80b 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c1c4:	4816      	ldr	r0, [pc, #88]	; (800c220 <LED+0x174>)
 800c1c6:	f004 f805 	bl	80101d4 <HAL_GPIO_WritePin>
			break;
 800c1ca:	e025      	b.n	800c218 <LED+0x16c>
		case 7:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c1d2:	4813      	ldr	r0, [pc, #76]	; (800c220 <LED+0x174>)
 800c1d4:	f003 fffe 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800c1d8:	2200      	movs	r2, #0
 800c1da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c1de:	4810      	ldr	r0, [pc, #64]	; (800c220 <LED+0x174>)
 800c1e0:	f003 fff8 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c1ea:	480d      	ldr	r0, [pc, #52]	; (800c220 <LED+0x174>)
 800c1ec:	f003 fff2 	bl	80101d4 <HAL_GPIO_WritePin>
			break;
 800c1f0:	e012      	b.n	800c218 <LED+0x16c>
		case 8:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c1f8:	4809      	ldr	r0, [pc, #36]	; (800c220 <LED+0x174>)
 800c1fa:	f003 ffeb 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800c1fe:	2201      	movs	r2, #1
 800c200:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c204:	4806      	ldr	r0, [pc, #24]	; (800c220 <LED+0x174>)
 800c206:	f003 ffe5 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800c20a:	2201      	movs	r2, #1
 800c20c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c210:	4803      	ldr	r0, [pc, #12]	; (800c220 <LED+0x174>)
 800c212:	f003 ffdf 	bl	80101d4 <HAL_GPIO_WritePin>
			break;
 800c216:	bf00      	nop

	}

}
 800c218:	bf00      	nop
 800c21a:	3708      	adds	r7, #8
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}
 800c220:	40020400 	.word	0x40020400

0800c224 <LED2>:
void LED2(uint8_t x){
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	4603      	mov	r3, r0
 800c22c:	71fb      	strb	r3, [r7, #7]
	switch(x){
 800c22e:	79fb      	ldrb	r3, [r7, #7]
 800c230:	3b01      	subs	r3, #1
 800c232:	2b07      	cmp	r3, #7
 800c234:	f200 809c 	bhi.w	800c370 <LED2+0x14c>
 800c238:	a201      	add	r2, pc, #4	; (adr r2, 800c240 <LED2+0x1c>)
 800c23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c23e:	bf00      	nop
 800c240:	0800c261 	.word	0x0800c261
 800c244:	0800c283 	.word	0x0800c283
 800c248:	0800c2a5 	.word	0x0800c2a5
 800c24c:	0800c2c7 	.word	0x0800c2c7
 800c250:	0800c2e9 	.word	0x0800c2e9
 800c254:	0800c30b 	.word	0x0800c30b
 800c258:	0800c32d 	.word	0x0800c32d
 800c25c:	0800c34f 	.word	0x0800c34f
		case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800c260:	2200      	movs	r2, #0
 800c262:	2120      	movs	r1, #32
 800c264:	4844      	ldr	r0, [pc, #272]	; (800c378 <LED2+0x154>)
 800c266:	f003 ffb5 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800c26a:	2201      	movs	r2, #1
 800c26c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c270:	4842      	ldr	r0, [pc, #264]	; (800c37c <LED2+0x158>)
 800c272:	f003 ffaf 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800c276:	2201      	movs	r2, #1
 800c278:	2110      	movs	r1, #16
 800c27a:	483f      	ldr	r0, [pc, #252]	; (800c378 <LED2+0x154>)
 800c27c:	f003 ffaa 	bl	80101d4 <HAL_GPIO_WritePin>
			break;
 800c280:	e076      	b.n	800c370 <LED2+0x14c>
		case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800c282:	2201      	movs	r2, #1
 800c284:	2120      	movs	r1, #32
 800c286:	483c      	ldr	r0, [pc, #240]	; (800c378 <LED2+0x154>)
 800c288:	f003 ffa4 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800c28c:	2200      	movs	r2, #0
 800c28e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c292:	483a      	ldr	r0, [pc, #232]	; (800c37c <LED2+0x158>)
 800c294:	f003 ff9e 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800c298:	2201      	movs	r2, #1
 800c29a:	2110      	movs	r1, #16
 800c29c:	4836      	ldr	r0, [pc, #216]	; (800c378 <LED2+0x154>)
 800c29e:	f003 ff99 	bl	80101d4 <HAL_GPIO_WritePin>
			break;
 800c2a2:	e065      	b.n	800c370 <LED2+0x14c>
		case 3:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	2120      	movs	r1, #32
 800c2a8:	4833      	ldr	r0, [pc, #204]	; (800c378 <LED2+0x154>)
 800c2aa:	f003 ff93 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c2b4:	4831      	ldr	r0, [pc, #196]	; (800c37c <LED2+0x158>)
 800c2b6:	f003 ff8d 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	2110      	movs	r1, #16
 800c2be:	482e      	ldr	r0, [pc, #184]	; (800c378 <LED2+0x154>)
 800c2c0:	f003 ff88 	bl	80101d4 <HAL_GPIO_WritePin>
			break;
 800c2c4:	e054      	b.n	800c370 <LED2+0x14c>
		case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	2120      	movs	r1, #32
 800c2ca:	482b      	ldr	r0, [pc, #172]	; (800c378 <LED2+0x154>)
 800c2cc:	f003 ff82 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c2d6:	4829      	ldr	r0, [pc, #164]	; (800c37c <LED2+0x158>)
 800c2d8:	f003 ff7c 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800c2dc:	2200      	movs	r2, #0
 800c2de:	2110      	movs	r1, #16
 800c2e0:	4825      	ldr	r0, [pc, #148]	; (800c378 <LED2+0x154>)
 800c2e2:	f003 ff77 	bl	80101d4 <HAL_GPIO_WritePin>
			break;
 800c2e6:	e043      	b.n	800c370 <LED2+0x14c>
		case 5:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	2120      	movs	r1, #32
 800c2ec:	4822      	ldr	r0, [pc, #136]	; (800c378 <LED2+0x154>)
 800c2ee:	f003 ff71 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c2f8:	4820      	ldr	r0, [pc, #128]	; (800c37c <LED2+0x158>)
 800c2fa:	f003 ff6b 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800c2fe:	2200      	movs	r2, #0
 800c300:	2110      	movs	r1, #16
 800c302:	481d      	ldr	r0, [pc, #116]	; (800c378 <LED2+0x154>)
 800c304:	f003 ff66 	bl	80101d4 <HAL_GPIO_WritePin>
			break;
 800c308:	e032      	b.n	800c370 <LED2+0x14c>
		case 6:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800c30a:	2201      	movs	r2, #1
 800c30c:	2120      	movs	r1, #32
 800c30e:	481a      	ldr	r0, [pc, #104]	; (800c378 <LED2+0x154>)
 800c310:	f003 ff60 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800c314:	2200      	movs	r2, #0
 800c316:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c31a:	4818      	ldr	r0, [pc, #96]	; (800c37c <LED2+0x158>)
 800c31c:	f003 ff5a 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800c320:	2200      	movs	r2, #0
 800c322:	2110      	movs	r1, #16
 800c324:	4814      	ldr	r0, [pc, #80]	; (800c378 <LED2+0x154>)
 800c326:	f003 ff55 	bl	80101d4 <HAL_GPIO_WritePin>
			break;
 800c32a:	e021      	b.n	800c370 <LED2+0x14c>
		case 7:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800c32c:	2200      	movs	r2, #0
 800c32e:	2120      	movs	r1, #32
 800c330:	4811      	ldr	r0, [pc, #68]	; (800c378 <LED2+0x154>)
 800c332:	f003 ff4f 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800c336:	2200      	movs	r2, #0
 800c338:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c33c:	480f      	ldr	r0, [pc, #60]	; (800c37c <LED2+0x158>)
 800c33e:	f003 ff49 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800c342:	2200      	movs	r2, #0
 800c344:	2110      	movs	r1, #16
 800c346:	480c      	ldr	r0, [pc, #48]	; (800c378 <LED2+0x154>)
 800c348:	f003 ff44 	bl	80101d4 <HAL_GPIO_WritePin>
			break;
 800c34c:	e010      	b.n	800c370 <LED2+0x14c>
		case 8:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800c34e:	2201      	movs	r2, #1
 800c350:	2120      	movs	r1, #32
 800c352:	4809      	ldr	r0, [pc, #36]	; (800c378 <LED2+0x154>)
 800c354:	f003 ff3e 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800c358:	2201      	movs	r2, #1
 800c35a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c35e:	4807      	ldr	r0, [pc, #28]	; (800c37c <LED2+0x158>)
 800c360:	f003 ff38 	bl	80101d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800c364:	2201      	movs	r2, #1
 800c366:	2110      	movs	r1, #16
 800c368:	4803      	ldr	r0, [pc, #12]	; (800c378 <LED2+0x154>)
 800c36a:	f003 ff33 	bl	80101d4 <HAL_GPIO_WritePin>
			break;
 800c36e:	bf00      	nop

	}

}
 800c370:	bf00      	nop
 800c372:	3708      	adds	r7, #8
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	40020400 	.word	0x40020400
 800c37c:	40020000 	.word	0x40020000

0800c380 <error>:
void error(){
 800c380:	b580      	push	{r7, lr}
 800c382:	af00      	add	r7, sp, #0
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, ESC_MIN);
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ESC_MIN);
	Motor(0,0);
 800c384:	2100      	movs	r1, #0
 800c386:	2000      	movs	r0, #0
 800c388:	f000 f852 	bl	800c430 <Motor>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800c38c:	4b09      	ldr	r3, [pc, #36]	; (800c3b4 <error+0x34>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2200      	movs	r2, #0
 800c392:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 800c394:	4b07      	ldr	r3, [pc, #28]	; (800c3b4 <error+0x34>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	2200      	movs	r2, #0
 800c39a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_Base_Stop_IT(&htim6);
 800c39c:	4806      	ldr	r0, [pc, #24]	; (800c3b8 <error+0x38>)
 800c39e:	f005 fd52 	bl	8011e46 <HAL_TIM_Base_Stop_IT>

	while(1){
		Motor(0,0);
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	2000      	movs	r0, #0
 800c3a6:	f000 f843 	bl	800c430 <Motor>
		LED(1);
 800c3aa:	2001      	movs	r0, #1
 800c3ac:	f7ff fe7e 	bl	800c0ac <LED>
		Motor(0,0);
 800c3b0:	e7f7      	b.n	800c3a2 <error+0x22>
 800c3b2:	bf00      	nop
 800c3b4:	20014524 	.word	0x20014524
 800c3b8:	200144a4 	.word	0x200144a4

0800c3bc <stop>:
	}
}
void stop(){
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	af00      	add	r7, sp, #0
	Average_speed = 1000;
 800c3c0:	4b18      	ldr	r3, [pc, #96]	; (800c424 <stop+0x68>)
 800c3c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c3c6:	801a      	strh	r2, [r3, #0]
	while(1){
		Average_speed = Average_speed-200;
 800c3c8:	4b16      	ldr	r3, [pc, #88]	; (800c424 <stop+0x68>)
 800c3ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	3bc8      	subs	r3, #200	; 0xc8
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	b21a      	sxth	r2, r3
 800c3d6:	4b13      	ldr	r3, [pc, #76]	; (800c424 <stop+0x68>)
 800c3d8:	801a      	strh	r2, [r3, #0]
		//if(driv_flag=1)Average_speed = Average_speed-100;
		HAL_Delay(50);
 800c3da:	2032      	movs	r0, #50	; 0x32
 800c3dc:	f002 f9c4 	bl	800e768 <HAL_Delay>
		if(Average_speed<10)break;
 800c3e0:	4b10      	ldr	r3, [pc, #64]	; (800c424 <stop+0x68>)
 800c3e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c3e6:	2b09      	cmp	r3, #9
 800c3e8:	dd00      	ble.n	800c3ec <stop+0x30>
		Average_speed = Average_speed-200;
 800c3ea:	e7ed      	b.n	800c3c8 <stop+0xc>
		if(Average_speed<10)break;
 800c3ec:	bf00      	nop
	}
	//HAL_Delay(10);
	Average_speed = 0;
 800c3ee:	4b0d      	ldr	r3, [pc, #52]	; (800c424 <stop+0x68>)
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800c3f4:	4b0c      	ldr	r3, [pc, #48]	; (800c428 <stop+0x6c>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 800c3fc:	4b0a      	ldr	r3, [pc, #40]	; (800c428 <stop+0x6c>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	2200      	movs	r2, #0
 800c402:	641a      	str	r2, [r3, #64]	; 0x40
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, ESC_MIN);
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ESC_MIN);

	HAL_Delay(700);
 800c404:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800c408:	f002 f9ae 	bl	800e768 <HAL_Delay>
	HAL_TIM_Base_Stop_IT(&htim6);
 800c40c:	4807      	ldr	r0, [pc, #28]	; (800c42c <stop+0x70>)
 800c40e:	f005 fd1a 	bl	8011e46 <HAL_TIM_Base_Stop_IT>
	Motor(0,0);
 800c412:	2100      	movs	r1, #0
 800c414:	2000      	movs	r0, #0
 800c416:	f000 f80b 	bl	800c430 <Motor>
	LED(6);
 800c41a:	2006      	movs	r0, #6
 800c41c:	f7ff fe46 	bl	800c0ac <LED>


}
 800c420:	bf00      	nop
 800c422:	bd80      	pop	{r7, pc}
 800c424:	20014332 	.word	0x20014332
 800c428:	20014524 	.word	0x20014524
 800c42c:	200144a4 	.word	0x200144a4

0800c430 <Motor>:
void Motor(int16_t MotorL,int16_t MotorR)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	4603      	mov	r3, r0
 800c438:	460a      	mov	r2, r1
 800c43a:	80fb      	strh	r3, [r7, #6]
 800c43c:	4613      	mov	r3, r2
 800c43e:	80bb      	strh	r3, [r7, #4]
//		if (MotorR >= 2000) MotorR = 2000;
//		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, MotorR);
//		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
//
//	}
	if(MotorL > 0 ){
 800c440:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c444:	2b00      	cmp	r3, #0
 800c446:	dd06      	ble.n	800c456 <Motor+0x26>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800c448:	2201      	movs	r2, #1
 800c44a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c44e:	482d      	ldr	r0, [pc, #180]	; (800c504 <Motor+0xd4>)
 800c450:	f003 fec0 	bl	80101d4 <HAL_GPIO_WritePin>
 800c454:	e00d      	b.n	800c472 <Motor+0x42>


	}else if(MotorL < 0){
 800c456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	da09      	bge.n	800c472 <Motor+0x42>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800c45e:	2200      	movs	r2, #0
 800c460:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c464:	4827      	ldr	r0, [pc, #156]	; (800c504 <Motor+0xd4>)
 800c466:	f003 feb5 	bl	80101d4 <HAL_GPIO_WritePin>
		MotorL = -MotorL;
 800c46a:	88fb      	ldrh	r3, [r7, #6]
 800c46c:	425b      	negs	r3, r3
 800c46e:	b29b      	uxth	r3, r3
 800c470:	80fb      	strh	r3, [r7, #6]
	}
	if(MotorR > 0 ){
 800c472:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c476:	2b00      	cmp	r3, #0
 800c478:	dd06      	ble.n	800c488 <Motor+0x58>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800c47a:	2200      	movs	r2, #0
 800c47c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c480:	4821      	ldr	r0, [pc, #132]	; (800c508 <Motor+0xd8>)
 800c482:	f003 fea7 	bl	80101d4 <HAL_GPIO_WritePin>
 800c486:	e00d      	b.n	800c4a4 <Motor+0x74>

	}else if(MotorR < 0){
 800c488:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	da09      	bge.n	800c4a4 <Motor+0x74>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800c490:	2201      	movs	r2, #1
 800c492:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c496:	481c      	ldr	r0, [pc, #112]	; (800c508 <Motor+0xd8>)
 800c498:	f003 fe9c 	bl	80101d4 <HAL_GPIO_WritePin>
		MotorR = -MotorR;
 800c49c:	88bb      	ldrh	r3, [r7, #4]
 800c49e:	425b      	negs	r3, r3
 800c4a0:	b29b      	uxth	r3, r3
 800c4a2:	80bb      	strh	r3, [r7, #4]

	}
	if (MotorR > 2000) MotorR = 2000;
 800c4a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c4a8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c4ac:	dd02      	ble.n	800c4b4 <Motor+0x84>
 800c4ae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c4b2:	80bb      	strh	r3, [r7, #4]
	if (MotorL > 2000) MotorL = 2000;
 800c4b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c4b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c4bc:	dd02      	ble.n	800c4c4 <Motor+0x94>
 800c4be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c4c2:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, MotorL);
 800c4c4:	4b11      	ldr	r3, [pc, #68]	; (800c50c <Motor+0xdc>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c4cc:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, MotorR);
 800c4ce:	4b10      	ldr	r3, [pc, #64]	; (800c510 <Motor+0xe0>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800c4d6:	639a      	str	r2, [r3, #56]	; 0x38

	if(MotorR+MotorL >3999){
 800c4d8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800c4dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800c4e6:	db06      	blt.n	800c4f6 <Motor+0xc6>
		error_count++;
 800c4e8:	4b0a      	ldr	r3, [pc, #40]	; (800c514 <Motor+0xe4>)
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	b2da      	uxtb	r2, r3
 800c4f0:	4b08      	ldr	r3, [pc, #32]	; (800c514 <Motor+0xe4>)
 800c4f2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
		}
	}else error_count=0;

}
 800c4f4:	e002      	b.n	800c4fc <Motor+0xcc>
	}else error_count=0;
 800c4f6:	4b07      	ldr	r3, [pc, #28]	; (800c514 <Motor+0xe4>)
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	701a      	strb	r2, [r3, #0]
}
 800c4fc:	bf00      	nop
 800c4fe:	3708      	adds	r7, #8
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	40020800 	.word	0x40020800
 800c508:	40020000 	.word	0x40020000
 800c50c:	20014334 	.word	0x20014334
 800c510:	200144e4 	.word	0x200144e4
 800c514:	2000c2be 	.word	0x2000c2be

0800c518 <sidemaker>:
void sidemaker(){
 800c518:	b580      	push	{r7, lr}
 800c51a:	af00      	add	r7, sp, #0
if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15) ==0) maker_right = true;
 800c51c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c520:	481b      	ldr	r0, [pc, #108]	; (800c590 <sidemaker+0x78>)
 800c522:	f003 fe3f 	bl	80101a4 <HAL_GPIO_ReadPin>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d103      	bne.n	800c534 <sidemaker+0x1c>
 800c52c:	4b19      	ldr	r3, [pc, #100]	; (800c594 <sidemaker+0x7c>)
 800c52e:	2201      	movs	r2, #1
 800c530:	701a      	strb	r2, [r3, #0]
 800c532:	e002      	b.n	800c53a <sidemaker+0x22>
	else maker_right = false;
 800c534:	4b17      	ldr	r3, [pc, #92]	; (800c594 <sidemaker+0x7c>)
 800c536:	2200      	movs	r2, #0
 800c538:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2) ==0 ) maker_left = true;
 800c53a:	2104      	movs	r1, #4
 800c53c:	4816      	ldr	r0, [pc, #88]	; (800c598 <sidemaker+0x80>)
 800c53e:	f003 fe31 	bl	80101a4 <HAL_GPIO_ReadPin>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d103      	bne.n	800c550 <sidemaker+0x38>
 800c548:	4b14      	ldr	r3, [pc, #80]	; (800c59c <sidemaker+0x84>)
 800c54a:	2201      	movs	r2, #1
 800c54c:	701a      	strb	r2, [r3, #0]
 800c54e:	e002      	b.n	800c556 <sidemaker+0x3e>
	else maker_left = false;
 800c550:	4b12      	ldr	r3, [pc, #72]	; (800c59c <sidemaker+0x84>)
 800c552:	2200      	movs	r2, #0
 800c554:	701a      	strb	r2, [r3, #0]

	if(log_flag){
 800c556:	4b12      	ldr	r3, [pc, #72]	; (800c5a0 <sidemaker+0x88>)
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d016      	beq.n	800c58c <sidemaker+0x74>
	  if(cross_line) cross_flag++;
 800c55e:	4b11      	ldr	r3, [pc, #68]	; (800c5a4 <sidemaker+0x8c>)
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d005      	beq.n	800c572 <sidemaker+0x5a>
 800c566:	4b10      	ldr	r3, [pc, #64]	; (800c5a8 <sidemaker+0x90>)
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	3301      	adds	r3, #1
 800c56c:	b2da      	uxtb	r2, r3
 800c56e:	4b0e      	ldr	r3, [pc, #56]	; (800c5a8 <sidemaker+0x90>)
 800c570:	701a      	strb	r2, [r3, #0]
	  if(cross_flag>=12) {
 800c572:	4b0d      	ldr	r3, [pc, #52]	; (800c5a8 <sidemaker+0x90>)
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	2b0b      	cmp	r3, #11
 800c578:	d905      	bls.n	800c586 <sidemaker+0x6e>
		  cross_line=0;
 800c57a:	4b0a      	ldr	r3, [pc, #40]	; (800c5a4 <sidemaker+0x8c>)
 800c57c:	2200      	movs	r2, #0
 800c57e:	701a      	strb	r2, [r3, #0]
		  cross_flag=0;
 800c580:	4b09      	ldr	r3, [pc, #36]	; (800c5a8 <sidemaker+0x90>)
 800c582:	2200      	movs	r2, #0
 800c584:	701a      	strb	r2, [r3, #0]
	  }
		  log_flag= false;
 800c586:	4b06      	ldr	r3, [pc, #24]	; (800c5a0 <sidemaker+0x88>)
 800c588:	2200      	movs	r2, #0
 800c58a:	701a      	strb	r2, [r3, #0]
	  }
}
 800c58c:	bf00      	nop
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	40020800 	.word	0x40020800
 800c594:	200143b4 	.word	0x200143b4
 800c598:	40020400 	.word	0x40020400
 800c59c:	200144a0 	.word	0x200144a0
 800c5a0:	2000020a 	.word	0x2000020a
 800c5a4:	2000c2d0 	.word	0x2000c2d0
 800c5a8:	2000c2bd 	.word	0x2000c2bd

0800c5ac <fan_pressure>:
void fan_pressure(float L,float R){
 800c5ac:	b480      	push	{r7}
 800c5ae:	b085      	sub	sp, #20
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	ed87 0a01 	vstr	s0, [r7, #4]
 800c5b6:	edc7 0a00 	vstr	s1, [r7]
	int fanL=0;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	60fb      	str	r3, [r7, #12]
	int fanR=0;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	60bb      	str	r3, [r7, #8]
	if(L>220)L=220;
 800c5c2:	edd7 7a01 	vldr	s15, [r7, #4]
 800c5c6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800c620 <fan_pressure+0x74>
 800c5ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5d2:	dd01      	ble.n	800c5d8 <fan_pressure+0x2c>
 800c5d4:	4b13      	ldr	r3, [pc, #76]	; (800c624 <fan_pressure+0x78>)
 800c5d6:	607b      	str	r3, [r7, #4]
	if(R>220)R=220;
 800c5d8:	edd7 7a00 	vldr	s15, [r7]
 800c5dc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c620 <fan_pressure+0x74>
 800c5e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5e8:	dd01      	ble.n	800c5ee <fan_pressure+0x42>
 800c5ea:	4b0e      	ldr	r3, [pc, #56]	; (800c624 <fan_pressure+0x78>)
 800c5ec:	603b      	str	r3, [r7, #0]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, L);
 800c5ee:	4b0e      	ldr	r3, [pc, #56]	; (800c628 <fan_pressure+0x7c>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	edd7 7a01 	vldr	s15, [r7, #4]
 800c5f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5fa:	ee17 2a90 	vmov	r2, s15
 800c5fe:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, R);
 800c600:	4b09      	ldr	r3, [pc, #36]	; (800c628 <fan_pressure+0x7c>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	edd7 7a00 	vldr	s15, [r7]
 800c608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c60c:	ee17 2a90 	vmov	r2, s15
 800c610:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c612:	bf00      	nop
 800c614:	3714      	adds	r7, #20
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr
 800c61e:	bf00      	nop
 800c620:	435c0000 	.word	0x435c0000
 800c624:	435c0000 	.word	0x435c0000
 800c628:	20014524 	.word	0x20014524

0800c62c <flashcheck>:

	fan_Lim = (19*(100-fan))/100;

	fan_pressure(round(fan_Lim),round(fan_Lim));
}
void flashcheck(){
 800c62c:	b580      	push	{r7, lr}
 800c62e:	af00      	add	r7, sp, #0
	if(work_ram[28] != 0){
 800c630:	4b1c      	ldr	r3, [pc, #112]	; (800c6a4 <flashcheck+0x78>)
 800c632:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800c634:	2b00      	cmp	r3, #0
 800c636:	d033      	beq.n	800c6a0 <flashcheck+0x74>
		  work_ram[26]=2500;
 800c638:	4b1a      	ldr	r3, [pc, #104]	; (800c6a4 <flashcheck+0x78>)
 800c63a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800c63e:	869a      	strh	r2, [r3, #52]	; 0x34
		  work_ram[27]=200;
 800c640:	4b18      	ldr	r3, [pc, #96]	; (800c6a4 <flashcheck+0x78>)
 800c642:	22c8      	movs	r2, #200	; 0xc8
 800c644:	86da      	strh	r2, [r3, #54]	; 0x36
		  work_ram[28]=0;
 800c646:	4b17      	ldr	r3, [pc, #92]	; (800c6a4 <flashcheck+0x78>)
 800c648:	2200      	movs	r2, #0
 800c64a:	871a      	strh	r2, [r3, #56]	; 0x38
		  work_ram[29]=32;
 800c64c:	4b15      	ldr	r3, [pc, #84]	; (800c6a4 <flashcheck+0x78>)
 800c64e:	2220      	movs	r2, #32
 800c650:	875a      	strh	r2, [r3, #58]	; 0x3a
		  work_ram[31]=22;
 800c652:	4b14      	ldr	r3, [pc, #80]	; (800c6a4 <flashcheck+0x78>)
 800c654:	2216      	movs	r2, #22
 800c656:	87da      	strh	r2, [r3, #62]	; 0x3e
		  work_ram[32]=6;
 800c658:	4b12      	ldr	r3, [pc, #72]	; (800c6a4 <flashcheck+0x78>)
 800c65a:	2206      	movs	r2, #6
 800c65c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		  work_ram[33] = 2000;
 800c660:	4b10      	ldr	r3, [pc, #64]	; (800c6a4 <flashcheck+0x78>)
 800c662:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c666:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		  work_ram[34] = 3000;
 800c66a:	4b0e      	ldr	r3, [pc, #56]	; (800c6a4 <flashcheck+0x78>)
 800c66c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800c670:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		  work_ram[35] = 3500;
 800c674:	4b0b      	ldr	r3, [pc, #44]	; (800c6a4 <flashcheck+0x78>)
 800c676:	f640 52ac 	movw	r2, #3500	; 0xdac
 800c67a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		  work_ram[36] = 4500;
 800c67e:	4b09      	ldr	r3, [pc, #36]	; (800c6a4 <flashcheck+0x78>)
 800c680:	f241 1294 	movw	r2, #4500	; 0x1194
 800c684:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		  work_ram[37] = 4500;
 800c688:	4b06      	ldr	r3, [pc, #24]	; (800c6a4 <flashcheck+0x78>)
 800c68a:	f241 1294 	movw	r2, #4500	; 0x1194
 800c68e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		  work_ram[38] = 7000;
 800c692:	4b04      	ldr	r3, [pc, #16]	; (800c6a4 <flashcheck+0x78>)
 800c694:	f641 3258 	movw	r2, #7000	; 0x1b58
 800c698:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		  Flash_store();
 800c69c:	f7ff fbda 	bl	800be54 <Flash_store>
	}
}
 800c6a0:	bf00      	nop
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	2000c318 	.word	0x2000c318

0800c6a8 <switch_cheack>:
uint8_t switch_cheack(){
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13);
 800c6ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c6b0:	4802      	ldr	r0, [pc, #8]	; (800c6bc <switch_cheack+0x14>)
 800c6b2:	f003 fd77 	bl	80101a4 <HAL_GPIO_ReadPin>
 800c6b6:	4603      	mov	r3, r0

}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	40020800 	.word	0x40020800

0800c6c0 <switch_cheack2>:
uint8_t switch_cheack2(){
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15);
 800c6c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c6c8:	4802      	ldr	r0, [pc, #8]	; (800c6d4 <switch_cheack2+0x14>)
 800c6ca:	f003 fd6b 	bl	80101a4 <HAL_GPIO_ReadPin>
 800c6ce:	4603      	mov	r3, r0

}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	40020400 	.word	0x40020400

0800c6d8 <mode_Selection>:
int mode_Selection(uint8_t cheak){
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	4603      	mov	r3, r0
 800c6e0:	71fb      	strb	r3, [r7, #7]
	int8_t i=1;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	73fb      	strb	r3, [r7, #15]
	TIM1 -> CNT = 32768;
 800c6e6:	4b35      	ldr	r3, [pc, #212]	; (800c7bc <mode_Selection+0xe4>)
 800c6e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c6ec:	625a      	str	r2, [r3, #36]	; 0x24
	LED(1);
 800c6ee:	2001      	movs	r0, #1
 800c6f0:	f7ff fcdc 	bl	800c0ac <LED>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c6fa:	4831      	ldr	r0, [pc, #196]	; (800c7c0 <mode_Selection+0xe8>)
 800c6fc:	f003 fd6a 	bl	80101d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800c700:	2200      	movs	r2, #0
 800c702:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c706:	482e      	ldr	r0, [pc, #184]	; (800c7c0 <mode_Selection+0xe8>)
 800c708:	f003 fd64 	bl	80101d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800c70c:	2200      	movs	r2, #0
 800c70e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c712:	482b      	ldr	r0, [pc, #172]	; (800c7c0 <mode_Selection+0xe8>)
 800c714:	f003 fd5e 	bl	80101d4 <HAL_GPIO_WritePin>
	while (switch_cheack()){
 800c718:	e033      	b.n	800c782 <mode_Selection+0xaa>

		if(TIM4 -> CNT>32768+2000){
 800c71a:	4b2a      	ldr	r3, [pc, #168]	; (800c7c4 <mode_Selection+0xec>)
 800c71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c71e:	f248 72d0 	movw	r2, #34768	; 0x87d0
 800c722:	4293      	cmp	r3, r2
 800c724:	d913      	bls.n	800c74e <mode_Selection+0x76>
			i++;
 800c726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	3301      	adds	r3, #1
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	73fb      	strb	r3, [r7, #15]
			if(i>=8)i=1;
 800c732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c736:	2b07      	cmp	r3, #7
 800c738:	dd01      	ble.n	800c73e <mode_Selection+0x66>
 800c73a:	2301      	movs	r3, #1
 800c73c:	73fb      	strb	r3, [r7, #15]
			LED(i);
 800c73e:	7bfb      	ldrb	r3, [r7, #15]
 800c740:	4618      	mov	r0, r3
 800c742:	f7ff fcb3 	bl	800c0ac <LED>
			TIM4 -> CNT=32768;
 800c746:	4b1f      	ldr	r3, [pc, #124]	; (800c7c4 <mode_Selection+0xec>)
 800c748:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c74c:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(TIM4 -> CNT<32768-2000){
 800c74e:	4b1d      	ldr	r3, [pc, #116]	; (800c7c4 <mode_Selection+0xec>)
 800c750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c752:	f647 022f 	movw	r2, #30767	; 0x782f
 800c756:	4293      	cmp	r3, r2
 800c758:	d813      	bhi.n	800c782 <mode_Selection+0xaa>
			i--;
 800c75a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	3b01      	subs	r3, #1
 800c762:	b2db      	uxtb	r3, r3
 800c764:	73fb      	strb	r3, [r7, #15]
			if(i<=0)i=7;
 800c766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	dc01      	bgt.n	800c772 <mode_Selection+0x9a>
 800c76e:	2307      	movs	r3, #7
 800c770:	73fb      	strb	r3, [r7, #15]
			LED(i);
 800c772:	7bfb      	ldrb	r3, [r7, #15]
 800c774:	4618      	mov	r0, r3
 800c776:	f7ff fc99 	bl	800c0ac <LED>
			TIM4 -> CNT=32768;
 800c77a:	4b12      	ldr	r3, [pc, #72]	; (800c7c4 <mode_Selection+0xec>)
 800c77c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c780:	625a      	str	r2, [r3, #36]	; 0x24
	while (switch_cheack()){
 800c782:	f7ff ff91 	bl	800c6a8 <switch_cheack>
 800c786:	4603      	mov	r3, r0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d1c6      	bne.n	800c71a <mode_Selection+0x42>
		}
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800c78c:	2201      	movs	r2, #1
 800c78e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c792:	480b      	ldr	r0, [pc, #44]	; (800c7c0 <mode_Selection+0xe8>)
 800c794:	f003 fd1e 	bl	80101d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800c798:	2201      	movs	r2, #1
 800c79a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c79e:	4808      	ldr	r0, [pc, #32]	; (800c7c0 <mode_Selection+0xe8>)
 800c7a0:	f003 fd18 	bl	80101d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c7aa:	4805      	ldr	r0, [pc, #20]	; (800c7c0 <mode_Selection+0xe8>)
 800c7ac:	f003 fd12 	bl	80101d4 <HAL_GPIO_WritePin>
	return i;
 800c7b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	40010000 	.word	0x40010000
 800c7c0:	40020000 	.word	0x40020000
 800c7c4:	40000800 	.word	0x40000800

0800c7c8 <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*)&ch, 1, 0xFFFF);
 800c7d0:	1d39      	adds	r1, r7, #4
 800c7d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	4803      	ldr	r0, [pc, #12]	; (800c7e8 <__io_putchar+0x20>)
 800c7da:	f006 fa2e 	bl	8012c3a <HAL_UART_Transmit>
	return ch;
 800c7de:	687b      	ldr	r3, [r7, #4]
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	20014614 	.word	0x20014614

0800c7ec <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle) {
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
}
 800c7f4:	bf00      	nop
 800c7f6:	370c      	adds	r7, #12
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <HAL_TIM_PeriodElapsedCallback>:
//  {
//    ITM_SendChar(*ptr++);
//  }
//  return len;
//}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
	ghq++;
 800c808:	4b23      	ldr	r3, [pc, #140]	; (800c898 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	3301      	adds	r3, #1
 800c80e:	4a22      	ldr	r2, [pc, #136]	; (800c898 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800c810:	6013      	str	r3, [r2, #0]
	Speed_Motor();
 800c812:	f7fe fb09 	bl	800ae28 <Speed_Motor>
	sidemaker();
 800c816:	f7ff fe7f 	bl	800c518 <sidemaker>
	  if(maker_flag==0 && second_soeed>=1 && (Average_speed<=6000)){
 800c81a:	4b20      	ldr	r3, [pc, #128]	; (800c89c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d113      	bne.n	800c84a <HAL_TIM_PeriodElapsedCallback+0x4a>
 800c822:	4b1f      	ldr	r3, [pc, #124]	; (800c8a0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00f      	beq.n	800c84a <HAL_TIM_PeriodElapsedCallback+0x4a>
 800c82a:	4b1e      	ldr	r3, [pc, #120]	; (800c8a4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800c82c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c830:	f241 7270 	movw	r2, #6000	; 0x1770
 800c834:	4293      	cmp	r3, r2
 800c836:	dc08      	bgt.n	800c84a <HAL_TIM_PeriodElapsedCallback+0x4a>
		  Average_speed=Average_speed+5;
 800c838:	4b1a      	ldr	r3, [pc, #104]	; (800c8a4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800c83a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c83e:	b29b      	uxth	r3, r3
 800c840:	3305      	adds	r3, #5
 800c842:	b29b      	uxth	r3, r3
 800c844:	b21a      	sxth	r2, r3
 800c846:	4b17      	ldr	r3, [pc, #92]	; (800c8a4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800c848:	801a      	strh	r2, [r3, #0]
	  }
	//if(driv_flag==1&& maker_flag==1)first_cale();
//	if(straight_flag) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
//	else if(driv_flag ==1) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);

  if(maker_flag==0 && Average_speed<=work_ram[26])Average_speed+=5;
 800c84a:	4b14      	ldr	r3, [pc, #80]	; (800c89c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d111      	bne.n	800c876 <HAL_TIM_PeriodElapsedCallback+0x76>
 800c852:	4b14      	ldr	r3, [pc, #80]	; (800c8a4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800c854:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c858:	461a      	mov	r2, r3
 800c85a:	4b13      	ldr	r3, [pc, #76]	; (800c8a8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800c85c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c85e:	429a      	cmp	r2, r3
 800c860:	dc09      	bgt.n	800c876 <HAL_TIM_PeriodElapsedCallback+0x76>
 800c862:	4b10      	ldr	r3, [pc, #64]	; (800c8a4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800c864:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c868:	b29b      	uxth	r3, r3
 800c86a:	3305      	adds	r3, #5
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	b21a      	sxth	r2, r3
 800c870:	4b0c      	ldr	r3, [pc, #48]	; (800c8a4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800c872:	801a      	strh	r2, [r3, #0]
  else if(driv_flag ==1 && maker_flag==1) Average_speed=work_ram[26];


}
 800c874:	e00c      	b.n	800c890 <HAL_TIM_PeriodElapsedCallback+0x90>
  else if(driv_flag ==1 && maker_flag==1) Average_speed=work_ram[26];
 800c876:	4b0d      	ldr	r3, [pc, #52]	; (800c8ac <HAL_TIM_PeriodElapsedCallback+0xac>)
 800c878:	881b      	ldrh	r3, [r3, #0]
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d108      	bne.n	800c890 <HAL_TIM_PeriodElapsedCallback+0x90>
 800c87e:	4b07      	ldr	r3, [pc, #28]	; (800c89c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	2b01      	cmp	r3, #1
 800c884:	d104      	bne.n	800c890 <HAL_TIM_PeriodElapsedCallback+0x90>
 800c886:	4b08      	ldr	r3, [pc, #32]	; (800c8a8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800c888:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c88a:	b21a      	sxth	r2, r3
 800c88c:	4b05      	ldr	r3, [pc, #20]	; (800c8a4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800c88e:	801a      	strh	r2, [r3, #0]
}
 800c890:	bf00      	nop
 800c892:	3708      	adds	r7, #8
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}
 800c898:	2000c2c4 	.word	0x2000c2c4
 800c89c:	2000c2bc 	.word	0x2000c2bc
 800c8a0:	2000c0bc 	.word	0x2000c0bc
 800c8a4:	20014332 	.word	0x20014332
 800c8a8:	2000c318 	.word	0x2000c318
 800c8ac:	2000c2c0 	.word	0x2000c2c0

0800c8b0 <mode>:
void mode(){
 800c8b0:	b590      	push	{r4, r7, lr}
 800c8b2:	b085      	sub	sp, #20
 800c8b4:	af00      	add	r7, sp, #0
	uint8_t i=1;
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	73fb      	strb	r3, [r7, #15]
	uint16_t jl=39;
 800c8ba:	2327      	movs	r3, #39	; 0x27
 800c8bc:	81bb      	strh	r3, [r7, #12]
	int a=0;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	60bb      	str	r3, [r7, #8]
	float cal=0;
 800c8c2:	f04f 0300 	mov.w	r3, #0
 800c8c6:	607b      	str	r3, [r7, #4]
	float spp=0;
 800c8c8:	f04f 0300 	mov.w	r3, #0
 800c8cc:	603b      	str	r3, [r7, #0]
	while(1){
		i=mode_Selection(switch_cheack());
 800c8ce:	f7ff feeb 	bl	800c6a8 <switch_cheack>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7ff feff 	bl	800c6d8 <mode_Selection>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	73fb      	strb	r3, [r7, #15]

		switch(i){
 800c8de:	7bfb      	ldrb	r3, [r7, #15]
 800c8e0:	3b01      	subs	r3, #1
 800c8e2:	2b06      	cmp	r3, #6
 800c8e4:	d8f3      	bhi.n	800c8ce <mode+0x1e>
 800c8e6:	a201      	add	r2, pc, #4	; (adr r2, 800c8ec <mode+0x3c>)
 800c8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ec:	0800c909 	.word	0x0800c909
 800c8f0:	0800c927 	.word	0x0800c927
 800c8f4:	0800c945 	.word	0x0800c945
 800c8f8:	0800ca75 	.word	0x0800ca75
 800c8fc:	0800ca7b 	.word	0x0800ca7b
 800c900:	0800cbc3 	.word	0x0800cbc3
 800c904:	0800cbc9 	.word	0x0800cbc9
//			//HAL_Delay(500);
//			IMU_init();
//			off_angle();
//			break;
		case 1://green
			LED(1);
 800c908:	2001      	movs	r0, #1
 800c90a:	f7ff fbcf 	bl	800c0ac <LED>
			lcd_clear();
 800c90e:	f7fc fac7 	bl	8008ea0 <lcd_clear>
			lcd_locate(0,0);
 800c912:	2100      	movs	r1, #0
 800c914:	2000      	movs	r0, #0
 800c916:	f7fc fad3 	bl	8008ec0 <lcd_locate>
			lcd_printf("ADCinit");
 800c91a:	48ad      	ldr	r0, [pc, #692]	; (800cbd0 <mode+0x320>)
 800c91c:	f7fc fafa 	bl	8008f14 <lcd_printf>
			ADCinit();
 800c920:	f000 ff48 	bl	800d7b4 <ADCinit>
			break;
 800c924:	e153      	b.n	800cbce <mode+0x31e>
		case 2:
			LED(2);//light blue
 800c926:	2002      	movs	r0, #2
 800c928:	f7ff fbc0 	bl	800c0ac <LED>
			lcd_clear();
 800c92c:	f7fc fab8 	bl	8008ea0 <lcd_clear>
			lcd_locate(0,0);
 800c930:	2100      	movs	r1, #0
 800c932:	2000      	movs	r0, #0
 800c934:	f7fc fac4 	bl	8008ec0 <lcd_locate>
			lcd_printf("nomusan");
 800c938:	48a6      	ldr	r0, [pc, #664]	; (800cbd4 <mode+0x324>)
 800c93a:	f7fc faeb 	bl	8008f14 <lcd_printf>
			tuning();
 800c93e:	f7fe fe63 	bl	800b608 <tuning>
			break;
 800c942:	e144      	b.n	800cbce <mode+0x31e>

		case 3:

			second_soeed=0;
 800c944:	4ba4      	ldr	r3, [pc, #656]	; (800cbd8 <mode+0x328>)
 800c946:	2200      	movs	r2, #0
 800c948:	701a      	strb	r2, [r3, #0]
			Flash_clear2();
 800c94a:	f7ff fa4a 	bl	800bde2 <Flash_clear2>
			LED(8);
 800c94e:	2008      	movs	r0, #8
 800c950:	f7ff fbac 	bl	800c0ac <LED>
			LED2(1);
 800c954:	2001      	movs	r0, #1
 800c956:	f7ff fc65 	bl	800c224 <LED2>
			while(switch_cheack2());
 800c95a:	bf00      	nop
 800c95c:	f7ff feb0 	bl	800c6c0 <switch_cheack2>
 800c960:	4603      	mov	r3, r0
 800c962:	2b00      	cmp	r3, #0
 800c964:	d1fa      	bne.n	800c95c <mode+0xac>
			LED2(2);
 800c966:	2002      	movs	r0, #2
 800c968:	f7ff fc5c 	bl	800c224 <LED2>
			HAL_Delay(300);
 800c96c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c970:	f001 fefa 	bl	800e768 <HAL_Delay>
			off_angle();
 800c974:	f7fd ffe0 	bl	800a938 <off_angle>
			HAL_Delay(100);
 800c978:	2064      	movs	r0, #100	; 0x64
 800c97a:	f001 fef5 	bl	800e768 <HAL_Delay>
			fan_pressure(140,140);
 800c97e:	eddf 0a97 	vldr	s1, [pc, #604]	; 800cbdc <mode+0x32c>
 800c982:	ed9f 0a96 	vldr	s0, [pc, #600]	; 800cbdc <mode+0x32c>
 800c986:	f7ff fe11 	bl	800c5ac <fan_pressure>
			HAL_Delay(1000);
 800c98a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c98e:	f001 feeb 	bl	800e768 <HAL_Delay>
			log_init ();
 800c992:	f7fc fadf 	bl	8008f54 <log_init>
			lcd_clear();
 800c996:	f7fc fa83 	bl	8008ea0 <lcd_clear>
			Kd = 30;
 800c99a:	4b91      	ldr	r3, [pc, #580]	; (800cbe0 <mode+0x330>)
 800c99c:	221e      	movs	r2, #30
 800c99e:	801a      	strh	r2, [r3, #0]
			TIM4 -> CNT = 32768;
 800c9a0:	4b90      	ldr	r3, [pc, #576]	; (800cbe4 <mode+0x334>)
 800c9a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c9a6:	625a      	str	r2, [r3, #36]	; 0x24
			TIM3 -> CNT = 32768;
 800c9a8:	4b8f      	ldr	r3, [pc, #572]	; (800cbe8 <mode+0x338>)
 800c9aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c9ae:	625a      	str	r2, [r3, #36]	; 0x24
//			fan_pressure(9,9);
//			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1940);
//			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 2000);
			HAL_TIM_Base_Start_IT(&htim6);
 800c9b0:	488e      	ldr	r0, [pc, #568]	; (800cbec <mode+0x33c>)
 800c9b2:	f005 fa24 	bl	8011dfe <HAL_TIM_Base_Start_IT>
			LED(2);
 800c9b6:	2002      	movs	r0, #2
 800c9b8:	f7ff fb78 	bl	800c0ac <LED>
			maker_flag=0;
 800c9bc:	4b8c      	ldr	r3, [pc, #560]	; (800cbf0 <mode+0x340>)
 800c9be:	2200      	movs	r2, #0
 800c9c0:	701a      	strb	r2, [r3, #0]
			driv_flag=1;
 800c9c2:	4b8c      	ldr	r3, [pc, #560]	; (800cbf4 <mode+0x344>)
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	801a      	strh	r2, [r3, #0]
			Average_speed=0;
 800c9c8:	4b8b      	ldr	r3, [pc, #556]	; (800cbf8 <mode+0x348>)
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	801a      	strh	r2, [r3, #0]
			while (1){

			  if(maker_right && cross_line==0 && maker_left == 0 ){
 800c9ce:	4b8b      	ldr	r3, [pc, #556]	; (800cbfc <mode+0x34c>)
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d016      	beq.n	800ca04 <mode+0x154>
 800c9d6:	4b8a      	ldr	r3, [pc, #552]	; (800cc00 <mode+0x350>)
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d112      	bne.n	800ca04 <mode+0x154>
 800c9de:	4b89      	ldr	r3, [pc, #548]	; (800cc04 <mode+0x354>)
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d10e      	bne.n	800ca04 <mode+0x154>
				  while(maker_right);
 800c9e6:	bf00      	nop
 800c9e8:	4b84      	ldr	r3, [pc, #528]	; (800cbfc <mode+0x34c>)
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d1fb      	bne.n	800c9e8 <mode+0x138>
				  maker_flag++;
 800c9f0:	4b7f      	ldr	r3, [pc, #508]	; (800cbf0 <mode+0x340>)
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	b2da      	uxtb	r2, r3
 800c9f8:	4b7d      	ldr	r3, [pc, #500]	; (800cbf0 <mode+0x340>)
 800c9fa:	701a      	strb	r2, [r3, #0]
				  if(maker_flag>=2){
 800c9fc:	4b7c      	ldr	r3, [pc, #496]	; (800cbf0 <mode+0x340>)
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d827      	bhi.n	800ca54 <mode+0x1a4>
					  break;
				  }
			  }
			  if(maker_left && cross_line==0 && maker_right == 0){
 800ca04:	4b7f      	ldr	r3, [pc, #508]	; (800cc04 <mode+0x354>)
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d012      	beq.n	800ca32 <mode+0x182>
 800ca0c:	4b7c      	ldr	r3, [pc, #496]	; (800cc00 <mode+0x350>)
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d10e      	bne.n	800ca32 <mode+0x182>
 800ca14:	4b79      	ldr	r3, [pc, #484]	; (800cbfc <mode+0x34c>)
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d10a      	bne.n	800ca32 <mode+0x182>
				  correc_maker = true;
 800ca1c:	4b7a      	ldr	r3, [pc, #488]	; (800cc08 <mode+0x358>)
 800ca1e:	2201      	movs	r2, #1
 800ca20:	701a      	strb	r2, [r3, #0]
				  while(maker_left);
 800ca22:	bf00      	nop
 800ca24:	4b77      	ldr	r3, [pc, #476]	; (800cc04 <mode+0x354>)
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d1fb      	bne.n	800ca24 <mode+0x174>
				  correc_maker = false;
 800ca2c:	4b76      	ldr	r3, [pc, #472]	; (800cc08 <mode+0x358>)
 800ca2e:	2200      	movs	r2, #0
 800ca30:	701a      	strb	r2, [r3, #0]
			  }
			  if((maker_right )&& cross_line==1 ){
 800ca32:	4b72      	ldr	r3, [pc, #456]	; (800cbfc <mode+0x34c>)
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d0c9      	beq.n	800c9ce <mode+0x11e>
 800ca3a:	4b71      	ldr	r3, [pc, #452]	; (800cc00 <mode+0x350>)
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d1c5      	bne.n	800c9ce <mode+0x11e>
				  while(maker_right);
 800ca42:	bf00      	nop
 800ca44:	4b6d      	ldr	r3, [pc, #436]	; (800cbfc <mode+0x34c>)
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d1fb      	bne.n	800ca44 <mode+0x194>
				  cross_maker = true;
 800ca4c:	4b6f      	ldr	r3, [pc, #444]	; (800cc0c <mode+0x35c>)
 800ca4e:	2201      	movs	r2, #1
 800ca50:	701a      	strb	r2, [r3, #0]
			  if(maker_right && cross_line==0 && maker_left == 0 ){
 800ca52:	e7bc      	b.n	800c9ce <mode+0x11e>
					  break;
 800ca54:	bf00      	nop
			  }

			}

			stop();
 800ca56:	f7ff fcb1 	bl	800c3bc <stop>
			fan_pressure(0,0);
 800ca5a:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800cc10 <mode+0x360>
 800ca5e:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 800cc10 <mode+0x360>
 800ca62:	f7ff fda3 	bl	800c5ac <fan_pressure>
			Flash_store();
 800ca66:	f7ff f9f5 	bl	800be54 <Flash_store>
			Kd = work_ram[29];
 800ca6a:	4b6a      	ldr	r3, [pc, #424]	; (800cc14 <mode+0x364>)
 800ca6c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800ca6e:	4b5c      	ldr	r3, [pc, #368]	; (800cbe0 <mode+0x330>)
 800ca70:	801a      	strh	r2, [r3, #0]
			break;
 800ca72:	e0ac      	b.n	800cbce <mode+0x31e>
		case 4:
			accel_tuning();
 800ca74:	f7fe fecc 	bl	800b810 <accel_tuning>
			break;
 800ca78:	e0a9      	b.n	800cbce <mode+0x31e>
//			}
////			printf("%lf\r\n",fao);
////			printf("%d\r\n",c);
//			break;
		case 5:
			i=1;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(500);
 800ca7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ca82:	f001 fe71 	bl	800e768 <HAL_Delay>
			second_soeed=mode_Selection(switch_cheack2());
 800ca86:	f7ff fe1b 	bl	800c6c0 <switch_cheack2>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7ff fe23 	bl	800c6d8 <mode_Selection>
 800ca92:	4603      	mov	r3, r0
 800ca94:	b2da      	uxtb	r2, r3
 800ca96:	4b50      	ldr	r3, [pc, #320]	; (800cbd8 <mode+0x328>)
 800ca98:	701a      	strb	r2, [r3, #0]
			LED2(3);
 800ca9a:	2003      	movs	r0, #3
 800ca9c:	f7ff fbc2 	bl	800c224 <LED2>
			FLASH_EreaseSector(11);
 800caa0:	200b      	movs	r0, #11
 800caa2:	f7fd fe1d 	bl	800a6e0 <FLASH_EreaseSector>
			FLASH_Erease8();
 800caa6:	f7fd fdfb 	bl	800a6a0 <FLASH_Erease8>
			log_init ();
 800caaa:	f7fc fa53 	bl	8008f54 <log_init>
			log_Cal();
 800caae:	f7fc fea3 	bl	80097f8 <log_Cal>
			log_init ();
 800cab2:	f7fc fa4f 	bl	8008f54 <log_init>
			HAL_Delay(10);
 800cab6:	200a      	movs	r0, #10
 800cab8:	f001 fe56 	bl	800e768 <HAL_Delay>
			off_angle();
 800cabc:	f7fd ff3c 	bl	800a938 <off_angle>
			HAL_Delay(100);
 800cac0:	2064      	movs	r0, #100	; 0x64
 800cac2:	f001 fe51 	bl	800e768 <HAL_Delay>
			maker_flag=0;
 800cac6:	4b4a      	ldr	r3, [pc, #296]	; (800cbf0 <mode+0x340>)
 800cac8:	2200      	movs	r2, #0
 800caca:	701a      	strb	r2, [r3, #0]
			driv_flag=2;
 800cacc:	4b49      	ldr	r3, [pc, #292]	; (800cbf4 <mode+0x344>)
 800cace:	2202      	movs	r2, #2
 800cad0:	801a      	strh	r2, [r3, #0]
//			if(second_soeed == 1){
//				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2000);
//				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 2060);
//				fan_pressure(13.4,13.4);
//			}else {
				fan_pressure(180,180);
 800cad2:	eddf 0a51 	vldr	s1, [pc, #324]	; 800cc18 <mode+0x368>
 800cad6:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800cc18 <mode+0x368>
 800cada:	f7ff fd67 	bl	800c5ac <fan_pressure>
//				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2020);
//				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 2080);
//			}
			HAL_Delay(500);
 800cade:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800cae2:	f001 fe41 	bl	800e768 <HAL_Delay>
			Average_speed=0;
 800cae6:	4b44      	ldr	r3, [pc, #272]	; (800cbf8 <mode+0x348>)
 800cae8:	2200      	movs	r2, #0
 800caea:	801a      	strh	r2, [r3, #0]
			spp=700;
 800caec:	4b4b      	ldr	r3, [pc, #300]	; (800cc1c <mode+0x36c>)
 800caee:	603b      	str	r3, [r7, #0]
			LED(2);
 800caf0:	2002      	movs	r0, #2
 800caf2:	f7ff fadb 	bl	800c0ac <LED>
			TIM4 -> CNT = 32768;
 800caf6:	4b3b      	ldr	r3, [pc, #236]	; (800cbe4 <mode+0x334>)
 800caf8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800cafc:	625a      	str	r2, [r3, #36]	; 0x24
			TIM3 -> CNT = 32768;
 800cafe:	4b3a      	ldr	r3, [pc, #232]	; (800cbe8 <mode+0x338>)
 800cb00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800cb04:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim6);
 800cb06:	4839      	ldr	r0, [pc, #228]	; (800cbec <mode+0x33c>)
 800cb08:	f005 f979 	bl	8011dfe <HAL_TIM_Base_Start_IT>
			while (1){

			  if(maker_right && cross_line==0 && maker_left == 0 ){
 800cb0c:	4b3b      	ldr	r3, [pc, #236]	; (800cbfc <mode+0x34c>)
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d016      	beq.n	800cb42 <mode+0x292>
 800cb14:	4b3a      	ldr	r3, [pc, #232]	; (800cc00 <mode+0x350>)
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d112      	bne.n	800cb42 <mode+0x292>
 800cb1c:	4b39      	ldr	r3, [pc, #228]	; (800cc04 <mode+0x354>)
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d10e      	bne.n	800cb42 <mode+0x292>
				  while(maker_right);
 800cb24:	bf00      	nop
 800cb26:	4b35      	ldr	r3, [pc, #212]	; (800cbfc <mode+0x34c>)
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d1fb      	bne.n	800cb26 <mode+0x276>
				  maker_flag++;
 800cb2e:	4b30      	ldr	r3, [pc, #192]	; (800cbf0 <mode+0x340>)
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	3301      	adds	r3, #1
 800cb34:	b2da      	uxtb	r2, r3
 800cb36:	4b2e      	ldr	r3, [pc, #184]	; (800cbf0 <mode+0x340>)
 800cb38:	701a      	strb	r2, [r3, #0]
				  if(maker_flag>=2){
 800cb3a:	4b2d      	ldr	r3, [pc, #180]	; (800cbf0 <mode+0x340>)
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d827      	bhi.n	800cb92 <mode+0x2e2>
					  break;
				  }
			  }
			  if(maker_left && cross_line==0 && maker_right==0){
 800cb42:	4b30      	ldr	r3, [pc, #192]	; (800cc04 <mode+0x354>)
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d012      	beq.n	800cb70 <mode+0x2c0>
 800cb4a:	4b2d      	ldr	r3, [pc, #180]	; (800cc00 <mode+0x350>)
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d10e      	bne.n	800cb70 <mode+0x2c0>
 800cb52:	4b2a      	ldr	r3, [pc, #168]	; (800cbfc <mode+0x34c>)
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d10a      	bne.n	800cb70 <mode+0x2c0>
					  correc_maker = true;
 800cb5a:	4b2b      	ldr	r3, [pc, #172]	; (800cc08 <mode+0x358>)
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	701a      	strb	r2, [r3, #0]
					  while(maker_left);
 800cb60:	bf00      	nop
 800cb62:	4b28      	ldr	r3, [pc, #160]	; (800cc04 <mode+0x354>)
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d1fb      	bne.n	800cb62 <mode+0x2b2>
					  correc_maker = false;
 800cb6a:	4b27      	ldr	r3, [pc, #156]	; (800cc08 <mode+0x358>)
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	701a      	strb	r2, [r3, #0]

				  }
			  if((maker_right )&& cross_line==1 ){
 800cb70:	4b22      	ldr	r3, [pc, #136]	; (800cbfc <mode+0x34c>)
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d0c9      	beq.n	800cb0c <mode+0x25c>
 800cb78:	4b21      	ldr	r3, [pc, #132]	; (800cc00 <mode+0x350>)
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d1c5      	bne.n	800cb0c <mode+0x25c>
				  while(maker_right);
 800cb80:	bf00      	nop
 800cb82:	4b1e      	ldr	r3, [pc, #120]	; (800cbfc <mode+0x34c>)
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d1fb      	bne.n	800cb82 <mode+0x2d2>
				  cross_maker = true;
 800cb8a:	4b20      	ldr	r3, [pc, #128]	; (800cc0c <mode+0x35c>)
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	701a      	strb	r2, [r3, #0]
			  if(maker_right && cross_line==0 && maker_left == 0 ){
 800cb90:	e7bc      	b.n	800cb0c <mode+0x25c>
					  break;
 800cb92:	bf00      	nop
			  }

			 // if(Average_speed<work_ram[26])Average_speed=work_ram[26];
			}

			stop();
 800cb94:	f7ff fc12 	bl	800c3bc <stop>
			fan_pressure(0,0);
 800cb98:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800cc10 <mode+0x360>
 800cb9c:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800cc10 <mode+0x360>
 800cba0:	f7ff fd04 	bl	800c5ac <fan_pressure>
			lcd_clear();
 800cba4:	f7fc f97c 	bl	8008ea0 <lcd_clear>
			lcd_printf("%lf",test);
 800cba8:	4b1d      	ldr	r3, [pc, #116]	; (800cc20 <mode+0x370>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4618      	mov	r0, r3
 800cbae:	f7fb fc03 	bl	80083b8 <__aeabi_f2d>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	460c      	mov	r4, r1
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	4623      	mov	r3, r4
 800cbba:	481a      	ldr	r0, [pc, #104]	; (800cc24 <mode+0x374>)
 800cbbc:	f7fc f9aa 	bl	8008f14 <lcd_printf>
			break;
 800cbc0:	e005      	b.n	800cbce <mode+0x31e>
		case 6:
			log_play();
 800cbc2:	f7fd fc7f 	bl	800a4c4 <log_play>
			break;
 800cbc6:	e002      	b.n	800cbce <mode+0x31e>
		case 7:
			speed_tuning();
 800cbc8:	f7ff f8bc 	bl	800bd44 <speed_tuning>
			break;
 800cbcc:	bf00      	nop
		i=mode_Selection(switch_cheack());
 800cbce:	e67e      	b.n	800c8ce <mode+0x1e>
 800cbd0:	08016470 	.word	0x08016470
 800cbd4:	08016478 	.word	0x08016478
 800cbd8:	2000c0bc 	.word	0x2000c0bc
 800cbdc:	430c0000 	.word	0x430c0000
 800cbe0:	2000c30e 	.word	0x2000c30e
 800cbe4:	40000800 	.word	0x40000800
 800cbe8:	40000400 	.word	0x40000400
 800cbec:	200144a4 	.word	0x200144a4
 800cbf0:	2000c2bc 	.word	0x2000c2bc
 800cbf4:	2000c2c0 	.word	0x2000c2c0
 800cbf8:	20014332 	.word	0x20014332
 800cbfc:	200143b4 	.word	0x200143b4
 800cc00:	2000c2d0 	.word	0x2000c2d0
 800cc04:	200144a0 	.word	0x200144a0
 800cc08:	2000c0b0 	.word	0x2000c0b0
 800cc0c:	2000c250 	.word	0x2000c250
 800cc10:	00000000 	.word	0x00000000
 800cc14:	2000c318 	.word	0x2000c318
 800cc18:	43340000 	.word	0x43340000
 800cc1c:	442f0000 	.word	0x442f0000
 800cc20:	2000c2cc 	.word	0x2000c2cc
 800cc24:	08016480 	.word	0x08016480

0800cc28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
//	int i=0;
//	int z=0;
//	int g=0;
	int cal=0;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cc32:	f001 fd27 	bl	800e684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cc36:	f000 f891 	bl	800cd5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cc3a:	f000 fceb 	bl	800d614 <MX_GPIO_Init>
  MX_DMA_Init();
 800cc3e:	f000 fcc9 	bl	800d5d4 <MX_DMA_Init>
  MX_ADC1_Init();
 800cc42:	f000 f8f5 	bl	800ce30 <MX_ADC1_Init>
  MX_I2C1_Init();
 800cc46:	f000 f9ed 	bl	800d024 <MX_I2C1_Init>
  MX_SPI3_Init();
 800cc4a:	f000 fa19 	bl	800d080 <MX_SPI3_Init>
  MX_TIM1_Init();
 800cc4e:	f000 fa4d 	bl	800d0ec <MX_TIM1_Init>
  MX_TIM3_Init();
 800cc52:	f000 fb33 	bl	800d2bc <MX_TIM3_Init>
  MX_TIM4_Init();
 800cc56:	f000 fb85 	bl	800d364 <MX_TIM4_Init>
  MX_TIM8_Init();
 800cc5a:	f000 fc0d 	bl	800d478 <MX_TIM8_Init>
  MX_USART6_UART_Init();
 800cc5e:	f000 fc8f 	bl	800d580 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 800cc62:	f000 fbd3 	bl	800d40c <MX_TIM6_Init>
  MX_TIM2_Init();
 800cc66:	f000 fac5 	bl	800d1f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_Delay(100);

  init();
 800cc6a:	f7ff f939 	bl	800bee0 <init>
//  work_ram[26]=2500;
//  Flash_store();
 // ADCinit();

//  brushi_init();
  IMU_init();
 800cc6e:	f7fd fe01 	bl	800a874 <IMU_init>
  IMU_init();
 800cc72:	f7fd fdff 	bl	800a874 <IMU_init>
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 50)
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 50);
//  fan_pressure(10,0);f
 // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 400);
 // Kd = 10;
if(switch_cheack2()==0){
 800cc76:	f7ff fd23 	bl	800c6c0 <switch_cheack2>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d110      	bne.n	800cca2 <main+0x7a>
	LED(4);
 800cc80:	2004      	movs	r0, #4
 800cc82:	f7ff fa13 	bl	800c0ac <LED>
	LED2(4);
 800cc86:	2004      	movs	r0, #4
 800cc88:	f7ff facc 	bl	800c224 <LED2>
	HAL_Delay(500);
 800cc8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800cc90:	f001 fd6a 	bl	800e768 <HAL_Delay>
	fan_pressure(180,180);
 800cc94:	eddf 0a29 	vldr	s1, [pc, #164]	; 800cd3c <main+0x114>
 800cc98:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800cd3c <main+0x114>
 800cc9c:	f7ff fc86 	bl	800c5ac <fan_pressure>
	while(1);
 800cca0:	e7fe      	b.n	800cca0 <main+0x78>
}
//  HAL_TIM_Base_Start_IT(&htim6);
 // tuning();
//  second_soeed = 2;
//  log_Cal();
Motor(00,00);
 800cca2:	2100      	movs	r1, #0
 800cca4:	2000      	movs	r0, #0
 800cca6:	f7ff fbc3 	bl	800c430 <Motor>
 	 mode();
 800ccaa:	f7ff fe01 	bl	800c8b0 <mode>
//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 // __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 400);
 Motor(00,000);
 800ccae:	2100      	movs	r1, #0
 800ccb0:	2000      	movs	r0, #0
 800ccb2:	f7ff fbbd 	bl	800c430 <Motor>
// Motor(300,300);
//  mode_Selection(1);
LED(5);
 800ccb6:	2005      	movs	r0, #5
 800ccb8:	f7ff f9f8 	bl	800c0ac <LED>
LED2(4);
 800ccbc:	2004      	movs	r0, #4
 800ccbe:	f7ff fab1 	bl	800c224 <LED2>
//  Flash_store();
 // driv_fan(3800);
//  maker_flag=1;
//  driv_flag=2;
//  HAL_TIM_Base_Start_IT(&htim6);
  TIM3-> CNT = 0;
 800ccc2:	4b1f      	ldr	r3, [pc, #124]	; (800cd40 <main+0x118>)
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	625a      	str	r2, [r3, #36]	; 0x24
//  fan_pressure(15,15);
//mode_Selection(1);
//  TIM3 -> CNT = 32768;
  cal=39;
 800ccc8:	2327      	movs	r3, #39	; 0x27
 800ccca:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  read_gyro_data();
 800cccc:	f7fd fdfc 	bl	800a8c8 <read_gyro_data>
	  printf("%d,%d\r\n",cal-39,work_ram[cal]);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f1a3 0127 	sub.w	r1, r3, #39	; 0x27
 800ccd6:	4a1b      	ldr	r2, [pc, #108]	; (800cd44 <main+0x11c>)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccde:	461a      	mov	r2, r3
 800cce0:	4819      	ldr	r0, [pc, #100]	; (800cd48 <main+0x120>)
 800cce2:	f007 fae3 	bl	80142ac <iprintf>
	  cal++;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	3301      	adds	r3, #1
 800ccea:	607b      	str	r3, [r7, #4]
	  if(work_ram[cal]>=6000)break;
 800ccec:	4a15      	ldr	r2, [pc, #84]	; (800cd44 <main+0x11c>)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccf4:	f241 726f 	movw	r2, #5999	; 0x176f
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d818      	bhi.n	800cd2e <main+0x106>
//	plan_velo_adress+= 0x04;
//
//	HAL_Delay(1000);

//	 a= analog[0];
	  test =  (a-32768 );
 800ccfc:	4b13      	ldr	r3, [pc, #76]	; (800cd4c <main+0x124>)
 800ccfe:	881b      	ldrh	r3, [r3, #0]
 800cd00:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800cd04:	ee07 3a90 	vmov	s15, r3
 800cd08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd0c:	4b10      	ldr	r3, [pc, #64]	; (800cd50 <main+0x128>)
 800cd0e:	edc3 7a00 	vstr	s15, [r3]
//	  printf("%d,",analog[10]);
//	  printf("%d,",analog[11]);
//	  printf("%d,\r\n",analog[12]);
//	  printf("%d\r\n",a);
//	  read_gyro_data();
	  a=TIM4 -> CNT;
 800cd12:	4b10      	ldr	r3, [pc, #64]	; (800cd54 <main+0x12c>)
 800cd14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd16:	b29a      	uxth	r2, r3
 800cd18:	4b0c      	ldr	r3, [pc, #48]	; (800cd4c <main+0x124>)
 800cd1a:	801a      	strh	r2, [r3, #0]
	  b=TIM3 -> CNT;
 800cd1c:	4b08      	ldr	r3, [pc, #32]	; (800cd40 <main+0x118>)
 800cd1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd20:	b29a      	uxth	r2, r3
 800cd22:	4b0d      	ldr	r3, [pc, #52]	; (800cd58 <main+0x130>)
 800cd24:	801a      	strh	r2, [r3, #0]
//			  g=0;
//		  }
//		  log_flag= false;
	//  }
	  //printf("%lf\r\n",speedget());
	  HAL_Delay(100);
 800cd26:	2064      	movs	r0, #100	; 0x64
 800cd28:	f001 fd1e 	bl	800e768 <HAL_Delay>
	  read_gyro_data();
 800cd2c:	e7ce      	b.n	800cccc <main+0xa4>
	  if(work_ram[cal]>=6000)break;
 800cd2e:	bf00      	nop
    /* USER CODE BEGIN 3 */
  }

 // printf("%lf\r\n",test);
//  Motor(00,00);
  return 0;
 800cd30:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3708      	adds	r7, #8
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	43340000 	.word	0x43340000
 800cd40:	40000400 	.word	0x40000400
 800cd44:	2000c318 	.word	0x2000c318
 800cd48:	08016484 	.word	0x08016484
 800cd4c:	2000c2c8 	.word	0x2000c2c8
 800cd50:	2000c2cc 	.word	0x2000c2cc
 800cd54:	40000800 	.word	0x40000800
 800cd58:	2000c2ca 	.word	0x2000c2ca

0800cd5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b094      	sub	sp, #80	; 0x50
 800cd60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800cd62:	f107 0320 	add.w	r3, r7, #32
 800cd66:	2230      	movs	r2, #48	; 0x30
 800cd68:	2100      	movs	r1, #0
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f006 fe39 	bl	80139e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800cd70:	f107 030c 	add.w	r3, r7, #12
 800cd74:	2200      	movs	r2, #0
 800cd76:	601a      	str	r2, [r3, #0]
 800cd78:	605a      	str	r2, [r3, #4]
 800cd7a:	609a      	str	r2, [r3, #8]
 800cd7c:	60da      	str	r2, [r3, #12]
 800cd7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800cd80:	2300      	movs	r3, #0
 800cd82:	60bb      	str	r3, [r7, #8]
 800cd84:	4b28      	ldr	r3, [pc, #160]	; (800ce28 <SystemClock_Config+0xcc>)
 800cd86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd88:	4a27      	ldr	r2, [pc, #156]	; (800ce28 <SystemClock_Config+0xcc>)
 800cd8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd8e:	6413      	str	r3, [r2, #64]	; 0x40
 800cd90:	4b25      	ldr	r3, [pc, #148]	; (800ce28 <SystemClock_Config+0xcc>)
 800cd92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd98:	60bb      	str	r3, [r7, #8]
 800cd9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	607b      	str	r3, [r7, #4]
 800cda0:	4b22      	ldr	r3, [pc, #136]	; (800ce2c <SystemClock_Config+0xd0>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4a21      	ldr	r2, [pc, #132]	; (800ce2c <SystemClock_Config+0xd0>)
 800cda6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cdaa:	6013      	str	r3, [r2, #0]
 800cdac:	4b1f      	ldr	r3, [pc, #124]	; (800ce2c <SystemClock_Config+0xd0>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cdb4:	607b      	str	r3, [r7, #4]
 800cdb6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800cdbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cdc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cdc2:	2302      	movs	r3, #2
 800cdc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800cdc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cdca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800cdcc:	2306      	movs	r3, #6
 800cdce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800cdd0:	23a8      	movs	r3, #168	; 0xa8
 800cdd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800cdd4:	2302      	movs	r3, #2
 800cdd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800cdd8:	2304      	movs	r3, #4
 800cdda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cddc:	f107 0320 	add.w	r3, r7, #32
 800cde0:	4618      	mov	r0, r3
 800cde2:	f003 fe51 	bl	8010a88 <HAL_RCC_OscConfig>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d001      	beq.n	800cdf0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800cdec:	f000 fcde 	bl	800d7ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800cdf0:	230f      	movs	r3, #15
 800cdf2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800cdf4:	2302      	movs	r3, #2
 800cdf6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800cdfc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ce00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800ce02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800ce08:	f107 030c 	add.w	r3, r7, #12
 800ce0c:	2105      	movs	r1, #5
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f004 f8aa 	bl	8010f68 <HAL_RCC_ClockConfig>
 800ce14:	4603      	mov	r3, r0
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d001      	beq.n	800ce1e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800ce1a:	f000 fcc7 	bl	800d7ac <Error_Handler>
  }
}
 800ce1e:	bf00      	nop
 800ce20:	3750      	adds	r7, #80	; 0x50
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	40023800 	.word	0x40023800
 800ce2c:	40007000 	.word	0x40007000

0800ce30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ce36:	463b      	mov	r3, r7
 800ce38:	2200      	movs	r2, #0
 800ce3a:	601a      	str	r2, [r3, #0]
 800ce3c:	605a      	str	r2, [r3, #4]
 800ce3e:	609a      	str	r2, [r3, #8]
 800ce40:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800ce42:	4b75      	ldr	r3, [pc, #468]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800ce44:	4a75      	ldr	r2, [pc, #468]	; (800d01c <MX_ADC1_Init+0x1ec>)
 800ce46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800ce48:	4b73      	ldr	r3, [pc, #460]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800ce4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ce4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800ce50:	4b71      	ldr	r3, [pc, #452]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800ce52:	2200      	movs	r2, #0
 800ce54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800ce56:	4b70      	ldr	r3, [pc, #448]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800ce58:	2201      	movs	r2, #1
 800ce5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800ce5c:	4b6e      	ldr	r3, [pc, #440]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800ce5e:	2201      	movs	r2, #1
 800ce60:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800ce62:	4b6d      	ldr	r3, [pc, #436]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800ce64:	2200      	movs	r2, #0
 800ce66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ce6a:	4b6b      	ldr	r3, [pc, #428]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ce70:	4b69      	ldr	r3, [pc, #420]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800ce72:	4a6b      	ldr	r2, [pc, #428]	; (800d020 <MX_ADC1_Init+0x1f0>)
 800ce74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ce76:	4b68      	ldr	r3, [pc, #416]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800ce78:	2200      	movs	r2, #0
 800ce7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 13;
 800ce7c:	4b66      	ldr	r3, [pc, #408]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800ce7e:	220d      	movs	r2, #13
 800ce80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800ce82:	4b65      	ldr	r3, [pc, #404]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800ce84:	2201      	movs	r2, #1
 800ce86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ce8a:	4b63      	ldr	r3, [pc, #396]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800ce90:	4861      	ldr	r0, [pc, #388]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800ce92:	f001 fc8b 	bl	800e7ac <HAL_ADC_Init>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d001      	beq.n	800cea0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800ce9c:	f000 fc86 	bl	800d7ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800cea0:	2309      	movs	r3, #9
 800cea2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800cea4:	2301      	movs	r3, #1
 800cea6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800cea8:	2307      	movs	r3, #7
 800ceaa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ceac:	463b      	mov	r3, r7
 800ceae:	4619      	mov	r1, r3
 800ceb0:	4859      	ldr	r0, [pc, #356]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800ceb2:	f001 fdc5 	bl	800ea40 <HAL_ADC_ConfigChannel>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d001      	beq.n	800cec0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800cebc:	f000 fc76 	bl	800d7ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800cec0:	2308      	movs	r3, #8
 800cec2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800cec4:	2302      	movs	r3, #2
 800cec6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cec8:	463b      	mov	r3, r7
 800ceca:	4619      	mov	r1, r3
 800cecc:	4852      	ldr	r0, [pc, #328]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800cece:	f001 fdb7 	bl	800ea40 <HAL_ADC_ConfigChannel>
 800ced2:	4603      	mov	r3, r0
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d001      	beq.n	800cedc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800ced8:	f000 fc68 	bl	800d7ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800cedc:	230f      	movs	r3, #15
 800cede:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800cee0:	2303      	movs	r3, #3
 800cee2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cee4:	463b      	mov	r3, r7
 800cee6:	4619      	mov	r1, r3
 800cee8:	484b      	ldr	r0, [pc, #300]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800ceea:	f001 fda9 	bl	800ea40 <HAL_ADC_ConfigChannel>
 800ceee:	4603      	mov	r3, r0
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d001      	beq.n	800cef8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800cef4:	f000 fc5a 	bl	800d7ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800cef8:	230e      	movs	r3, #14
 800cefa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800cefc:	2304      	movs	r3, #4
 800cefe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cf00:	463b      	mov	r3, r7
 800cf02:	4619      	mov	r1, r3
 800cf04:	4844      	ldr	r0, [pc, #272]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800cf06:	f001 fd9b 	bl	800ea40 <HAL_ADC_ConfigChannel>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d001      	beq.n	800cf14 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800cf10:	f000 fc4c 	bl	800d7ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800cf14:	2305      	movs	r3, #5
 800cf16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800cf18:	2305      	movs	r3, #5
 800cf1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cf1c:	463b      	mov	r3, r7
 800cf1e:	4619      	mov	r1, r3
 800cf20:	483d      	ldr	r0, [pc, #244]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800cf22:	f001 fd8d 	bl	800ea40 <HAL_ADC_ConfigChannel>
 800cf26:	4603      	mov	r3, r0
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d001      	beq.n	800cf30 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800cf2c:	f000 fc3e 	bl	800d7ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800cf30:	2304      	movs	r3, #4
 800cf32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800cf34:	2306      	movs	r3, #6
 800cf36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cf38:	463b      	mov	r3, r7
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	4836      	ldr	r0, [pc, #216]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800cf3e:	f001 fd7f 	bl	800ea40 <HAL_ADC_ConfigChannel>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d001      	beq.n	800cf4c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800cf48:	f000 fc30 	bl	800d7ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800cf4c:	2303      	movs	r3, #3
 800cf4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800cf50:	2307      	movs	r3, #7
 800cf52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cf54:	463b      	mov	r3, r7
 800cf56:	4619      	mov	r1, r3
 800cf58:	482f      	ldr	r0, [pc, #188]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800cf5a:	f001 fd71 	bl	800ea40 <HAL_ADC_ConfigChannel>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d001      	beq.n	800cf68 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800cf64:	f000 fc22 	bl	800d7ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800cf68:	2302      	movs	r3, #2
 800cf6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800cf6c:	2308      	movs	r3, #8
 800cf6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cf70:	463b      	mov	r3, r7
 800cf72:	4619      	mov	r1, r3
 800cf74:	4828      	ldr	r0, [pc, #160]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800cf76:	f001 fd63 	bl	800ea40 <HAL_ADC_ConfigChannel>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d001      	beq.n	800cf84 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800cf80:	f000 fc14 	bl	800d7ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800cf84:	2301      	movs	r3, #1
 800cf86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800cf88:	2309      	movs	r3, #9
 800cf8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cf8c:	463b      	mov	r3, r7
 800cf8e:	4619      	mov	r1, r3
 800cf90:	4821      	ldr	r0, [pc, #132]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800cf92:	f001 fd55 	bl	800ea40 <HAL_ADC_ConfigChannel>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d001      	beq.n	800cfa0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800cf9c:	f000 fc06 	bl	800d7ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800cfa4:	230a      	movs	r3, #10
 800cfa6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cfa8:	463b      	mov	r3, r7
 800cfaa:	4619      	mov	r1, r3
 800cfac:	481a      	ldr	r0, [pc, #104]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800cfae:	f001 fd47 	bl	800ea40 <HAL_ADC_ConfigChannel>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d001      	beq.n	800cfbc <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 800cfb8:	f000 fbf8 	bl	800d7ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800cfbc:	230d      	movs	r3, #13
 800cfbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800cfc0:	230b      	movs	r3, #11
 800cfc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cfc4:	463b      	mov	r3, r7
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	4813      	ldr	r0, [pc, #76]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800cfca:	f001 fd39 	bl	800ea40 <HAL_ADC_ConfigChannel>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d001      	beq.n	800cfd8 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 800cfd4:	f000 fbea 	bl	800d7ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800cfd8:	230c      	movs	r3, #12
 800cfda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800cfdc:	230c      	movs	r3, #12
 800cfde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cfe0:	463b      	mov	r3, r7
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	480c      	ldr	r0, [pc, #48]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800cfe6:	f001 fd2b 	bl	800ea40 <HAL_ADC_ConfigChannel>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d001      	beq.n	800cff4 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 800cff0:	f000 fbdc 	bl	800d7ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800cff4:	230b      	movs	r3, #11
 800cff6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800cff8:	230d      	movs	r3, #13
 800cffa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cffc:	463b      	mov	r3, r7
 800cffe:	4619      	mov	r1, r3
 800d000:	4805      	ldr	r0, [pc, #20]	; (800d018 <MX_ADC1_Init+0x1e8>)
 800d002:	f001 fd1d 	bl	800ea40 <HAL_ADC_ConfigChannel>
 800d006:	4603      	mov	r3, r0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d001      	beq.n	800d010 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 800d00c:	f000 fbce 	bl	800d7ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800d010:	bf00      	nop
 800d012:	3710      	adds	r7, #16
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	200143f8 	.word	0x200143f8
 800d01c:	40012000 	.word	0x40012000
 800d020:	0f000001 	.word	0x0f000001

0800d024 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800d028:	4b12      	ldr	r3, [pc, #72]	; (800d074 <MX_I2C1_Init+0x50>)
 800d02a:	4a13      	ldr	r2, [pc, #76]	; (800d078 <MX_I2C1_Init+0x54>)
 800d02c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800d02e:	4b11      	ldr	r3, [pc, #68]	; (800d074 <MX_I2C1_Init+0x50>)
 800d030:	4a12      	ldr	r2, [pc, #72]	; (800d07c <MX_I2C1_Init+0x58>)
 800d032:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800d034:	4b0f      	ldr	r3, [pc, #60]	; (800d074 <MX_I2C1_Init+0x50>)
 800d036:	2200      	movs	r2, #0
 800d038:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800d03a:	4b0e      	ldr	r3, [pc, #56]	; (800d074 <MX_I2C1_Init+0x50>)
 800d03c:	2200      	movs	r2, #0
 800d03e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d040:	4b0c      	ldr	r3, [pc, #48]	; (800d074 <MX_I2C1_Init+0x50>)
 800d042:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d046:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d048:	4b0a      	ldr	r3, [pc, #40]	; (800d074 <MX_I2C1_Init+0x50>)
 800d04a:	2200      	movs	r2, #0
 800d04c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800d04e:	4b09      	ldr	r3, [pc, #36]	; (800d074 <MX_I2C1_Init+0x50>)
 800d050:	2200      	movs	r2, #0
 800d052:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d054:	4b07      	ldr	r3, [pc, #28]	; (800d074 <MX_I2C1_Init+0x50>)
 800d056:	2200      	movs	r2, #0
 800d058:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d05a:	4b06      	ldr	r3, [pc, #24]	; (800d074 <MX_I2C1_Init+0x50>)
 800d05c:	2200      	movs	r2, #0
 800d05e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800d060:	4804      	ldr	r0, [pc, #16]	; (800d074 <MX_I2C1_Init+0x50>)
 800d062:	f003 f8d1 	bl	8010208 <HAL_I2C_Init>
 800d066:	4603      	mov	r3, r0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d001      	beq.n	800d070 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800d06c:	f000 fb9e 	bl	800d7ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800d070:	bf00      	nop
 800d072:	bd80      	pop	{r7, pc}
 800d074:	20014564 	.word	0x20014564
 800d078:	40005400 	.word	0x40005400
 800d07c:	000186a0 	.word	0x000186a0

0800d080 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800d084:	4b17      	ldr	r3, [pc, #92]	; (800d0e4 <MX_SPI3_Init+0x64>)
 800d086:	4a18      	ldr	r2, [pc, #96]	; (800d0e8 <MX_SPI3_Init+0x68>)
 800d088:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800d08a:	4b16      	ldr	r3, [pc, #88]	; (800d0e4 <MX_SPI3_Init+0x64>)
 800d08c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d090:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800d092:	4b14      	ldr	r3, [pc, #80]	; (800d0e4 <MX_SPI3_Init+0x64>)
 800d094:	2200      	movs	r2, #0
 800d096:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800d098:	4b12      	ldr	r3, [pc, #72]	; (800d0e4 <MX_SPI3_Init+0x64>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800d09e:	4b11      	ldr	r3, [pc, #68]	; (800d0e4 <MX_SPI3_Init+0x64>)
 800d0a0:	2202      	movs	r2, #2
 800d0a2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800d0a4:	4b0f      	ldr	r3, [pc, #60]	; (800d0e4 <MX_SPI3_Init+0x64>)
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800d0aa:	4b0e      	ldr	r3, [pc, #56]	; (800d0e4 <MX_SPI3_Init+0x64>)
 800d0ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0b0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d0b2:	4b0c      	ldr	r3, [pc, #48]	; (800d0e4 <MX_SPI3_Init+0x64>)
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d0b8:	4b0a      	ldr	r3, [pc, #40]	; (800d0e4 <MX_SPI3_Init+0x64>)
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800d0be:	4b09      	ldr	r3, [pc, #36]	; (800d0e4 <MX_SPI3_Init+0x64>)
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d0c4:	4b07      	ldr	r3, [pc, #28]	; (800d0e4 <MX_SPI3_Init+0x64>)
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800d0ca:	4b06      	ldr	r3, [pc, #24]	; (800d0e4 <MX_SPI3_Init+0x64>)
 800d0cc:	220a      	movs	r2, #10
 800d0ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800d0d0:	4804      	ldr	r0, [pc, #16]	; (800d0e4 <MX_SPI3_Init+0x64>)
 800d0d2:	f004 f915 	bl	8011300 <HAL_SPI_Init>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d001      	beq.n	800d0e0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800d0dc:	f000 fb66 	bl	800d7ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800d0e0:	bf00      	nop
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	200145b8 	.word	0x200145b8
 800d0e8:	40003c00 	.word	0x40003c00

0800d0ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b092      	sub	sp, #72	; 0x48
 800d0f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d0f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	601a      	str	r2, [r3, #0]
 800d0fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d0fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d100:	2200      	movs	r2, #0
 800d102:	601a      	str	r2, [r3, #0]
 800d104:	605a      	str	r2, [r3, #4]
 800d106:	609a      	str	r2, [r3, #8]
 800d108:	60da      	str	r2, [r3, #12]
 800d10a:	611a      	str	r2, [r3, #16]
 800d10c:	615a      	str	r2, [r3, #20]
 800d10e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800d110:	1d3b      	adds	r3, r7, #4
 800d112:	2220      	movs	r2, #32
 800d114:	2100      	movs	r1, #0
 800d116:	4618      	mov	r0, r3
 800d118:	f006 fc63 	bl	80139e2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800d11c:	4b33      	ldr	r3, [pc, #204]	; (800d1ec <MX_TIM1_Init+0x100>)
 800d11e:	4a34      	ldr	r2, [pc, #208]	; (800d1f0 <MX_TIM1_Init+0x104>)
 800d120:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800d122:	4b32      	ldr	r3, [pc, #200]	; (800d1ec <MX_TIM1_Init+0x100>)
 800d124:	2200      	movs	r2, #0
 800d126:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d128:	4b30      	ldr	r3, [pc, #192]	; (800d1ec <MX_TIM1_Init+0x100>)
 800d12a:	2200      	movs	r2, #0
 800d12c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 800d12e:	4b2f      	ldr	r3, [pc, #188]	; (800d1ec <MX_TIM1_Init+0x100>)
 800d130:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d134:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d136:	4b2d      	ldr	r3, [pc, #180]	; (800d1ec <MX_TIM1_Init+0x100>)
 800d138:	2200      	movs	r2, #0
 800d13a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800d13c:	4b2b      	ldr	r3, [pc, #172]	; (800d1ec <MX_TIM1_Init+0x100>)
 800d13e:	2200      	movs	r2, #0
 800d140:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d142:	4b2a      	ldr	r3, [pc, #168]	; (800d1ec <MX_TIM1_Init+0x100>)
 800d144:	2200      	movs	r2, #0
 800d146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800d148:	4828      	ldr	r0, [pc, #160]	; (800d1ec <MX_TIM1_Init+0x100>)
 800d14a:	f004 fea7 	bl	8011e9c <HAL_TIM_PWM_Init>
 800d14e:	4603      	mov	r3, r0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d001      	beq.n	800d158 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800d154:	f000 fb2a 	bl	800d7ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d158:	2300      	movs	r3, #0
 800d15a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d15c:	2300      	movs	r3, #0
 800d15e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800d160:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d164:	4619      	mov	r1, r3
 800d166:	4821      	ldr	r0, [pc, #132]	; (800d1ec <MX_TIM1_Init+0x100>)
 800d168:	f005 fc38 	bl	80129dc <HAL_TIMEx_MasterConfigSynchronization>
 800d16c:	4603      	mov	r3, r0
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d001      	beq.n	800d176 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800d172:	f000 fb1b 	bl	800d7ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d176:	2360      	movs	r3, #96	; 0x60
 800d178:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800d17a:	2300      	movs	r3, #0
 800d17c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d17e:	2300      	movs	r3, #0
 800d180:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800d182:	2300      	movs	r3, #0
 800d184:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d186:	2300      	movs	r3, #0
 800d188:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800d18a:	2300      	movs	r3, #0
 800d18c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800d18e:	2300      	movs	r3, #0
 800d190:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d196:	2204      	movs	r2, #4
 800d198:	4619      	mov	r1, r3
 800d19a:	4814      	ldr	r0, [pc, #80]	; (800d1ec <MX_TIM1_Init+0x100>)
 800d19c:	f005 f8ba 	bl	8012314 <HAL_TIM_PWM_ConfigChannel>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d001      	beq.n	800d1aa <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800d1a6:	f000 fb01 	bl	800d7ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800d1be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d1c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800d1c8:	1d3b      	adds	r3, r7, #4
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	4807      	ldr	r0, [pc, #28]	; (800d1ec <MX_TIM1_Init+0x100>)
 800d1ce:	f005 fc81 	bl	8012ad4 <HAL_TIMEx_ConfigBreakDeadTime>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d001      	beq.n	800d1dc <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800d1d8:	f000 fae8 	bl	800d7ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800d1dc:	4803      	ldr	r0, [pc, #12]	; (800d1ec <MX_TIM1_Init+0x100>)
 800d1de:	f001 f84b 	bl	800e278 <HAL_TIM_MspPostInit>

}
 800d1e2:	bf00      	nop
 800d1e4:	3748      	adds	r7, #72	; 0x48
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	200144e4 	.word	0x200144e4
 800d1f0:	40010000 	.word	0x40010000

0800d1f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b08a      	sub	sp, #40	; 0x28
 800d1f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d1fa:	f107 0320 	add.w	r3, r7, #32
 800d1fe:	2200      	movs	r2, #0
 800d200:	601a      	str	r2, [r3, #0]
 800d202:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d204:	1d3b      	adds	r3, r7, #4
 800d206:	2200      	movs	r2, #0
 800d208:	601a      	str	r2, [r3, #0]
 800d20a:	605a      	str	r2, [r3, #4]
 800d20c:	609a      	str	r2, [r3, #8]
 800d20e:	60da      	str	r2, [r3, #12]
 800d210:	611a      	str	r2, [r3, #16]
 800d212:	615a      	str	r2, [r3, #20]
 800d214:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d216:	4b28      	ldr	r3, [pc, #160]	; (800d2b8 <MX_TIM2_Init+0xc4>)
 800d218:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d21c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800d21e:	4b26      	ldr	r3, [pc, #152]	; (800d2b8 <MX_TIM2_Init+0xc4>)
 800d220:	2200      	movs	r2, #0
 800d222:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d224:	4b24      	ldr	r3, [pc, #144]	; (800d2b8 <MX_TIM2_Init+0xc4>)
 800d226:	2200      	movs	r2, #0
 800d228:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 839;
 800d22a:	4b23      	ldr	r3, [pc, #140]	; (800d2b8 <MX_TIM2_Init+0xc4>)
 800d22c:	f240 3247 	movw	r2, #839	; 0x347
 800d230:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d232:	4b21      	ldr	r3, [pc, #132]	; (800d2b8 <MX_TIM2_Init+0xc4>)
 800d234:	2200      	movs	r2, #0
 800d236:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d238:	4b1f      	ldr	r3, [pc, #124]	; (800d2b8 <MX_TIM2_Init+0xc4>)
 800d23a:	2200      	movs	r2, #0
 800d23c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800d23e:	481e      	ldr	r0, [pc, #120]	; (800d2b8 <MX_TIM2_Init+0xc4>)
 800d240:	f004 fe2c 	bl	8011e9c <HAL_TIM_PWM_Init>
 800d244:	4603      	mov	r3, r0
 800d246:	2b00      	cmp	r3, #0
 800d248:	d001      	beq.n	800d24e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800d24a:	f000 faaf 	bl	800d7ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d24e:	2300      	movs	r3, #0
 800d250:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d252:	2300      	movs	r3, #0
 800d254:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d256:	f107 0320 	add.w	r3, r7, #32
 800d25a:	4619      	mov	r1, r3
 800d25c:	4816      	ldr	r0, [pc, #88]	; (800d2b8 <MX_TIM2_Init+0xc4>)
 800d25e:	f005 fbbd 	bl	80129dc <HAL_TIMEx_MasterConfigSynchronization>
 800d262:	4603      	mov	r3, r0
 800d264:	2b00      	cmp	r3, #0
 800d266:	d001      	beq.n	800d26c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800d268:	f000 faa0 	bl	800d7ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d26c:	2360      	movs	r3, #96	; 0x60
 800d26e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800d270:	2300      	movs	r3, #0
 800d272:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d274:	2300      	movs	r3, #0
 800d276:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d278:	2300      	movs	r3, #0
 800d27a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d27c:	1d3b      	adds	r3, r7, #4
 800d27e:	2208      	movs	r2, #8
 800d280:	4619      	mov	r1, r3
 800d282:	480d      	ldr	r0, [pc, #52]	; (800d2b8 <MX_TIM2_Init+0xc4>)
 800d284:	f005 f846 	bl	8012314 <HAL_TIM_PWM_ConfigChannel>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d001      	beq.n	800d292 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800d28e:	f000 fa8d 	bl	800d7ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d292:	1d3b      	adds	r3, r7, #4
 800d294:	220c      	movs	r2, #12
 800d296:	4619      	mov	r1, r3
 800d298:	4807      	ldr	r0, [pc, #28]	; (800d2b8 <MX_TIM2_Init+0xc4>)
 800d29a:	f005 f83b 	bl	8012314 <HAL_TIM_PWM_ConfigChannel>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d001      	beq.n	800d2a8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800d2a4:	f000 fa82 	bl	800d7ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800d2a8:	4803      	ldr	r0, [pc, #12]	; (800d2b8 <MX_TIM2_Init+0xc4>)
 800d2aa:	f000 ffe5 	bl	800e278 <HAL_TIM_MspPostInit>

}
 800d2ae:	bf00      	nop
 800d2b0:	3728      	adds	r7, #40	; 0x28
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	20014524 	.word	0x20014524

0800d2bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b08c      	sub	sp, #48	; 0x30
 800d2c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800d2c2:	f107 030c 	add.w	r3, r7, #12
 800d2c6:	2224      	movs	r2, #36	; 0x24
 800d2c8:	2100      	movs	r1, #0
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f006 fb89 	bl	80139e2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d2d0:	1d3b      	adds	r3, r7, #4
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	601a      	str	r2, [r3, #0]
 800d2d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d2d8:	4b20      	ldr	r3, [pc, #128]	; (800d35c <MX_TIM3_Init+0xa0>)
 800d2da:	4a21      	ldr	r2, [pc, #132]	; (800d360 <MX_TIM3_Init+0xa4>)
 800d2dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800d2de:	4b1f      	ldr	r3, [pc, #124]	; (800d35c <MX_TIM3_Init+0xa0>)
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d2e4:	4b1d      	ldr	r3, [pc, #116]	; (800d35c <MX_TIM3_Init+0xa0>)
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800d2ea:	4b1c      	ldr	r3, [pc, #112]	; (800d35c <MX_TIM3_Init+0xa0>)
 800d2ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d2f2:	4b1a      	ldr	r3, [pc, #104]	; (800d35c <MX_TIM3_Init+0xa0>)
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d2f8:	4b18      	ldr	r3, [pc, #96]	; (800d35c <MX_TIM3_Init+0xa0>)
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800d2fe:	2301      	movs	r3, #1
 800d300:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800d302:	2300      	movs	r3, #0
 800d304:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800d306:	2301      	movs	r3, #1
 800d308:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800d30a:	2300      	movs	r3, #0
 800d30c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800d30e:	2300      	movs	r3, #0
 800d310:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800d312:	2300      	movs	r3, #0
 800d314:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800d316:	2301      	movs	r3, #1
 800d318:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800d31a:	2300      	movs	r3, #0
 800d31c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800d31e:	2300      	movs	r3, #0
 800d320:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800d322:	f107 030c 	add.w	r3, r7, #12
 800d326:	4619      	mov	r1, r3
 800d328:	480c      	ldr	r0, [pc, #48]	; (800d35c <MX_TIM3_Init+0xa0>)
 800d32a:	f004 fe21 	bl	8011f70 <HAL_TIM_Encoder_Init>
 800d32e:	4603      	mov	r3, r0
 800d330:	2b00      	cmp	r3, #0
 800d332:	d001      	beq.n	800d338 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800d334:	f000 fa3a 	bl	800d7ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d338:	2300      	movs	r3, #0
 800d33a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d33c:	2300      	movs	r3, #0
 800d33e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d340:	1d3b      	adds	r3, r7, #4
 800d342:	4619      	mov	r1, r3
 800d344:	4805      	ldr	r0, [pc, #20]	; (800d35c <MX_TIM3_Init+0xa0>)
 800d346:	f005 fb49 	bl	80129dc <HAL_TIMEx_MasterConfigSynchronization>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d001      	beq.n	800d354 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800d350:	f000 fa2c 	bl	800d7ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800d354:	bf00      	nop
 800d356:	3730      	adds	r7, #48	; 0x30
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	200143b8 	.word	0x200143b8
 800d360:	40000400 	.word	0x40000400

0800d364 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b08c      	sub	sp, #48	; 0x30
 800d368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800d36a:	f107 030c 	add.w	r3, r7, #12
 800d36e:	2224      	movs	r2, #36	; 0x24
 800d370:	2100      	movs	r1, #0
 800d372:	4618      	mov	r0, r3
 800d374:	f006 fb35 	bl	80139e2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d378:	1d3b      	adds	r3, r7, #4
 800d37a:	2200      	movs	r2, #0
 800d37c:	601a      	str	r2, [r3, #0]
 800d37e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800d380:	4b20      	ldr	r3, [pc, #128]	; (800d404 <MX_TIM4_Init+0xa0>)
 800d382:	4a21      	ldr	r2, [pc, #132]	; (800d408 <MX_TIM4_Init+0xa4>)
 800d384:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800d386:	4b1f      	ldr	r3, [pc, #124]	; (800d404 <MX_TIM4_Init+0xa0>)
 800d388:	2200      	movs	r2, #0
 800d38a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d38c:	4b1d      	ldr	r3, [pc, #116]	; (800d404 <MX_TIM4_Init+0xa0>)
 800d38e:	2200      	movs	r2, #0
 800d390:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800d392:	4b1c      	ldr	r3, [pc, #112]	; (800d404 <MX_TIM4_Init+0xa0>)
 800d394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d398:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d39a:	4b1a      	ldr	r3, [pc, #104]	; (800d404 <MX_TIM4_Init+0xa0>)
 800d39c:	2200      	movs	r2, #0
 800d39e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d3a0:	4b18      	ldr	r3, [pc, #96]	; (800d404 <MX_TIM4_Init+0xa0>)
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800d3ca:	f107 030c 	add.w	r3, r7, #12
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	480c      	ldr	r0, [pc, #48]	; (800d404 <MX_TIM4_Init+0xa0>)
 800d3d2:	f004 fdcd 	bl	8011f70 <HAL_TIM_Encoder_Init>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d001      	beq.n	800d3e0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800d3dc:	f000 f9e6 	bl	800d7ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800d3e8:	1d3b      	adds	r3, r7, #4
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	4805      	ldr	r0, [pc, #20]	; (800d404 <MX_TIM4_Init+0xa0>)
 800d3ee:	f005 faf5 	bl	80129dc <HAL_TIMEx_MasterConfigSynchronization>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d001      	beq.n	800d3fc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800d3f8:	f000 f9d8 	bl	800d7ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800d3fc:	bf00      	nop
 800d3fe:	3730      	adds	r7, #48	; 0x30
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}
 800d404:	20014374 	.word	0x20014374
 800d408:	40000800 	.word	0x40000800

0800d40c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d412:	463b      	mov	r3, r7
 800d414:	2200      	movs	r2, #0
 800d416:	601a      	str	r2, [r3, #0]
 800d418:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800d41a:	4b15      	ldr	r3, [pc, #84]	; (800d470 <MX_TIM6_Init+0x64>)
 800d41c:	4a15      	ldr	r2, [pc, #84]	; (800d474 <MX_TIM6_Init+0x68>)
 800d41e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 800d420:	4b13      	ldr	r3, [pc, #76]	; (800d470 <MX_TIM6_Init+0x64>)
 800d422:	2253      	movs	r2, #83	; 0x53
 800d424:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d426:	4b12      	ldr	r3, [pc, #72]	; (800d470 <MX_TIM6_Init+0x64>)
 800d428:	2200      	movs	r2, #0
 800d42a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800d42c:	4b10      	ldr	r3, [pc, #64]	; (800d470 <MX_TIM6_Init+0x64>)
 800d42e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d432:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d434:	4b0e      	ldr	r3, [pc, #56]	; (800d470 <MX_TIM6_Init+0x64>)
 800d436:	2200      	movs	r2, #0
 800d438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d43a:	480d      	ldr	r0, [pc, #52]	; (800d470 <MX_TIM6_Init+0x64>)
 800d43c:	f004 fcb4 	bl	8011da8 <HAL_TIM_Base_Init>
 800d440:	4603      	mov	r3, r0
 800d442:	2b00      	cmp	r3, #0
 800d444:	d001      	beq.n	800d44a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800d446:	f000 f9b1 	bl	800d7ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d44a:	2300      	movs	r3, #0
 800d44c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d44e:	2300      	movs	r3, #0
 800d450:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d452:	463b      	mov	r3, r7
 800d454:	4619      	mov	r1, r3
 800d456:	4806      	ldr	r0, [pc, #24]	; (800d470 <MX_TIM6_Init+0x64>)
 800d458:	f005 fac0 	bl	80129dc <HAL_TIMEx_MasterConfigSynchronization>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d001      	beq.n	800d466 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800d462:	f000 f9a3 	bl	800d7ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800d466:	bf00      	nop
 800d468:	3708      	adds	r7, #8
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	200144a4 	.word	0x200144a4
 800d474:	40001000 	.word	0x40001000

0800d478 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b092      	sub	sp, #72	; 0x48
 800d47c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d47e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d482:	2200      	movs	r2, #0
 800d484:	601a      	str	r2, [r3, #0]
 800d486:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d48c:	2200      	movs	r2, #0
 800d48e:	601a      	str	r2, [r3, #0]
 800d490:	605a      	str	r2, [r3, #4]
 800d492:	609a      	str	r2, [r3, #8]
 800d494:	60da      	str	r2, [r3, #12]
 800d496:	611a      	str	r2, [r3, #16]
 800d498:	615a      	str	r2, [r3, #20]
 800d49a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800d49c:	1d3b      	adds	r3, r7, #4
 800d49e:	2220      	movs	r2, #32
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f006 fa9d 	bl	80139e2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800d4a8:	4b33      	ldr	r3, [pc, #204]	; (800d578 <MX_TIM8_Init+0x100>)
 800d4aa:	4a34      	ldr	r2, [pc, #208]	; (800d57c <MX_TIM8_Init+0x104>)
 800d4ac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800d4ae:	4b32      	ldr	r3, [pc, #200]	; (800d578 <MX_TIM8_Init+0x100>)
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d4b4:	4b30      	ldr	r3, [pc, #192]	; (800d578 <MX_TIM8_Init+0x100>)
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000;
 800d4ba:	4b2f      	ldr	r3, [pc, #188]	; (800d578 <MX_TIM8_Init+0x100>)
 800d4bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d4c0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d4c2:	4b2d      	ldr	r3, [pc, #180]	; (800d578 <MX_TIM8_Init+0x100>)
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800d4c8:	4b2b      	ldr	r3, [pc, #172]	; (800d578 <MX_TIM8_Init+0x100>)
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d4ce:	4b2a      	ldr	r3, [pc, #168]	; (800d578 <MX_TIM8_Init+0x100>)
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800d4d4:	4828      	ldr	r0, [pc, #160]	; (800d578 <MX_TIM8_Init+0x100>)
 800d4d6:	f004 fce1 	bl	8011e9c <HAL_TIM_PWM_Init>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d001      	beq.n	800d4e4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800d4e0:	f000 f964 	bl	800d7ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800d4ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	4821      	ldr	r0, [pc, #132]	; (800d578 <MX_TIM8_Init+0x100>)
 800d4f4:	f005 fa72 	bl	80129dc <HAL_TIMEx_MasterConfigSynchronization>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d001      	beq.n	800d502 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800d4fe:	f000 f955 	bl	800d7ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d502:	2360      	movs	r3, #96	; 0x60
 800d504:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800d506:	2300      	movs	r3, #0
 800d508:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d50a:	2300      	movs	r3, #0
 800d50c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800d50e:	2300      	movs	r3, #0
 800d510:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d512:	2300      	movs	r3, #0
 800d514:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800d516:	2300      	movs	r3, #0
 800d518:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800d51a:	2300      	movs	r3, #0
 800d51c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d51e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d522:	2208      	movs	r2, #8
 800d524:	4619      	mov	r1, r3
 800d526:	4814      	ldr	r0, [pc, #80]	; (800d578 <MX_TIM8_Init+0x100>)
 800d528:	f004 fef4 	bl	8012314 <HAL_TIM_PWM_ConfigChannel>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d001      	beq.n	800d536 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800d532:	f000 f93b 	bl	800d7ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800d536:	2300      	movs	r3, #0
 800d538:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800d53a:	2300      	movs	r3, #0
 800d53c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800d53e:	2300      	movs	r3, #0
 800d540:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800d542:	2300      	movs	r3, #0
 800d544:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800d546:	2300      	movs	r3, #0
 800d548:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800d54a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d54e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800d550:	2300      	movs	r3, #0
 800d552:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800d554:	1d3b      	adds	r3, r7, #4
 800d556:	4619      	mov	r1, r3
 800d558:	4807      	ldr	r0, [pc, #28]	; (800d578 <MX_TIM8_Init+0x100>)
 800d55a:	f005 fabb 	bl	8012ad4 <HAL_TIMEx_ConfigBreakDeadTime>
 800d55e:	4603      	mov	r3, r0
 800d560:	2b00      	cmp	r3, #0
 800d562:	d001      	beq.n	800d568 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 800d564:	f000 f922 	bl	800d7ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800d568:	4803      	ldr	r0, [pc, #12]	; (800d578 <MX_TIM8_Init+0x100>)
 800d56a:	f000 fe85 	bl	800e278 <HAL_TIM_MspPostInit>

}
 800d56e:	bf00      	nop
 800d570:	3748      	adds	r7, #72	; 0x48
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	20014334 	.word	0x20014334
 800d57c:	40010400 	.word	0x40010400

0800d580 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800d584:	4b11      	ldr	r3, [pc, #68]	; (800d5cc <MX_USART6_UART_Init+0x4c>)
 800d586:	4a12      	ldr	r2, [pc, #72]	; (800d5d0 <MX_USART6_UART_Init+0x50>)
 800d588:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 14400;
 800d58a:	4b10      	ldr	r3, [pc, #64]	; (800d5cc <MX_USART6_UART_Init+0x4c>)
 800d58c:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 800d590:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d592:	4b0e      	ldr	r3, [pc, #56]	; (800d5cc <MX_USART6_UART_Init+0x4c>)
 800d594:	2200      	movs	r2, #0
 800d596:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d598:	4b0c      	ldr	r3, [pc, #48]	; (800d5cc <MX_USART6_UART_Init+0x4c>)
 800d59a:	2200      	movs	r2, #0
 800d59c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d59e:	4b0b      	ldr	r3, [pc, #44]	; (800d5cc <MX_USART6_UART_Init+0x4c>)
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d5a4:	4b09      	ldr	r3, [pc, #36]	; (800d5cc <MX_USART6_UART_Init+0x4c>)
 800d5a6:	220c      	movs	r2, #12
 800d5a8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d5aa:	4b08      	ldr	r3, [pc, #32]	; (800d5cc <MX_USART6_UART_Init+0x4c>)
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d5b0:	4b06      	ldr	r3, [pc, #24]	; (800d5cc <MX_USART6_UART_Init+0x4c>)
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800d5b6:	4805      	ldr	r0, [pc, #20]	; (800d5cc <MX_USART6_UART_Init+0x4c>)
 800d5b8:	f005 faf2 	bl	8012ba0 <HAL_UART_Init>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d001      	beq.n	800d5c6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800d5c2:	f000 f8f3 	bl	800d7ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800d5c6:	bf00      	nop
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	20014614 	.word	0x20014614
 800d5d0:	40011400 	.word	0x40011400

0800d5d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b082      	sub	sp, #8
 800d5d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800d5da:	2300      	movs	r3, #0
 800d5dc:	607b      	str	r3, [r7, #4]
 800d5de:	4b0c      	ldr	r3, [pc, #48]	; (800d610 <MX_DMA_Init+0x3c>)
 800d5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5e2:	4a0b      	ldr	r2, [pc, #44]	; (800d610 <MX_DMA_Init+0x3c>)
 800d5e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d5e8:	6313      	str	r3, [r2, #48]	; 0x30
 800d5ea:	4b09      	ldr	r3, [pc, #36]	; (800d610 <MX_DMA_Init+0x3c>)
 800d5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d5f2:	607b      	str	r3, [r7, #4]
 800d5f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	2100      	movs	r1, #0
 800d5fa:	2038      	movs	r0, #56	; 0x38
 800d5fc:	f001 fd9b 	bl	800f136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800d600:	2038      	movs	r0, #56	; 0x38
 800d602:	f001 fdb4 	bl	800f16e <HAL_NVIC_EnableIRQ>

}
 800d606:	bf00      	nop
 800d608:	3708      	adds	r7, #8
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	40023800 	.word	0x40023800

0800d614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b08a      	sub	sp, #40	; 0x28
 800d618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d61a:	f107 0314 	add.w	r3, r7, #20
 800d61e:	2200      	movs	r2, #0
 800d620:	601a      	str	r2, [r3, #0]
 800d622:	605a      	str	r2, [r3, #4]
 800d624:	609a      	str	r2, [r3, #8]
 800d626:	60da      	str	r2, [r3, #12]
 800d628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d62a:	2300      	movs	r3, #0
 800d62c:	613b      	str	r3, [r7, #16]
 800d62e:	4b5a      	ldr	r3, [pc, #360]	; (800d798 <MX_GPIO_Init+0x184>)
 800d630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d632:	4a59      	ldr	r2, [pc, #356]	; (800d798 <MX_GPIO_Init+0x184>)
 800d634:	f043 0304 	orr.w	r3, r3, #4
 800d638:	6313      	str	r3, [r2, #48]	; 0x30
 800d63a:	4b57      	ldr	r3, [pc, #348]	; (800d798 <MX_GPIO_Init+0x184>)
 800d63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d63e:	f003 0304 	and.w	r3, r3, #4
 800d642:	613b      	str	r3, [r7, #16]
 800d644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d646:	2300      	movs	r3, #0
 800d648:	60fb      	str	r3, [r7, #12]
 800d64a:	4b53      	ldr	r3, [pc, #332]	; (800d798 <MX_GPIO_Init+0x184>)
 800d64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d64e:	4a52      	ldr	r2, [pc, #328]	; (800d798 <MX_GPIO_Init+0x184>)
 800d650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d654:	6313      	str	r3, [r2, #48]	; 0x30
 800d656:	4b50      	ldr	r3, [pc, #320]	; (800d798 <MX_GPIO_Init+0x184>)
 800d658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d65a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d65e:	60fb      	str	r3, [r7, #12]
 800d660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d662:	2300      	movs	r3, #0
 800d664:	60bb      	str	r3, [r7, #8]
 800d666:	4b4c      	ldr	r3, [pc, #304]	; (800d798 <MX_GPIO_Init+0x184>)
 800d668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d66a:	4a4b      	ldr	r2, [pc, #300]	; (800d798 <MX_GPIO_Init+0x184>)
 800d66c:	f043 0301 	orr.w	r3, r3, #1
 800d670:	6313      	str	r3, [r2, #48]	; 0x30
 800d672:	4b49      	ldr	r3, [pc, #292]	; (800d798 <MX_GPIO_Init+0x184>)
 800d674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d676:	f003 0301 	and.w	r3, r3, #1
 800d67a:	60bb      	str	r3, [r7, #8]
 800d67c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d67e:	2300      	movs	r3, #0
 800d680:	607b      	str	r3, [r7, #4]
 800d682:	4b45      	ldr	r3, [pc, #276]	; (800d798 <MX_GPIO_Init+0x184>)
 800d684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d686:	4a44      	ldr	r2, [pc, #272]	; (800d798 <MX_GPIO_Init+0x184>)
 800d688:	f043 0302 	orr.w	r3, r3, #2
 800d68c:	6313      	str	r3, [r2, #48]	; 0x30
 800d68e:	4b42      	ldr	r3, [pc, #264]	; (800d798 <MX_GPIO_Init+0x184>)
 800d690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d692:	f003 0302 	and.w	r3, r3, #2
 800d696:	607b      	str	r3, [r7, #4]
 800d698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d69a:	2300      	movs	r3, #0
 800d69c:	603b      	str	r3, [r7, #0]
 800d69e:	4b3e      	ldr	r3, [pc, #248]	; (800d798 <MX_GPIO_Init+0x184>)
 800d6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a2:	4a3d      	ldr	r2, [pc, #244]	; (800d798 <MX_GPIO_Init+0x184>)
 800d6a4:	f043 0308 	orr.w	r3, r3, #8
 800d6a8:	6313      	str	r3, [r2, #48]	; 0x30
 800d6aa:	4b3b      	ldr	r3, [pc, #236]	; (800d798 <MX_GPIO_Init+0x184>)
 800d6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6ae:	f003 0308 	and.w	r3, r3, #8
 800d6b2:	603b      	str	r3, [r7, #0]
 800d6b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f247 0130 	movw	r1, #28720	; 0x7030
 800d6bc:	4837      	ldr	r0, [pc, #220]	; (800d79c <MX_GPIO_Init+0x188>)
 800d6be:	f002 fd89 	bl	80101d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d6c8:	4835      	ldr	r0, [pc, #212]	; (800d7a0 <MX_GPIO_Init+0x18c>)
 800d6ca:	f002 fd83 	bl	80101d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	f44f 411d 	mov.w	r1, #40192	; 0x9d00
 800d6d4:	4833      	ldr	r0, [pc, #204]	; (800d7a4 <MX_GPIO_Init+0x190>)
 800d6d6:	f002 fd7d 	bl	80101d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800d6da:	2200      	movs	r2, #0
 800d6dc:	2104      	movs	r1, #4
 800d6de:	4832      	ldr	r0, [pc, #200]	; (800d7a8 <MX_GPIO_Init+0x194>)
 800d6e0:	f002 fd78 	bl	80101d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800d6e4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800d6e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d6f2:	f107 0314 	add.w	r3, r7, #20
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	4829      	ldr	r0, [pc, #164]	; (800d7a0 <MX_GPIO_Init+0x18c>)
 800d6fa:	f002 fbb9 	bl	800fe70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800d6fe:	f248 0304 	movw	r3, #32772	; 0x8004
 800d702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d704:	2300      	movs	r3, #0
 800d706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d708:	2300      	movs	r3, #0
 800d70a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d70c:	f107 0314 	add.w	r3, r7, #20
 800d710:	4619      	mov	r1, r3
 800d712:	4822      	ldr	r0, [pc, #136]	; (800d79c <MX_GPIO_Init+0x188>)
 800d714:	f002 fbac 	bl	800fe70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 800d718:	f247 0330 	movw	r3, #28720	; 0x7030
 800d71c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d71e:	2301      	movs	r3, #1
 800d720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d722:	2300      	movs	r3, #0
 800d724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d726:	2300      	movs	r3, #0
 800d728:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d72a:	f107 0314 	add.w	r3, r7, #20
 800d72e:	4619      	mov	r1, r3
 800d730:	481a      	ldr	r0, [pc, #104]	; (800d79c <MX_GPIO_Init+0x188>)
 800d732:	f002 fb9d 	bl	800fe70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d736:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d73a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d73c:	2301      	movs	r3, #1
 800d73e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d740:	2300      	movs	r3, #0
 800d742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d744:	2300      	movs	r3, #0
 800d746:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d748:	f107 0314 	add.w	r3, r7, #20
 800d74c:	4619      	mov	r1, r3
 800d74e:	4814      	ldr	r0, [pc, #80]	; (800d7a0 <MX_GPIO_Init+0x18c>)
 800d750:	f002 fb8e 	bl	800fe70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800d754:	f44f 431d 	mov.w	r3, #40192	; 0x9d00
 800d758:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d75a:	2301      	movs	r3, #1
 800d75c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d75e:	2300      	movs	r3, #0
 800d760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d762:	2300      	movs	r3, #0
 800d764:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d766:	f107 0314 	add.w	r3, r7, #20
 800d76a:	4619      	mov	r1, r3
 800d76c:	480d      	ldr	r0, [pc, #52]	; (800d7a4 <MX_GPIO_Init+0x190>)
 800d76e:	f002 fb7f 	bl	800fe70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d772:	2304      	movs	r3, #4
 800d774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d776:	2301      	movs	r3, #1
 800d778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d77a:	2300      	movs	r3, #0
 800d77c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d77e:	2300      	movs	r3, #0
 800d780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d782:	f107 0314 	add.w	r3, r7, #20
 800d786:	4619      	mov	r1, r3
 800d788:	4807      	ldr	r0, [pc, #28]	; (800d7a8 <MX_GPIO_Init+0x194>)
 800d78a:	f002 fb71 	bl	800fe70 <HAL_GPIO_Init>

}
 800d78e:	bf00      	nop
 800d790:	3728      	adds	r7, #40	; 0x28
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	40023800 	.word	0x40023800
 800d79c:	40020400 	.word	0x40020400
 800d7a0:	40020800 	.word	0x40020800
 800d7a4:	40020000 	.word	0x40020000
 800d7a8:	40020c00 	.word	0x40020c00

0800d7ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d7b0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d7b2:	e7fe      	b.n	800d7b2 <Error_Handler+0x6>

0800d7b4 <ADCinit>:
uint16_t ADC_Small[SENSOR_NUMBER];
uint16_t ADC_dif[SENSOR_NUMBER];
uint8_t cross_line=0;

extern uint16_t work_ram[BACKUP_FLASH_SECTOR_SIZE] __attribute__ ((aligned(4)));
void ADCinit(){
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b08c      	sub	sp, #48	; 0x30
 800d7b8:	af00      	add	r7, sp, #0
	Flash_load();
 800d7ba:	f7fe fb3b 	bl	800be34 <Flash_load>
	lcd_printf("ADCinit");
 800d7be:	4853      	ldr	r0, [pc, #332]	; (800d90c <ADCinit+0x158>)
 800d7c0:	f7fb fba8 	bl	8008f14 <lcd_printf>
	HAL_Delay(100);
 800d7c4:	2064      	movs	r0, #100	; 0x64
 800d7c6:	f000 ffcf 	bl	800e768 <HAL_Delay>
	uint16_t ADC_Max[SENSOR_NUMBER]={0};
 800d7ca:	1d3b      	adds	r3, r7, #4
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	601a      	str	r2, [r3, #0]
 800d7d0:	605a      	str	r2, [r3, #4]
 800d7d2:	609a      	str	r2, [r3, #8]
 800d7d4:	60da      	str	r2, [r3, #12]
 800d7d6:	611a      	str	r2, [r3, #16]
 800d7d8:	615a      	str	r2, [r3, #20]
 800d7da:	831a      	strh	r2, [r3, #24]
	uint16_t i;

	for(int z=0;z<SENSOR_NUMBER;z++){
 800d7dc:	2300      	movs	r3, #0
 800d7de:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7e0:	e008      	b.n	800d7f4 <ADCinit+0x40>
		ADC_Small[z]=10000;
 800d7e2:	4a4b      	ldr	r2, [pc, #300]	; (800d910 <ADCinit+0x15c>)
 800d7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e6:	f242 7110 	movw	r1, #10000	; 0x2710
 800d7ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int z=0;z<SENSOR_NUMBER;z++){
 800d7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f6:	2b0c      	cmp	r3, #12
 800d7f8:	ddf3      	ble.n	800d7e2 <ADCinit+0x2e>
	}
	LED2(1);
 800d7fa:	2001      	movs	r0, #1
 800d7fc:	f7fe fd12 	bl	800c224 <LED2>

	i = 0;
 800d800:	2300      	movs	r3, #0
 800d802:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while (switch_cheack2())
 800d804:	e037      	b.n	800d876 <ADCinit+0xc2>
	{
		if(analog[i] > ADC_Max[i]){
 800d806:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d808:	4a42      	ldr	r2, [pc, #264]	; (800d914 <ADCinit+0x160>)
 800d80a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800d80e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d810:	005b      	lsls	r3, r3, #1
 800d812:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800d816:	440b      	add	r3, r1
 800d818:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d90a      	bls.n	800d836 <ADCinit+0x82>
			ADC_Max[i] = analog[i];
 800d820:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d822:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d824:	493b      	ldr	r1, [pc, #236]	; (800d914 <ADCinit+0x160>)
 800d826:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800d82a:	005b      	lsls	r3, r3, #1
 800d82c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800d830:	440b      	add	r3, r1
 800d832:	f823 2c2c 	strh.w	r2, [r3, #-44]
		}
		if(analog[i] < ADC_Small[i]){
 800d836:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d838:	4a36      	ldr	r2, [pc, #216]	; (800d914 <ADCinit+0x160>)
 800d83a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800d83e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d840:	4933      	ldr	r1, [pc, #204]	; (800d910 <ADCinit+0x15c>)
 800d842:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d846:	429a      	cmp	r2, r3
 800d848:	d207      	bcs.n	800d85a <ADCinit+0xa6>
			ADC_Small[i] = analog[i];
 800d84a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d84c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d84e:	4931      	ldr	r1, [pc, #196]	; (800d914 <ADCinit+0x160>)
 800d850:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800d854:	4a2e      	ldr	r2, [pc, #184]	; (800d910 <ADCinit+0x15c>)
 800d856:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		i++;
 800d85a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d85c:	3301      	adds	r3, #1
 800d85e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if(i == SENSOR_NUMBER){
 800d860:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d862:	2b0d      	cmp	r3, #13
 800d864:	d101      	bne.n	800d86a <ADCinit+0xb6>
			i=0;
 800d866:	2300      	movs	r3, #0
 800d868:	85fb      	strh	r3, [r7, #46]	; 0x2e
		}
		LED(2);
 800d86a:	2002      	movs	r0, #2
 800d86c:	f7fe fc1e 	bl	800c0ac <LED>
		LED2(2);
 800d870:	2002      	movs	r0, #2
 800d872:	f7fe fcd7 	bl	800c224 <LED2>
	while (switch_cheack2())
 800d876:	f7fe ff23 	bl	800c6c0 <switch_cheack2>
 800d87a:	4603      	mov	r3, r0
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d1c2      	bne.n	800d806 <ADCinit+0x52>

	}
	for(int z=0;z<SENSOR_NUMBER;z++){
 800d880:	2300      	movs	r3, #0
 800d882:	627b      	str	r3, [r7, #36]	; 0x24
 800d884:	e024      	b.n	800d8d0 <ADCinit+0x11c>
		ADC_dif[z] = ADC_Max[z]-ADC_Small[z];
 800d886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d888:	005b      	lsls	r3, r3, #1
 800d88a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d88e:	4413      	add	r3, r2
 800d890:	f833 2c2c 	ldrh.w	r2, [r3, #-44]
 800d894:	491e      	ldr	r1, [pc, #120]	; (800d910 <ADCinit+0x15c>)
 800d896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d898:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d89c:	1ad3      	subs	r3, r2, r3
 800d89e:	b299      	uxth	r1, r3
 800d8a0:	4a1d      	ldr	r2, [pc, #116]	; (800d918 <ADCinit+0x164>)
 800d8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		work_ram[z] = ADC_dif[z];
 800d8a8:	4a1b      	ldr	r2, [pc, #108]	; (800d918 <ADCinit+0x164>)
 800d8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ac:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800d8b0:	4a1a      	ldr	r2, [pc, #104]	; (800d91c <ADCinit+0x168>)
 800d8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		work_ram[z+SENSOR_NUMBER] = ADC_Small[z];
 800d8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ba:	330d      	adds	r3, #13
 800d8bc:	4914      	ldr	r1, [pc, #80]	; (800d910 <ADCinit+0x15c>)
 800d8be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8c0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800d8c4:	4a15      	ldr	r2, [pc, #84]	; (800d91c <ADCinit+0x168>)
 800d8c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int z=0;z<SENSOR_NUMBER;z++){
 800d8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	627b      	str	r3, [r7, #36]	; 0x24
 800d8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d2:	2b0c      	cmp	r3, #12
 800d8d4:	ddd7      	ble.n	800d886 <ADCinit+0xd2>
	}
	Flash_store();
 800d8d6:	f7fe fabd 	bl	800be54 <Flash_store>
	for(int z=0;z<SENSOR_NUMBER;z++){
 800d8da:	2300      	movs	r3, #0
 800d8dc:	623b      	str	r3, [r7, #32]
 800d8de:	e00b      	b.n	800d8f8 <ADCinit+0x144>
		printf("%d,%d\r\n",z,ADC_Small[z]);
 800d8e0:	4a0b      	ldr	r2, [pc, #44]	; (800d910 <ADCinit+0x15c>)
 800d8e2:	6a3b      	ldr	r3, [r7, #32]
 800d8e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	6a39      	ldr	r1, [r7, #32]
 800d8ec:	480c      	ldr	r0, [pc, #48]	; (800d920 <ADCinit+0x16c>)
 800d8ee:	f006 fcdd 	bl	80142ac <iprintf>
	for(int z=0;z<SENSOR_NUMBER;z++){
 800d8f2:	6a3b      	ldr	r3, [r7, #32]
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	623b      	str	r3, [r7, #32]
 800d8f8:	6a3b      	ldr	r3, [r7, #32]
 800d8fa:	2b0c      	cmp	r3, #12
 800d8fc:	ddf0      	ble.n	800d8e0 <ADCinit+0x12c>
	}
//	for(int z=0;z<SENSOR_NUMBER;z++){
//		printf("%d,%d\r\n",z,ADC_Max[z]);
//	}
	LED2(3);
 800d8fe:	2003      	movs	r0, #3
 800d900:	f7fe fc90 	bl	800c224 <LED2>

}
 800d904:	bf00      	nop
 800d906:	3730      	adds	r7, #48	; 0x30
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	0801648c 	.word	0x0801648c
 800d910:	20014674 	.word	0x20014674
 800d914:	20014318 	.word	0x20014318
 800d918:	20014658 	.word	0x20014658
 800d91c:	2000c318 	.word	0x2000c318
 800d920:	08016494 	.word	0x08016494
 800d924:	00000000 	.word	0x00000000

0800d928 <senseGet>:
inline float senseGet(){
 800d928:	b5b0      	push	{r4, r5, r7, lr}
 800d92a:	b09e      	sub	sp, #120	; 0x78
 800d92c:	af00      	add	r7, sp, #0
	float sensL=0;
 800d92e:	f04f 0300 	mov.w	r3, #0
 800d932:	66fb      	str	r3, [r7, #108]	; 0x6c
	float sensR=0;
 800d934:	f04f 0300 	mov.w	r3, #0
 800d938:	66bb      	str	r3, [r7, #104]	; 0x68
	uint32_t sens[SENSOR_NUMBER];
	float sensRatio[SENSOR_NUMBER];
	static float sens_buff[SENSOR_NUMBER];
	static uint8_t error_count=0;
	uint8_t black= 0;
 800d93a:	2300      	movs	r3, #0
 800d93c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
//		}
//		if(sens[i] <= ADC_Small[i]){
//			sens[i] = ADC_Small[i] ;
//		}
//	}
	for(int i=0; i<SENSOR_NUMBER; i++){
 800d940:	2300      	movs	r3, #0
 800d942:	673b      	str	r3, [r7, #112]	; 0x70
 800d944:	e08b      	b.n	800da5e <senseGet+0x136>
		sens[i] = analog[i];
 800d946:	4ad2      	ldr	r2, [pc, #840]	; (800dc90 <senseGet+0x368>)
 800d948:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d94a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d94e:	461a      	mov	r2, r3
 800d950:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800d958:	440b      	add	r3, r1
 800d95a:	f843 2c44 	str.w	r2, [r3, #-68]
		if(sens[i] >=  (ADC_Small[i]+ADC_dif[i])){
 800d95e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d960:	009b      	lsls	r3, r3, #2
 800d962:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800d966:	4413      	add	r3, r2
 800d968:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d96c:	49c9      	ldr	r1, [pc, #804]	; (800dc94 <senseGet+0x36c>)
 800d96e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d970:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800d974:	4610      	mov	r0, r2
 800d976:	49c8      	ldr	r1, [pc, #800]	; (800dc98 <senseGet+0x370>)
 800d978:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d97a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800d97e:	4402      	add	r2, r0
 800d980:	4293      	cmp	r3, r2
 800d982:	d311      	bcc.n	800d9a8 <senseGet+0x80>
			//ADC_dif[i] = sens[i]-ADC_Small[i];
			sens[i] =  (ADC_Small[i]+ADC_dif[i]);
 800d984:	4ac3      	ldr	r2, [pc, #780]	; (800dc94 <senseGet+0x36c>)
 800d986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d988:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d98c:	4619      	mov	r1, r3
 800d98e:	4ac2      	ldr	r2, [pc, #776]	; (800dc98 <senseGet+0x370>)
 800d990:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d996:	440b      	add	r3, r1
 800d998:	461a      	mov	r2, r3
 800d99a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800d9a2:	440b      	add	r3, r1
 800d9a4:	f843 2c44 	str.w	r2, [r3, #-68]
		}
		if(sens[i] <= ADC_Small[i]){
 800d9a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d9aa:	009b      	lsls	r3, r3, #2
 800d9ac:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800d9b0:	4413      	add	r3, r2
 800d9b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d9b6:	49b7      	ldr	r1, [pc, #732]	; (800dc94 <senseGet+0x36c>)
 800d9b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d9ba:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d80b      	bhi.n	800d9da <senseGet+0xb2>
			sens[i] = ADC_Small[i] ;
 800d9c2:	4ab4      	ldr	r2, [pc, #720]	; (800dc94 <senseGet+0x36c>)
 800d9c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d9c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d9ce:	009b      	lsls	r3, r3, #2
 800d9d0:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800d9d4:	440b      	add	r3, r1
 800d9d6:	f843 2c44 	str.w	r2, [r3, #-68]
		}
		sensRatio[i] = (1000.0f/(float)ADC_dif[i])*((float)(sens[i]-(float)ADC_Small[i]));
 800d9da:	4aaf      	ldr	r2, [pc, #700]	; (800dc98 <senseGet+0x370>)
 800d9dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d9de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9e2:	ee07 3a90 	vmov	s15, r3
 800d9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9ea:	eddf 6aac 	vldr	s13, [pc, #688]	; 800dc9c <senseGet+0x374>
 800d9ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d9f4:	009b      	lsls	r3, r3, #2
 800d9f6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800d9fa:	4413      	add	r3, r2
 800d9fc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800da00:	ee07 3a90 	vmov	s15, r3
 800da04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da08:	4aa2      	ldr	r2, [pc, #648]	; (800dc94 <senseGet+0x36c>)
 800da0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da10:	ee07 3a90 	vmov	s15, r3
 800da14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da18:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800da1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da22:	009b      	lsls	r3, r3, #2
 800da24:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800da28:	4413      	add	r3, r2
 800da2a:	3b78      	subs	r3, #120	; 0x78
 800da2c:	edc3 7a00 	vstr	s15, [r3]
//		sensRatio[i] = (sensRatio_buff[i]+sensRatio[i])/2;
//		sensRatio_buff[i]=sensRatio[i];
		if(sensRatio[i] >= 600) black++;
 800da30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da32:	009b      	lsls	r3, r3, #2
 800da34:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800da38:	4413      	add	r3, r2
 800da3a:	3b78      	subs	r3, #120	; 0x78
 800da3c:	edd3 7a00 	vldr	s15, [r3]
 800da40:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800dca0 <senseGet+0x378>
 800da44:	eef4 7ac7 	vcmpe.f32	s15, s14
 800da48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da4c:	db04      	blt.n	800da58 <senseGet+0x130>
 800da4e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800da52:	3301      	adds	r3, #1
 800da54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	for(int i=0; i<SENSOR_NUMBER; i++){
 800da58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da5a:	3301      	adds	r3, #1
 800da5c:	673b      	str	r3, [r7, #112]	; 0x70
 800da5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da60:	2b0c      	cmp	r3, #12
 800da62:	f77f af70 	ble.w	800d946 <senseGet+0x1e>
//		if(i<=5)sensL += sensRatio[i];
//		if(i>=7)sensR += sensRatio[i];
	}
	sensL = sensRatio[5]+sensRatio[4]*1.4+sensRatio[3]*1.8+sensRatio[2]*2.2+sensRatio[1]*2.6+sensRatio[0]*3.0;
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	4618      	mov	r0, r3
 800da6a:	f7fa fca5 	bl	80083b8 <__aeabi_f2d>
 800da6e:	4604      	mov	r4, r0
 800da70:	460d      	mov	r5, r1
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	4618      	mov	r0, r3
 800da76:	f7fa fc9f 	bl	80083b8 <__aeabi_f2d>
 800da7a:	a37d      	add	r3, pc, #500	; (adr r3, 800dc70 <senseGet+0x348>)
 800da7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da80:	f7fa fcf2 	bl	8008468 <__aeabi_dmul>
 800da84:	4602      	mov	r2, r0
 800da86:	460b      	mov	r3, r1
 800da88:	4620      	mov	r0, r4
 800da8a:	4629      	mov	r1, r5
 800da8c:	f7fa fb36 	bl	80080fc <__adddf3>
 800da90:	4603      	mov	r3, r0
 800da92:	460c      	mov	r4, r1
 800da94:	4625      	mov	r5, r4
 800da96:	461c      	mov	r4, r3
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	4618      	mov	r0, r3
 800da9c:	f7fa fc8c 	bl	80083b8 <__aeabi_f2d>
 800daa0:	a375      	add	r3, pc, #468	; (adr r3, 800dc78 <senseGet+0x350>)
 800daa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa6:	f7fa fcdf 	bl	8008468 <__aeabi_dmul>
 800daaa:	4602      	mov	r2, r0
 800daac:	460b      	mov	r3, r1
 800daae:	4620      	mov	r0, r4
 800dab0:	4629      	mov	r1, r5
 800dab2:	f7fa fb23 	bl	80080fc <__adddf3>
 800dab6:	4603      	mov	r3, r0
 800dab8:	460c      	mov	r4, r1
 800daba:	4625      	mov	r5, r4
 800dabc:	461c      	mov	r4, r3
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7fa fc79 	bl	80083b8 <__aeabi_f2d>
 800dac6:	a36e      	add	r3, pc, #440	; (adr r3, 800dc80 <senseGet+0x358>)
 800dac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dacc:	f7fa fccc 	bl	8008468 <__aeabi_dmul>
 800dad0:	4602      	mov	r2, r0
 800dad2:	460b      	mov	r3, r1
 800dad4:	4620      	mov	r0, r4
 800dad6:	4629      	mov	r1, r5
 800dad8:	f7fa fb10 	bl	80080fc <__adddf3>
 800dadc:	4603      	mov	r3, r0
 800dade:	460c      	mov	r4, r1
 800dae0:	4625      	mov	r5, r4
 800dae2:	461c      	mov	r4, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7fa fc66 	bl	80083b8 <__aeabi_f2d>
 800daec:	a366      	add	r3, pc, #408	; (adr r3, 800dc88 <senseGet+0x360>)
 800daee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf2:	f7fa fcb9 	bl	8008468 <__aeabi_dmul>
 800daf6:	4602      	mov	r2, r0
 800daf8:	460b      	mov	r3, r1
 800dafa:	4620      	mov	r0, r4
 800dafc:	4629      	mov	r1, r5
 800dafe:	f7fa fafd 	bl	80080fc <__adddf3>
 800db02:	4603      	mov	r3, r0
 800db04:	460c      	mov	r4, r1
 800db06:	4625      	mov	r5, r4
 800db08:	461c      	mov	r4, r3
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	4618      	mov	r0, r3
 800db0e:	f7fa fc53 	bl	80083b8 <__aeabi_f2d>
 800db12:	f04f 0200 	mov.w	r2, #0
 800db16:	4b63      	ldr	r3, [pc, #396]	; (800dca4 <senseGet+0x37c>)
 800db18:	f7fa fca6 	bl	8008468 <__aeabi_dmul>
 800db1c:	4602      	mov	r2, r0
 800db1e:	460b      	mov	r3, r1
 800db20:	4620      	mov	r0, r4
 800db22:	4629      	mov	r1, r5
 800db24:	f7fa faea 	bl	80080fc <__adddf3>
 800db28:	4603      	mov	r3, r0
 800db2a:	460c      	mov	r4, r1
 800db2c:	4618      	mov	r0, r3
 800db2e:	4621      	mov	r1, r4
 800db30:	f7fa ff72 	bl	8008a18 <__aeabi_d2f>
 800db34:	4603      	mov	r3, r0
 800db36:	66fb      	str	r3, [r7, #108]	; 0x6c
	sensR = sensRatio[7]+sensRatio[8]*1.4+sensRatio[9]*1.8+sensRatio[10]*2.2+sensRatio[11]*2.6+sensRatio[12]*3.0;
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	4618      	mov	r0, r3
 800db3c:	f7fa fc3c 	bl	80083b8 <__aeabi_f2d>
 800db40:	4604      	mov	r4, r0
 800db42:	460d      	mov	r5, r1
 800db44:	6a3b      	ldr	r3, [r7, #32]
 800db46:	4618      	mov	r0, r3
 800db48:	f7fa fc36 	bl	80083b8 <__aeabi_f2d>
 800db4c:	a348      	add	r3, pc, #288	; (adr r3, 800dc70 <senseGet+0x348>)
 800db4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db52:	f7fa fc89 	bl	8008468 <__aeabi_dmul>
 800db56:	4602      	mov	r2, r0
 800db58:	460b      	mov	r3, r1
 800db5a:	4620      	mov	r0, r4
 800db5c:	4629      	mov	r1, r5
 800db5e:	f7fa facd 	bl	80080fc <__adddf3>
 800db62:	4603      	mov	r3, r0
 800db64:	460c      	mov	r4, r1
 800db66:	4625      	mov	r5, r4
 800db68:	461c      	mov	r4, r3
 800db6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6c:	4618      	mov	r0, r3
 800db6e:	f7fa fc23 	bl	80083b8 <__aeabi_f2d>
 800db72:	a341      	add	r3, pc, #260	; (adr r3, 800dc78 <senseGet+0x350>)
 800db74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db78:	f7fa fc76 	bl	8008468 <__aeabi_dmul>
 800db7c:	4602      	mov	r2, r0
 800db7e:	460b      	mov	r3, r1
 800db80:	4620      	mov	r0, r4
 800db82:	4629      	mov	r1, r5
 800db84:	f7fa faba 	bl	80080fc <__adddf3>
 800db88:	4603      	mov	r3, r0
 800db8a:	460c      	mov	r4, r1
 800db8c:	4625      	mov	r5, r4
 800db8e:	461c      	mov	r4, r3
 800db90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db92:	4618      	mov	r0, r3
 800db94:	f7fa fc10 	bl	80083b8 <__aeabi_f2d>
 800db98:	a339      	add	r3, pc, #228	; (adr r3, 800dc80 <senseGet+0x358>)
 800db9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db9e:	f7fa fc63 	bl	8008468 <__aeabi_dmul>
 800dba2:	4602      	mov	r2, r0
 800dba4:	460b      	mov	r3, r1
 800dba6:	4620      	mov	r0, r4
 800dba8:	4629      	mov	r1, r5
 800dbaa:	f7fa faa7 	bl	80080fc <__adddf3>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	460c      	mov	r4, r1
 800dbb2:	4625      	mov	r5, r4
 800dbb4:	461c      	mov	r4, r3
 800dbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7fa fbfd 	bl	80083b8 <__aeabi_f2d>
 800dbbe:	a332      	add	r3, pc, #200	; (adr r3, 800dc88 <senseGet+0x360>)
 800dbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc4:	f7fa fc50 	bl	8008468 <__aeabi_dmul>
 800dbc8:	4602      	mov	r2, r0
 800dbca:	460b      	mov	r3, r1
 800dbcc:	4620      	mov	r0, r4
 800dbce:	4629      	mov	r1, r5
 800dbd0:	f7fa fa94 	bl	80080fc <__adddf3>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	460c      	mov	r4, r1
 800dbd8:	4625      	mov	r5, r4
 800dbda:	461c      	mov	r4, r3
 800dbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7fa fbea 	bl	80083b8 <__aeabi_f2d>
 800dbe4:	f04f 0200 	mov.w	r2, #0
 800dbe8:	4b2e      	ldr	r3, [pc, #184]	; (800dca4 <senseGet+0x37c>)
 800dbea:	f7fa fc3d 	bl	8008468 <__aeabi_dmul>
 800dbee:	4602      	mov	r2, r0
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	4629      	mov	r1, r5
 800dbf6:	f7fa fa81 	bl	80080fc <__adddf3>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	460c      	mov	r4, r1
 800dbfe:	4618      	mov	r0, r3
 800dc00:	4621      	mov	r1, r4
 800dc02:	f7fa ff09 	bl	8008a18 <__aeabi_d2f>
 800dc06:	4603      	mov	r3, r0
 800dc08:	66bb      	str	r3, [r7, #104]	; 0x68
//		sensR += sensRatio[i];
//	}
	//if ((sensL+sensR)/12<=400){
//	if ((sensRatio[0]+sensRatio[12])/2<=500 /*|| (sensRatio[1]+sensRatio[11])/2 <= 650*/) {
//	if (((sensRatio[0]+sensRatio[1]+sensRatio[2])/3<=500) && ((sensRatio[10]+sensRatio[11]+sensRatio[12])/3<=500)) {
	if(sensRatio[0]<=400){
 800dc0a:	edd7 7a00 	vldr	s15, [r7]
 800dc0e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800dca8 <senseGet+0x380>
 800dc12:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc1a:	d806      	bhi.n	800dc2a <senseGet+0x302>
		whiteL=true;
 800dc1c:	4b23      	ldr	r3, [pc, #140]	; (800dcac <senseGet+0x384>)
 800dc1e:	2201      	movs	r2, #1
 800dc20:	701a      	strb	r2, [r3, #0]
		log_count_buff=log_count;
 800dc22:	4b23      	ldr	r3, [pc, #140]	; (800dcb0 <senseGet+0x388>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4a23      	ldr	r2, [pc, #140]	; (800dcb4 <senseGet+0x38c>)
 800dc28:	6013      	str	r3, [r2, #0]
	}
	if(whiteL){
 800dc2a:	4b20      	ldr	r3, [pc, #128]	; (800dcac <senseGet+0x384>)
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d055      	beq.n	800dcde <senseGet+0x3b6>
		check_white++;
 800dc32:	4b21      	ldr	r3, [pc, #132]	; (800dcb8 <senseGet+0x390>)
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	3301      	adds	r3, #1
 800dc38:	b2da      	uxtb	r2, r3
 800dc3a:	4b1f      	ldr	r3, [pc, #124]	; (800dcb8 <senseGet+0x390>)
 800dc3c:	701a      	strb	r2, [r3, #0]
		if(sensRatio[12]<=400){
 800dc3e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800dc42:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800dca8 <senseGet+0x380>
 800dc46:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc4e:	d839      	bhi.n	800dcc4 <senseGet+0x39c>
			cross_line=true;
 800dc50:	4b1a      	ldr	r3, [pc, #104]	; (800dcbc <senseGet+0x394>)
 800dc52:	2201      	movs	r2, #1
 800dc54:	701a      	strb	r2, [r3, #0]
			cross_flag=0;
 800dc56:	4b1a      	ldr	r3, [pc, #104]	; (800dcc0 <senseGet+0x398>)
 800dc58:	2200      	movs	r2, #0
 800dc5a:	701a      	strb	r2, [r3, #0]
			whiteL=0;
 800dc5c:	4b13      	ldr	r3, [pc, #76]	; (800dcac <senseGet+0x384>)
 800dc5e:	2200      	movs	r2, #0
 800dc60:	701a      	strb	r2, [r3, #0]
			check_white =0;
 800dc62:	4b15      	ldr	r3, [pc, #84]	; (800dcb8 <senseGet+0x390>)
 800dc64:	2200      	movs	r2, #0
 800dc66:	701a      	strb	r2, [r3, #0]
 800dc68:	e02c      	b.n	800dcc4 <senseGet+0x39c>
 800dc6a:	bf00      	nop
 800dc6c:	f3af 8000 	nop.w
 800dc70:	66666666 	.word	0x66666666
 800dc74:	3ff66666 	.word	0x3ff66666
 800dc78:	cccccccd 	.word	0xcccccccd
 800dc7c:	3ffccccc 	.word	0x3ffccccc
 800dc80:	9999999a 	.word	0x9999999a
 800dc84:	40019999 	.word	0x40019999
 800dc88:	cccccccd 	.word	0xcccccccd
 800dc8c:	4004cccc 	.word	0x4004cccc
 800dc90:	20014318 	.word	0x20014318
 800dc94:	20014674 	.word	0x20014674
 800dc98:	20014658 	.word	0x20014658
 800dc9c:	447a0000 	.word	0x447a0000
 800dca0:	44160000 	.word	0x44160000
 800dca4:	40080000 	.word	0x40080000
 800dca8:	43c80000 	.word	0x43c80000
 800dcac:	2000c2d1 	.word	0x2000c2d1
 800dcb0:	2000c0b4 	.word	0x2000c0b4
 800dcb4:	2000c2d4 	.word	0x2000c2d4
 800dcb8:	2000c2d8 	.word	0x2000c2d8
 800dcbc:	2000c2d0 	.word	0x2000c2d0
 800dcc0:	2000c2bd 	.word	0x2000c2bd
		}
		if((log_count-log_count_buff)>=2) {
 800dcc4:	4b36      	ldr	r3, [pc, #216]	; (800dda0 <senseGet+0x478>)
 800dcc6:	681a      	ldr	r2, [r3, #0]
 800dcc8:	4b36      	ldr	r3, [pc, #216]	; (800dda4 <senseGet+0x47c>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	1ad3      	subs	r3, r2, r3
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d905      	bls.n	800dcde <senseGet+0x3b6>
			check_white=0;
 800dcd2:	4b35      	ldr	r3, [pc, #212]	; (800dda8 <senseGet+0x480>)
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	701a      	strb	r2, [r3, #0]
			whiteL=0;
 800dcd8:	4b34      	ldr	r3, [pc, #208]	; (800ddac <senseGet+0x484>)
 800dcda:	2200      	movs	r2, #0
 800dcdc:	701a      	strb	r2, [r3, #0]
		}
	}
	if(sensRatio[12]<=400){
 800dcde:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800dce2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800ddb0 <senseGet+0x488>
 800dce6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dcea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcee:	d806      	bhi.n	800dcfe <senseGet+0x3d6>
		whiteR=true;
 800dcf0:	4b30      	ldr	r3, [pc, #192]	; (800ddb4 <senseGet+0x48c>)
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	701a      	strb	r2, [r3, #0]
		log_count_buff=log_count;
 800dcf6:	4b2a      	ldr	r3, [pc, #168]	; (800dda0 <senseGet+0x478>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4a2a      	ldr	r2, [pc, #168]	; (800dda4 <senseGet+0x47c>)
 800dcfc:	6013      	str	r3, [r2, #0]
	}
	if(whiteR){
 800dcfe:	4b2d      	ldr	r3, [pc, #180]	; (800ddb4 <senseGet+0x48c>)
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d027      	beq.n	800dd56 <senseGet+0x42e>
		check_white++;
 800dd06:	4b28      	ldr	r3, [pc, #160]	; (800dda8 <senseGet+0x480>)
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	b2da      	uxtb	r2, r3
 800dd0e:	4b26      	ldr	r3, [pc, #152]	; (800dda8 <senseGet+0x480>)
 800dd10:	701a      	strb	r2, [r3, #0]
		if(sensRatio[0]<=400){
 800dd12:	edd7 7a00 	vldr	s15, [r7]
 800dd16:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800ddb0 <senseGet+0x488>
 800dd1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dd1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd22:	d80b      	bhi.n	800dd3c <senseGet+0x414>
			cross_line=true;
 800dd24:	4b24      	ldr	r3, [pc, #144]	; (800ddb8 <senseGet+0x490>)
 800dd26:	2201      	movs	r2, #1
 800dd28:	701a      	strb	r2, [r3, #0]
			cross_flag=0;
 800dd2a:	4b24      	ldr	r3, [pc, #144]	; (800ddbc <senseGet+0x494>)
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	701a      	strb	r2, [r3, #0]
			whiteR=0;
 800dd30:	4b20      	ldr	r3, [pc, #128]	; (800ddb4 <senseGet+0x48c>)
 800dd32:	2200      	movs	r2, #0
 800dd34:	701a      	strb	r2, [r3, #0]
			check_white =0;
 800dd36:	4b1c      	ldr	r3, [pc, #112]	; (800dda8 <senseGet+0x480>)
 800dd38:	2200      	movs	r2, #0
 800dd3a:	701a      	strb	r2, [r3, #0]
		}
		if((log_count-log_count_buff)>=2) {
 800dd3c:	4b18      	ldr	r3, [pc, #96]	; (800dda0 <senseGet+0x478>)
 800dd3e:	681a      	ldr	r2, [r3, #0]
 800dd40:	4b18      	ldr	r3, [pc, #96]	; (800dda4 <senseGet+0x47c>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	1ad3      	subs	r3, r2, r3
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d905      	bls.n	800dd56 <senseGet+0x42e>
			check_white=0;
 800dd4a:	4b17      	ldr	r3, [pc, #92]	; (800dda8 <senseGet+0x480>)
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	701a      	strb	r2, [r3, #0]
			whiteR=0;
 800dd50:	4b18      	ldr	r3, [pc, #96]	; (800ddb4 <senseGet+0x48c>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	701a      	strb	r2, [r3, #0]
//		if(sensRatio[i] >= 600) black++;
//	}

	//if((sensL-sensR) >=  )
//	if ((sensRatio[6]>=900) && (sensRatio[5])>=900 && (sensRatio[7])>=900) error_count++;
	if(black >= 13){
 800dd56:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dd5a:	2b0c      	cmp	r3, #12
 800dd5c:	d909      	bls.n	800dd72 <senseGet+0x44a>
		error_count++;
 800dd5e:	4b18      	ldr	r3, [pc, #96]	; (800ddc0 <senseGet+0x498>)
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	3301      	adds	r3, #1
 800dd64:	b2da      	uxtb	r2, r3
 800dd66:	4b16      	ldr	r3, [pc, #88]	; (800ddc0 <senseGet+0x498>)
 800dd68:	701a      	strb	r2, [r3, #0]
		black=0;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800dd70:	e005      	b.n	800dd7e <senseGet+0x456>
	}
	else {
		error_count=0;
 800dd72:	4b13      	ldr	r3, [pc, #76]	; (800ddc0 <senseGet+0x498>)
 800dd74:	2200      	movs	r2, #0
 800dd76:	701a      	strb	r2, [r3, #0]
		black=0;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	}
	//if ((sensRatio[0]<=900 && sensRatio[12]<=900)) error_count++;
	//if ((sensRatio[6])>=700) error_count++;
//	else if ((sensRatio[6])<=700)error_count=0;
	if(error_count>110)error();
 800dd7e:	4b10      	ldr	r3, [pc, #64]	; (800ddc0 <senseGet+0x498>)
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	2b6e      	cmp	r3, #110	; 0x6e
 800dd84:	d901      	bls.n	800dd8a <senseGet+0x462>
 800dd86:	f7fe fafb 	bl	800c380 <error>
	return sensL-sensR;
 800dd8a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800dd8e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800dd92:	ee77 7a67 	vsub.f32	s15, s14, s15
	//return sensRatio[6];

}
 800dd96:	eeb0 0a67 	vmov.f32	s0, s15
 800dd9a:	3778      	adds	r7, #120	; 0x78
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bdb0      	pop	{r4, r5, r7, pc}
 800dda0:	2000c0b4 	.word	0x2000c0b4
 800dda4:	2000c2d4 	.word	0x2000c2d4
 800dda8:	2000c2d8 	.word	0x2000c2d8
 800ddac:	2000c2d1 	.word	0x2000c2d1
 800ddb0:	43c80000 	.word	0x43c80000
 800ddb4:	2000c2d9 	.word	0x2000c2d9
 800ddb8:	2000c2d0 	.word	0x2000c2d0
 800ddbc:	2000c2bd 	.word	0x2000c2bd
 800ddc0:	2000c2da 	.word	0x2000c2da

0800ddc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b083      	sub	sp, #12
 800ddc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ddca:	2300      	movs	r3, #0
 800ddcc:	607b      	str	r3, [r7, #4]
 800ddce:	4b10      	ldr	r3, [pc, #64]	; (800de10 <HAL_MspInit+0x4c>)
 800ddd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddd2:	4a0f      	ldr	r2, [pc, #60]	; (800de10 <HAL_MspInit+0x4c>)
 800ddd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ddd8:	6453      	str	r3, [r2, #68]	; 0x44
 800ddda:	4b0d      	ldr	r3, [pc, #52]	; (800de10 <HAL_MspInit+0x4c>)
 800dddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dde2:	607b      	str	r3, [r7, #4]
 800dde4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800dde6:	2300      	movs	r3, #0
 800dde8:	603b      	str	r3, [r7, #0]
 800ddea:	4b09      	ldr	r3, [pc, #36]	; (800de10 <HAL_MspInit+0x4c>)
 800ddec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddee:	4a08      	ldr	r2, [pc, #32]	; (800de10 <HAL_MspInit+0x4c>)
 800ddf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ddf4:	6413      	str	r3, [r2, #64]	; 0x40
 800ddf6:	4b06      	ldr	r3, [pc, #24]	; (800de10 <HAL_MspInit+0x4c>)
 800ddf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ddfe:	603b      	str	r3, [r7, #0]
 800de00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800de02:	bf00      	nop
 800de04:	370c      	adds	r7, #12
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop
 800de10:	40023800 	.word	0x40023800

0800de14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b08c      	sub	sp, #48	; 0x30
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de1c:	f107 031c 	add.w	r3, r7, #28
 800de20:	2200      	movs	r2, #0
 800de22:	601a      	str	r2, [r3, #0]
 800de24:	605a      	str	r2, [r3, #4]
 800de26:	609a      	str	r2, [r3, #8]
 800de28:	60da      	str	r2, [r3, #12]
 800de2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4a49      	ldr	r2, [pc, #292]	; (800df58 <HAL_ADC_MspInit+0x144>)
 800de32:	4293      	cmp	r3, r2
 800de34:	f040 808c 	bne.w	800df50 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800de38:	2300      	movs	r3, #0
 800de3a:	61bb      	str	r3, [r7, #24]
 800de3c:	4b47      	ldr	r3, [pc, #284]	; (800df5c <HAL_ADC_MspInit+0x148>)
 800de3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de40:	4a46      	ldr	r2, [pc, #280]	; (800df5c <HAL_ADC_MspInit+0x148>)
 800de42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de46:	6453      	str	r3, [r2, #68]	; 0x44
 800de48:	4b44      	ldr	r3, [pc, #272]	; (800df5c <HAL_ADC_MspInit+0x148>)
 800de4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de50:	61bb      	str	r3, [r7, #24]
 800de52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800de54:	2300      	movs	r3, #0
 800de56:	617b      	str	r3, [r7, #20]
 800de58:	4b40      	ldr	r3, [pc, #256]	; (800df5c <HAL_ADC_MspInit+0x148>)
 800de5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de5c:	4a3f      	ldr	r2, [pc, #252]	; (800df5c <HAL_ADC_MspInit+0x148>)
 800de5e:	f043 0304 	orr.w	r3, r3, #4
 800de62:	6313      	str	r3, [r2, #48]	; 0x30
 800de64:	4b3d      	ldr	r3, [pc, #244]	; (800df5c <HAL_ADC_MspInit+0x148>)
 800de66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de68:	f003 0304 	and.w	r3, r3, #4
 800de6c:	617b      	str	r3, [r7, #20]
 800de6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de70:	2300      	movs	r3, #0
 800de72:	613b      	str	r3, [r7, #16]
 800de74:	4b39      	ldr	r3, [pc, #228]	; (800df5c <HAL_ADC_MspInit+0x148>)
 800de76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de78:	4a38      	ldr	r2, [pc, #224]	; (800df5c <HAL_ADC_MspInit+0x148>)
 800de7a:	f043 0301 	orr.w	r3, r3, #1
 800de7e:	6313      	str	r3, [r2, #48]	; 0x30
 800de80:	4b36      	ldr	r3, [pc, #216]	; (800df5c <HAL_ADC_MspInit+0x148>)
 800de82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de84:	f003 0301 	and.w	r3, r3, #1
 800de88:	613b      	str	r3, [r7, #16]
 800de8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800de8c:	2300      	movs	r3, #0
 800de8e:	60fb      	str	r3, [r7, #12]
 800de90:	4b32      	ldr	r3, [pc, #200]	; (800df5c <HAL_ADC_MspInit+0x148>)
 800de92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de94:	4a31      	ldr	r2, [pc, #196]	; (800df5c <HAL_ADC_MspInit+0x148>)
 800de96:	f043 0302 	orr.w	r3, r3, #2
 800de9a:	6313      	str	r3, [r2, #48]	; 0x30
 800de9c:	4b2f      	ldr	r3, [pc, #188]	; (800df5c <HAL_ADC_MspInit+0x148>)
 800de9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dea0:	f003 0302 	and.w	r3, r3, #2
 800dea4:	60fb      	str	r3, [r7, #12]
 800dea6:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800dea8:	233e      	movs	r3, #62	; 0x3e
 800deaa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800deac:	2303      	movs	r3, #3
 800deae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800deb0:	2300      	movs	r3, #0
 800deb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800deb4:	f107 031c 	add.w	r3, r7, #28
 800deb8:	4619      	mov	r1, r3
 800deba:	4829      	ldr	r0, [pc, #164]	; (800df60 <HAL_ADC_MspInit+0x14c>)
 800debc:	f001 ffd8 	bl	800fe70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800dec0:	233f      	movs	r3, #63	; 0x3f
 800dec2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dec4:	2303      	movs	r3, #3
 800dec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dec8:	2300      	movs	r3, #0
 800deca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800decc:	f107 031c 	add.w	r3, r7, #28
 800ded0:	4619      	mov	r1, r3
 800ded2:	4824      	ldr	r0, [pc, #144]	; (800df64 <HAL_ADC_MspInit+0x150>)
 800ded4:	f001 ffcc 	bl	800fe70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800ded8:	2303      	movs	r3, #3
 800deda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dedc:	2303      	movs	r3, #3
 800dede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dee0:	2300      	movs	r3, #0
 800dee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dee4:	f107 031c 	add.w	r3, r7, #28
 800dee8:	4619      	mov	r1, r3
 800deea:	481f      	ldr	r0, [pc, #124]	; (800df68 <HAL_ADC_MspInit+0x154>)
 800deec:	f001 ffc0 	bl	800fe70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800def0:	4b1e      	ldr	r3, [pc, #120]	; (800df6c <HAL_ADC_MspInit+0x158>)
 800def2:	4a1f      	ldr	r2, [pc, #124]	; (800df70 <HAL_ADC_MspInit+0x15c>)
 800def4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800def6:	4b1d      	ldr	r3, [pc, #116]	; (800df6c <HAL_ADC_MspInit+0x158>)
 800def8:	2200      	movs	r2, #0
 800defa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800defc:	4b1b      	ldr	r3, [pc, #108]	; (800df6c <HAL_ADC_MspInit+0x158>)
 800defe:	2200      	movs	r2, #0
 800df00:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800df02:	4b1a      	ldr	r3, [pc, #104]	; (800df6c <HAL_ADC_MspInit+0x158>)
 800df04:	2200      	movs	r2, #0
 800df06:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800df08:	4b18      	ldr	r3, [pc, #96]	; (800df6c <HAL_ADC_MspInit+0x158>)
 800df0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800df0e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800df10:	4b16      	ldr	r3, [pc, #88]	; (800df6c <HAL_ADC_MspInit+0x158>)
 800df12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df16:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800df18:	4b14      	ldr	r3, [pc, #80]	; (800df6c <HAL_ADC_MspInit+0x158>)
 800df1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800df1e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800df20:	4b12      	ldr	r3, [pc, #72]	; (800df6c <HAL_ADC_MspInit+0x158>)
 800df22:	f44f 7280 	mov.w	r2, #256	; 0x100
 800df26:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800df28:	4b10      	ldr	r3, [pc, #64]	; (800df6c <HAL_ADC_MspInit+0x158>)
 800df2a:	2200      	movs	r2, #0
 800df2c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800df2e:	4b0f      	ldr	r3, [pc, #60]	; (800df6c <HAL_ADC_MspInit+0x158>)
 800df30:	2200      	movs	r2, #0
 800df32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800df34:	480d      	ldr	r0, [pc, #52]	; (800df6c <HAL_ADC_MspInit+0x158>)
 800df36:	f001 f935 	bl	800f1a4 <HAL_DMA_Init>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d001      	beq.n	800df44 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800df40:	f7ff fc34 	bl	800d7ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	4a09      	ldr	r2, [pc, #36]	; (800df6c <HAL_ADC_MspInit+0x158>)
 800df48:	639a      	str	r2, [r3, #56]	; 0x38
 800df4a:	4a08      	ldr	r2, [pc, #32]	; (800df6c <HAL_ADC_MspInit+0x158>)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800df50:	bf00      	nop
 800df52:	3730      	adds	r7, #48	; 0x30
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}
 800df58:	40012000 	.word	0x40012000
 800df5c:	40023800 	.word	0x40023800
 800df60:	40020800 	.word	0x40020800
 800df64:	40020000 	.word	0x40020000
 800df68:	40020400 	.word	0x40020400
 800df6c:	20014440 	.word	0x20014440
 800df70:	40026410 	.word	0x40026410

0800df74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b08a      	sub	sp, #40	; 0x28
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df7c:	f107 0314 	add.w	r3, r7, #20
 800df80:	2200      	movs	r2, #0
 800df82:	601a      	str	r2, [r3, #0]
 800df84:	605a      	str	r2, [r3, #4]
 800df86:	609a      	str	r2, [r3, #8]
 800df88:	60da      	str	r2, [r3, #12]
 800df8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4a19      	ldr	r2, [pc, #100]	; (800dff8 <HAL_I2C_MspInit+0x84>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d12c      	bne.n	800dff0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800df96:	2300      	movs	r3, #0
 800df98:	613b      	str	r3, [r7, #16]
 800df9a:	4b18      	ldr	r3, [pc, #96]	; (800dffc <HAL_I2C_MspInit+0x88>)
 800df9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df9e:	4a17      	ldr	r2, [pc, #92]	; (800dffc <HAL_I2C_MspInit+0x88>)
 800dfa0:	f043 0302 	orr.w	r3, r3, #2
 800dfa4:	6313      	str	r3, [r2, #48]	; 0x30
 800dfa6:	4b15      	ldr	r3, [pc, #84]	; (800dffc <HAL_I2C_MspInit+0x88>)
 800dfa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfaa:	f003 0302 	and.w	r3, r3, #2
 800dfae:	613b      	str	r3, [r7, #16]
 800dfb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800dfb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dfb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800dfb8:	2312      	movs	r3, #18
 800dfba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dfc0:	2303      	movs	r3, #3
 800dfc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800dfc4:	2304      	movs	r3, #4
 800dfc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dfc8:	f107 0314 	add.w	r3, r7, #20
 800dfcc:	4619      	mov	r1, r3
 800dfce:	480c      	ldr	r0, [pc, #48]	; (800e000 <HAL_I2C_MspInit+0x8c>)
 800dfd0:	f001 ff4e 	bl	800fe70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	60fb      	str	r3, [r7, #12]
 800dfd8:	4b08      	ldr	r3, [pc, #32]	; (800dffc <HAL_I2C_MspInit+0x88>)
 800dfda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfdc:	4a07      	ldr	r2, [pc, #28]	; (800dffc <HAL_I2C_MspInit+0x88>)
 800dfde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dfe2:	6413      	str	r3, [r2, #64]	; 0x40
 800dfe4:	4b05      	ldr	r3, [pc, #20]	; (800dffc <HAL_I2C_MspInit+0x88>)
 800dfe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dfec:	60fb      	str	r3, [r7, #12]
 800dfee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800dff0:	bf00      	nop
 800dff2:	3728      	adds	r7, #40	; 0x28
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	40005400 	.word	0x40005400
 800dffc:	40023800 	.word	0x40023800
 800e000:	40020400 	.word	0x40020400

0800e004 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b08a      	sub	sp, #40	; 0x28
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e00c:	f107 0314 	add.w	r3, r7, #20
 800e010:	2200      	movs	r2, #0
 800e012:	601a      	str	r2, [r3, #0]
 800e014:	605a      	str	r2, [r3, #4]
 800e016:	609a      	str	r2, [r3, #8]
 800e018:	60da      	str	r2, [r3, #12]
 800e01a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4a19      	ldr	r2, [pc, #100]	; (800e088 <HAL_SPI_MspInit+0x84>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d12c      	bne.n	800e080 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800e026:	2300      	movs	r3, #0
 800e028:	613b      	str	r3, [r7, #16]
 800e02a:	4b18      	ldr	r3, [pc, #96]	; (800e08c <HAL_SPI_MspInit+0x88>)
 800e02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e02e:	4a17      	ldr	r2, [pc, #92]	; (800e08c <HAL_SPI_MspInit+0x88>)
 800e030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e034:	6413      	str	r3, [r2, #64]	; 0x40
 800e036:	4b15      	ldr	r3, [pc, #84]	; (800e08c <HAL_SPI_MspInit+0x88>)
 800e038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e03a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e03e:	613b      	str	r3, [r7, #16]
 800e040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e042:	2300      	movs	r3, #0
 800e044:	60fb      	str	r3, [r7, #12]
 800e046:	4b11      	ldr	r3, [pc, #68]	; (800e08c <HAL_SPI_MspInit+0x88>)
 800e048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e04a:	4a10      	ldr	r2, [pc, #64]	; (800e08c <HAL_SPI_MspInit+0x88>)
 800e04c:	f043 0304 	orr.w	r3, r3, #4
 800e050:	6313      	str	r3, [r2, #48]	; 0x30
 800e052:	4b0e      	ldr	r3, [pc, #56]	; (800e08c <HAL_SPI_MspInit+0x88>)
 800e054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e056:	f003 0304 	and.w	r3, r3, #4
 800e05a:	60fb      	str	r3, [r7, #12]
 800e05c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800e05e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e064:	2302      	movs	r3, #2
 800e066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e068:	2300      	movs	r3, #0
 800e06a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e06c:	2303      	movs	r3, #3
 800e06e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800e070:	2306      	movs	r3, #6
 800e072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e074:	f107 0314 	add.w	r3, r7, #20
 800e078:	4619      	mov	r1, r3
 800e07a:	4805      	ldr	r0, [pc, #20]	; (800e090 <HAL_SPI_MspInit+0x8c>)
 800e07c:	f001 fef8 	bl	800fe70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800e080:	bf00      	nop
 800e082:	3728      	adds	r7, #40	; 0x28
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	40003c00 	.word	0x40003c00
 800e08c:	40023800 	.word	0x40023800
 800e090:	40020800 	.word	0x40020800

0800e094 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800e094:	b480      	push	{r7}
 800e096:	b087      	sub	sp, #28
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a1f      	ldr	r2, [pc, #124]	; (800e120 <HAL_TIM_PWM_MspInit+0x8c>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d10e      	bne.n	800e0c4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	617b      	str	r3, [r7, #20]
 800e0aa:	4b1e      	ldr	r3, [pc, #120]	; (800e124 <HAL_TIM_PWM_MspInit+0x90>)
 800e0ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0ae:	4a1d      	ldr	r2, [pc, #116]	; (800e124 <HAL_TIM_PWM_MspInit+0x90>)
 800e0b0:	f043 0301 	orr.w	r3, r3, #1
 800e0b4:	6453      	str	r3, [r2, #68]	; 0x44
 800e0b6:	4b1b      	ldr	r3, [pc, #108]	; (800e124 <HAL_TIM_PWM_MspInit+0x90>)
 800e0b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0ba:	f003 0301 	and.w	r3, r3, #1
 800e0be:	617b      	str	r3, [r7, #20]
 800e0c0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800e0c2:	e026      	b.n	800e112 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0cc:	d10e      	bne.n	800e0ec <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	613b      	str	r3, [r7, #16]
 800e0d2:	4b14      	ldr	r3, [pc, #80]	; (800e124 <HAL_TIM_PWM_MspInit+0x90>)
 800e0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0d6:	4a13      	ldr	r2, [pc, #76]	; (800e124 <HAL_TIM_PWM_MspInit+0x90>)
 800e0d8:	f043 0301 	orr.w	r3, r3, #1
 800e0dc:	6413      	str	r3, [r2, #64]	; 0x40
 800e0de:	4b11      	ldr	r3, [pc, #68]	; (800e124 <HAL_TIM_PWM_MspInit+0x90>)
 800e0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0e2:	f003 0301 	and.w	r3, r3, #1
 800e0e6:	613b      	str	r3, [r7, #16]
 800e0e8:	693b      	ldr	r3, [r7, #16]
}
 800e0ea:	e012      	b.n	800e112 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	4a0d      	ldr	r2, [pc, #52]	; (800e128 <HAL_TIM_PWM_MspInit+0x94>)
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d10d      	bne.n	800e112 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	60fb      	str	r3, [r7, #12]
 800e0fa:	4b0a      	ldr	r3, [pc, #40]	; (800e124 <HAL_TIM_PWM_MspInit+0x90>)
 800e0fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0fe:	4a09      	ldr	r2, [pc, #36]	; (800e124 <HAL_TIM_PWM_MspInit+0x90>)
 800e100:	f043 0302 	orr.w	r3, r3, #2
 800e104:	6453      	str	r3, [r2, #68]	; 0x44
 800e106:	4b07      	ldr	r3, [pc, #28]	; (800e124 <HAL_TIM_PWM_MspInit+0x90>)
 800e108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e10a:	f003 0302 	and.w	r3, r3, #2
 800e10e:	60fb      	str	r3, [r7, #12]
 800e110:	68fb      	ldr	r3, [r7, #12]
}
 800e112:	bf00      	nop
 800e114:	371c      	adds	r7, #28
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr
 800e11e:	bf00      	nop
 800e120:	40010000 	.word	0x40010000
 800e124:	40023800 	.word	0x40023800
 800e128:	40010400 	.word	0x40010400

0800e12c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b08c      	sub	sp, #48	; 0x30
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e134:	f107 031c 	add.w	r3, r7, #28
 800e138:	2200      	movs	r2, #0
 800e13a:	601a      	str	r2, [r3, #0]
 800e13c:	605a      	str	r2, [r3, #4]
 800e13e:	609a      	str	r2, [r3, #8]
 800e140:	60da      	str	r2, [r3, #12]
 800e142:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	4a32      	ldr	r2, [pc, #200]	; (800e214 <HAL_TIM_Encoder_MspInit+0xe8>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d12c      	bne.n	800e1a8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e14e:	2300      	movs	r3, #0
 800e150:	61bb      	str	r3, [r7, #24]
 800e152:	4b31      	ldr	r3, [pc, #196]	; (800e218 <HAL_TIM_Encoder_MspInit+0xec>)
 800e154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e156:	4a30      	ldr	r2, [pc, #192]	; (800e218 <HAL_TIM_Encoder_MspInit+0xec>)
 800e158:	f043 0302 	orr.w	r3, r3, #2
 800e15c:	6413      	str	r3, [r2, #64]	; 0x40
 800e15e:	4b2e      	ldr	r3, [pc, #184]	; (800e218 <HAL_TIM_Encoder_MspInit+0xec>)
 800e160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e162:	f003 0302 	and.w	r3, r3, #2
 800e166:	61bb      	str	r3, [r7, #24]
 800e168:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e16a:	2300      	movs	r3, #0
 800e16c:	617b      	str	r3, [r7, #20]
 800e16e:	4b2a      	ldr	r3, [pc, #168]	; (800e218 <HAL_TIM_Encoder_MspInit+0xec>)
 800e170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e172:	4a29      	ldr	r2, [pc, #164]	; (800e218 <HAL_TIM_Encoder_MspInit+0xec>)
 800e174:	f043 0301 	orr.w	r3, r3, #1
 800e178:	6313      	str	r3, [r2, #48]	; 0x30
 800e17a:	4b27      	ldr	r3, [pc, #156]	; (800e218 <HAL_TIM_Encoder_MspInit+0xec>)
 800e17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e17e:	f003 0301 	and.w	r3, r3, #1
 800e182:	617b      	str	r3, [r7, #20]
 800e184:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e186:	23c0      	movs	r3, #192	; 0xc0
 800e188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e18a:	2302      	movs	r3, #2
 800e18c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e18e:	2300      	movs	r3, #0
 800e190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e192:	2300      	movs	r3, #0
 800e194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e196:	2302      	movs	r3, #2
 800e198:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e19a:	f107 031c 	add.w	r3, r7, #28
 800e19e:	4619      	mov	r1, r3
 800e1a0:	481e      	ldr	r0, [pc, #120]	; (800e21c <HAL_TIM_Encoder_MspInit+0xf0>)
 800e1a2:	f001 fe65 	bl	800fe70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800e1a6:	e030      	b.n	800e20a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	4a1c      	ldr	r2, [pc, #112]	; (800e220 <HAL_TIM_Encoder_MspInit+0xf4>)
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	d12b      	bne.n	800e20a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	613b      	str	r3, [r7, #16]
 800e1b6:	4b18      	ldr	r3, [pc, #96]	; (800e218 <HAL_TIM_Encoder_MspInit+0xec>)
 800e1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ba:	4a17      	ldr	r2, [pc, #92]	; (800e218 <HAL_TIM_Encoder_MspInit+0xec>)
 800e1bc:	f043 0304 	orr.w	r3, r3, #4
 800e1c0:	6413      	str	r3, [r2, #64]	; 0x40
 800e1c2:	4b15      	ldr	r3, [pc, #84]	; (800e218 <HAL_TIM_Encoder_MspInit+0xec>)
 800e1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1c6:	f003 0304 	and.w	r3, r3, #4
 800e1ca:	613b      	str	r3, [r7, #16]
 800e1cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	60fb      	str	r3, [r7, #12]
 800e1d2:	4b11      	ldr	r3, [pc, #68]	; (800e218 <HAL_TIM_Encoder_MspInit+0xec>)
 800e1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1d6:	4a10      	ldr	r2, [pc, #64]	; (800e218 <HAL_TIM_Encoder_MspInit+0xec>)
 800e1d8:	f043 0302 	orr.w	r3, r3, #2
 800e1dc:	6313      	str	r3, [r2, #48]	; 0x30
 800e1de:	4b0e      	ldr	r3, [pc, #56]	; (800e218 <HAL_TIM_Encoder_MspInit+0xec>)
 800e1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1e2:	f003 0302 	and.w	r3, r3, #2
 800e1e6:	60fb      	str	r3, [r7, #12]
 800e1e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e1ea:	23c0      	movs	r3, #192	; 0xc0
 800e1ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1ee:	2302      	movs	r3, #2
 800e1f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800e1fa:	2302      	movs	r3, #2
 800e1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e1fe:	f107 031c 	add.w	r3, r7, #28
 800e202:	4619      	mov	r1, r3
 800e204:	4807      	ldr	r0, [pc, #28]	; (800e224 <HAL_TIM_Encoder_MspInit+0xf8>)
 800e206:	f001 fe33 	bl	800fe70 <HAL_GPIO_Init>
}
 800e20a:	bf00      	nop
 800e20c:	3730      	adds	r7, #48	; 0x30
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
 800e212:	bf00      	nop
 800e214:	40000400 	.word	0x40000400
 800e218:	40023800 	.word	0x40023800
 800e21c:	40020000 	.word	0x40020000
 800e220:	40000800 	.word	0x40000800
 800e224:	40020400 	.word	0x40020400

0800e228 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b084      	sub	sp, #16
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4a0e      	ldr	r2, [pc, #56]	; (800e270 <HAL_TIM_Base_MspInit+0x48>)
 800e236:	4293      	cmp	r3, r2
 800e238:	d115      	bne.n	800e266 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800e23a:	2300      	movs	r3, #0
 800e23c:	60fb      	str	r3, [r7, #12]
 800e23e:	4b0d      	ldr	r3, [pc, #52]	; (800e274 <HAL_TIM_Base_MspInit+0x4c>)
 800e240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e242:	4a0c      	ldr	r2, [pc, #48]	; (800e274 <HAL_TIM_Base_MspInit+0x4c>)
 800e244:	f043 0310 	orr.w	r3, r3, #16
 800e248:	6413      	str	r3, [r2, #64]	; 0x40
 800e24a:	4b0a      	ldr	r3, [pc, #40]	; (800e274 <HAL_TIM_Base_MspInit+0x4c>)
 800e24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e24e:	f003 0310 	and.w	r3, r3, #16
 800e252:	60fb      	str	r3, [r7, #12]
 800e254:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800e256:	2200      	movs	r2, #0
 800e258:	2100      	movs	r1, #0
 800e25a:	2036      	movs	r0, #54	; 0x36
 800e25c:	f000 ff6b 	bl	800f136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800e260:	2036      	movs	r0, #54	; 0x36
 800e262:	f000 ff84 	bl	800f16e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800e266:	bf00      	nop
 800e268:	3710      	adds	r7, #16
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	40001000 	.word	0x40001000
 800e274:	40023800 	.word	0x40023800

0800e278 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b08a      	sub	sp, #40	; 0x28
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e280:	f107 0314 	add.w	r3, r7, #20
 800e284:	2200      	movs	r2, #0
 800e286:	601a      	str	r2, [r3, #0]
 800e288:	605a      	str	r2, [r3, #4]
 800e28a:	609a      	str	r2, [r3, #8]
 800e28c:	60da      	str	r2, [r3, #12]
 800e28e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4a37      	ldr	r2, [pc, #220]	; (800e374 <HAL_TIM_MspPostInit+0xfc>)
 800e296:	4293      	cmp	r3, r2
 800e298:	d11f      	bne.n	800e2da <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e29a:	2300      	movs	r3, #0
 800e29c:	613b      	str	r3, [r7, #16]
 800e29e:	4b36      	ldr	r3, [pc, #216]	; (800e378 <HAL_TIM_MspPostInit+0x100>)
 800e2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2a2:	4a35      	ldr	r2, [pc, #212]	; (800e378 <HAL_TIM_MspPostInit+0x100>)
 800e2a4:	f043 0301 	orr.w	r3, r3, #1
 800e2a8:	6313      	str	r3, [r2, #48]	; 0x30
 800e2aa:	4b33      	ldr	r3, [pc, #204]	; (800e378 <HAL_TIM_MspPostInit+0x100>)
 800e2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ae:	f003 0301 	and.w	r3, r3, #1
 800e2b2:	613b      	str	r3, [r7, #16]
 800e2b4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e2b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2bc:	2302      	movs	r3, #2
 800e2be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2cc:	f107 0314 	add.w	r3, r7, #20
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	482a      	ldr	r0, [pc, #168]	; (800e37c <HAL_TIM_MspPostInit+0x104>)
 800e2d4:	f001 fdcc 	bl	800fe70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800e2d8:	e048      	b.n	800e36c <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM2)
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2e2:	d11f      	bne.n	800e324 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	60fb      	str	r3, [r7, #12]
 800e2e8:	4b23      	ldr	r3, [pc, #140]	; (800e378 <HAL_TIM_MspPostInit+0x100>)
 800e2ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ec:	4a22      	ldr	r2, [pc, #136]	; (800e378 <HAL_TIM_MspPostInit+0x100>)
 800e2ee:	f043 0302 	orr.w	r3, r3, #2
 800e2f2:	6313      	str	r3, [r2, #48]	; 0x30
 800e2f4:	4b20      	ldr	r3, [pc, #128]	; (800e378 <HAL_TIM_MspPostInit+0x100>)
 800e2f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2f8:	f003 0302 	and.w	r3, r3, #2
 800e2fc:	60fb      	str	r3, [r7, #12]
 800e2fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800e300:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800e304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e306:	2302      	movs	r3, #2
 800e308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e30a:	2300      	movs	r3, #0
 800e30c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e30e:	2300      	movs	r3, #0
 800e310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800e312:	2301      	movs	r3, #1
 800e314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e316:	f107 0314 	add.w	r3, r7, #20
 800e31a:	4619      	mov	r1, r3
 800e31c:	4818      	ldr	r0, [pc, #96]	; (800e380 <HAL_TIM_MspPostInit+0x108>)
 800e31e:	f001 fda7 	bl	800fe70 <HAL_GPIO_Init>
}
 800e322:	e023      	b.n	800e36c <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM8)
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a16      	ldr	r2, [pc, #88]	; (800e384 <HAL_TIM_MspPostInit+0x10c>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d11e      	bne.n	800e36c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e32e:	2300      	movs	r3, #0
 800e330:	60bb      	str	r3, [r7, #8]
 800e332:	4b11      	ldr	r3, [pc, #68]	; (800e378 <HAL_TIM_MspPostInit+0x100>)
 800e334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e336:	4a10      	ldr	r2, [pc, #64]	; (800e378 <HAL_TIM_MspPostInit+0x100>)
 800e338:	f043 0304 	orr.w	r3, r3, #4
 800e33c:	6313      	str	r3, [r2, #48]	; 0x30
 800e33e:	4b0e      	ldr	r3, [pc, #56]	; (800e378 <HAL_TIM_MspPostInit+0x100>)
 800e340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e342:	f003 0304 	and.w	r3, r3, #4
 800e346:	60bb      	str	r3, [r7, #8]
 800e348:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800e34a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e34e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e350:	2302      	movs	r3, #2
 800e352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e354:	2300      	movs	r3, #0
 800e356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e358:	2300      	movs	r3, #0
 800e35a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800e35c:	2303      	movs	r3, #3
 800e35e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e360:	f107 0314 	add.w	r3, r7, #20
 800e364:	4619      	mov	r1, r3
 800e366:	4808      	ldr	r0, [pc, #32]	; (800e388 <HAL_TIM_MspPostInit+0x110>)
 800e368:	f001 fd82 	bl	800fe70 <HAL_GPIO_Init>
}
 800e36c:	bf00      	nop
 800e36e:	3728      	adds	r7, #40	; 0x28
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	40010000 	.word	0x40010000
 800e378:	40023800 	.word	0x40023800
 800e37c:	40020000 	.word	0x40020000
 800e380:	40020400 	.word	0x40020400
 800e384:	40010400 	.word	0x40010400
 800e388:	40020800 	.word	0x40020800

0800e38c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b08a      	sub	sp, #40	; 0x28
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e394:	f107 0314 	add.w	r3, r7, #20
 800e398:	2200      	movs	r2, #0
 800e39a:	601a      	str	r2, [r3, #0]
 800e39c:	605a      	str	r2, [r3, #4]
 800e39e:	609a      	str	r2, [r3, #8]
 800e3a0:	60da      	str	r2, [r3, #12]
 800e3a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4a1d      	ldr	r2, [pc, #116]	; (800e420 <HAL_UART_MspInit+0x94>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d133      	bne.n	800e416 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	613b      	str	r3, [r7, #16]
 800e3b2:	4b1c      	ldr	r3, [pc, #112]	; (800e424 <HAL_UART_MspInit+0x98>)
 800e3b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3b6:	4a1b      	ldr	r2, [pc, #108]	; (800e424 <HAL_UART_MspInit+0x98>)
 800e3b8:	f043 0320 	orr.w	r3, r3, #32
 800e3bc:	6453      	str	r3, [r2, #68]	; 0x44
 800e3be:	4b19      	ldr	r3, [pc, #100]	; (800e424 <HAL_UART_MspInit+0x98>)
 800e3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3c2:	f003 0320 	and.w	r3, r3, #32
 800e3c6:	613b      	str	r3, [r7, #16]
 800e3c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	60fb      	str	r3, [r7, #12]
 800e3ce:	4b15      	ldr	r3, [pc, #84]	; (800e424 <HAL_UART_MspInit+0x98>)
 800e3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3d2:	4a14      	ldr	r2, [pc, #80]	; (800e424 <HAL_UART_MspInit+0x98>)
 800e3d4:	f043 0304 	orr.w	r3, r3, #4
 800e3d8:	6313      	str	r3, [r2, #48]	; 0x30
 800e3da:	4b12      	ldr	r3, [pc, #72]	; (800e424 <HAL_UART_MspInit+0x98>)
 800e3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3de:	f003 0304 	and.w	r3, r3, #4
 800e3e2:	60fb      	str	r3, [r7, #12]
 800e3e4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e3e6:	23c0      	movs	r3, #192	; 0xc0
 800e3e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3ea:	2302      	movs	r3, #2
 800e3ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e3f2:	2303      	movs	r3, #3
 800e3f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800e3f6:	2308      	movs	r3, #8
 800e3f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e3fa:	f107 0314 	add.w	r3, r7, #20
 800e3fe:	4619      	mov	r1, r3
 800e400:	4809      	ldr	r0, [pc, #36]	; (800e428 <HAL_UART_MspInit+0x9c>)
 800e402:	f001 fd35 	bl	800fe70 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800e406:	2200      	movs	r2, #0
 800e408:	2100      	movs	r1, #0
 800e40a:	2047      	movs	r0, #71	; 0x47
 800e40c:	f000 fe93 	bl	800f136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800e410:	2047      	movs	r0, #71	; 0x47
 800e412:	f000 feac 	bl	800f16e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800e416:	bf00      	nop
 800e418:	3728      	adds	r7, #40	; 0x28
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	40011400 	.word	0x40011400
 800e424:	40023800 	.word	0x40023800
 800e428:	40020800 	.word	0x40020800

0800e42c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e42c:	b480      	push	{r7}
 800e42e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e430:	e7fe      	b.n	800e430 <NMI_Handler+0x4>

0800e432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e432:	b480      	push	{r7}
 800e434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e436:	e7fe      	b.n	800e436 <HardFault_Handler+0x4>

0800e438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e438:	b480      	push	{r7}
 800e43a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e43c:	e7fe      	b.n	800e43c <MemManage_Handler+0x4>

0800e43e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e43e:	b480      	push	{r7}
 800e440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e442:	e7fe      	b.n	800e442 <BusFault_Handler+0x4>

0800e444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e444:	b480      	push	{r7}
 800e446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e448:	e7fe      	b.n	800e448 <UsageFault_Handler+0x4>

0800e44a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e44a:	b480      	push	{r7}
 800e44c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e44e:	bf00      	nop
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr

0800e458 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e458:	b480      	push	{r7}
 800e45a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e45c:	bf00      	nop
 800e45e:	46bd      	mov	sp, r7
 800e460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e464:	4770      	bx	lr

0800e466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e466:	b480      	push	{r7}
 800e468:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e46a:	bf00      	nop
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e478:	f000 f956 	bl	800e728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e47c:	bf00      	nop
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800e484:	4802      	ldr	r0, [pc, #8]	; (800e490 <TIM6_DAC_IRQHandler+0x10>)
 800e486:	f003 fe3c 	bl	8012102 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800e48a:	bf00      	nop
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	200144a4 	.word	0x200144a4

0800e494 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800e498:	4802      	ldr	r0, [pc, #8]	; (800e4a4 <DMA2_Stream0_IRQHandler+0x10>)
 800e49a:	f000 ffab 	bl	800f3f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800e49e:	bf00      	nop
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	20014440 	.word	0x20014440

0800e4a8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800e4ac:	4802      	ldr	r0, [pc, #8]	; (800e4b8 <USART6_IRQHandler+0x10>)
 800e4ae:	f004 fc5d 	bl	8012d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800e4b2:	bf00      	nop
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	20014614 	.word	0x20014614

0800e4bc <_read>:
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b086      	sub	sp, #24
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	607a      	str	r2, [r7, #4]
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	617b      	str	r3, [r7, #20]
 800e4cc:	e00a      	b.n	800e4e4 <_read+0x28>
 800e4ce:	f3af 8000 	nop.w
 800e4d2:	4601      	mov	r1, r0
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	1c5a      	adds	r2, r3, #1
 800e4d8:	60ba      	str	r2, [r7, #8]
 800e4da:	b2ca      	uxtb	r2, r1
 800e4dc:	701a      	strb	r2, [r3, #0]
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	617b      	str	r3, [r7, #20]
 800e4e4:	697a      	ldr	r2, [r7, #20]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	dbf0      	blt.n	800e4ce <_read+0x12>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3718      	adds	r7, #24
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}

0800e4f6 <_write>:
 800e4f6:	b580      	push	{r7, lr}
 800e4f8:	b086      	sub	sp, #24
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	60f8      	str	r0, [r7, #12]
 800e4fe:	60b9      	str	r1, [r7, #8]
 800e500:	607a      	str	r2, [r7, #4]
 800e502:	2300      	movs	r3, #0
 800e504:	617b      	str	r3, [r7, #20]
 800e506:	e009      	b.n	800e51c <_write+0x26>
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	1c5a      	adds	r2, r3, #1
 800e50c:	60ba      	str	r2, [r7, #8]
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	4618      	mov	r0, r3
 800e512:	f7fe f959 	bl	800c7c8 <__io_putchar>
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	3301      	adds	r3, #1
 800e51a:	617b      	str	r3, [r7, #20]
 800e51c:	697a      	ldr	r2, [r7, #20]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	429a      	cmp	r2, r3
 800e522:	dbf1      	blt.n	800e508 <_write+0x12>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	4618      	mov	r0, r3
 800e528:	3718      	adds	r7, #24
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}

0800e52e <_close>:
 800e52e:	b480      	push	{r7}
 800e530:	b083      	sub	sp, #12
 800e532:	af00      	add	r7, sp, #0
 800e534:	6078      	str	r0, [r7, #4]
 800e536:	f04f 33ff 	mov.w	r3, #4294967295
 800e53a:	4618      	mov	r0, r3
 800e53c:	370c      	adds	r7, #12
 800e53e:	46bd      	mov	sp, r7
 800e540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e544:	4770      	bx	lr

0800e546 <_fstat>:
 800e546:	b480      	push	{r7}
 800e548:	b083      	sub	sp, #12
 800e54a:	af00      	add	r7, sp, #0
 800e54c:	6078      	str	r0, [r7, #4]
 800e54e:	6039      	str	r1, [r7, #0]
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e556:	605a      	str	r2, [r3, #4]
 800e558:	2300      	movs	r3, #0
 800e55a:	4618      	mov	r0, r3
 800e55c:	370c      	adds	r7, #12
 800e55e:	46bd      	mov	sp, r7
 800e560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e564:	4770      	bx	lr

0800e566 <_isatty>:
 800e566:	b480      	push	{r7}
 800e568:	b083      	sub	sp, #12
 800e56a:	af00      	add	r7, sp, #0
 800e56c:	6078      	str	r0, [r7, #4]
 800e56e:	2301      	movs	r3, #1
 800e570:	4618      	mov	r0, r3
 800e572:	370c      	adds	r7, #12
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr

0800e57c <_lseek>:
 800e57c:	b480      	push	{r7}
 800e57e:	b085      	sub	sp, #20
 800e580:	af00      	add	r7, sp, #0
 800e582:	60f8      	str	r0, [r7, #12]
 800e584:	60b9      	str	r1, [r7, #8]
 800e586:	607a      	str	r2, [r7, #4]
 800e588:	2300      	movs	r3, #0
 800e58a:	4618      	mov	r0, r3
 800e58c:	3714      	adds	r7, #20
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	4770      	bx	lr
	...

0800e598 <_sbrk>:
 800e598:	b580      	push	{r7, lr}
 800e59a:	b086      	sub	sp, #24
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	4a14      	ldr	r2, [pc, #80]	; (800e5f4 <_sbrk+0x5c>)
 800e5a2:	4b15      	ldr	r3, [pc, #84]	; (800e5f8 <_sbrk+0x60>)
 800e5a4:	1ad3      	subs	r3, r2, r3
 800e5a6:	617b      	str	r3, [r7, #20]
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	613b      	str	r3, [r7, #16]
 800e5ac:	4b13      	ldr	r3, [pc, #76]	; (800e5fc <_sbrk+0x64>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d102      	bne.n	800e5ba <_sbrk+0x22>
 800e5b4:	4b11      	ldr	r3, [pc, #68]	; (800e5fc <_sbrk+0x64>)
 800e5b6:	4a12      	ldr	r2, [pc, #72]	; (800e600 <_sbrk+0x68>)
 800e5b8:	601a      	str	r2, [r3, #0]
 800e5ba:	4b10      	ldr	r3, [pc, #64]	; (800e5fc <_sbrk+0x64>)
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	4413      	add	r3, r2
 800e5c2:	693a      	ldr	r2, [r7, #16]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d207      	bcs.n	800e5d8 <_sbrk+0x40>
 800e5c8:	f005 f9d6 	bl	8013978 <__errno>
 800e5cc:	4602      	mov	r2, r0
 800e5ce:	230c      	movs	r3, #12
 800e5d0:	6013      	str	r3, [r2, #0]
 800e5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800e5d6:	e009      	b.n	800e5ec <_sbrk+0x54>
 800e5d8:	4b08      	ldr	r3, [pc, #32]	; (800e5fc <_sbrk+0x64>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	60fb      	str	r3, [r7, #12]
 800e5de:	4b07      	ldr	r3, [pc, #28]	; (800e5fc <_sbrk+0x64>)
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	4413      	add	r3, r2
 800e5e6:	4a05      	ldr	r2, [pc, #20]	; (800e5fc <_sbrk+0x64>)
 800e5e8:	6013      	str	r3, [r2, #0]
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3718      	adds	r7, #24
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}
 800e5f4:	20020000 	.word	0x20020000
 800e5f8:	00000400 	.word	0x00000400
 800e5fc:	2000c2dc 	.word	0x2000c2dc
 800e600:	200146b8 	.word	0x200146b8

0800e604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e604:	b480      	push	{r7}
 800e606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e608:	4b08      	ldr	r3, [pc, #32]	; (800e62c <SystemInit+0x28>)
 800e60a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e60e:	4a07      	ldr	r2, [pc, #28]	; (800e62c <SystemInit+0x28>)
 800e610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e618:	4b04      	ldr	r3, [pc, #16]	; (800e62c <SystemInit+0x28>)
 800e61a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e61e:	609a      	str	r2, [r3, #8]
#endif
}
 800e620:	bf00      	nop
 800e622:	46bd      	mov	sp, r7
 800e624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e628:	4770      	bx	lr
 800e62a:	bf00      	nop
 800e62c:	e000ed00 	.word	0xe000ed00

0800e630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e630:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e668 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e634:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e636:	e003      	b.n	800e640 <LoopCopyDataInit>

0800e638 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e638:	4b0c      	ldr	r3, [pc, #48]	; (800e66c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e63a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e63c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e63e:	3104      	adds	r1, #4

0800e640 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e640:	480b      	ldr	r0, [pc, #44]	; (800e670 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e642:	4b0c      	ldr	r3, [pc, #48]	; (800e674 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e644:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e646:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e648:	d3f6      	bcc.n	800e638 <CopyDataInit>
  ldr  r2, =_sbss
 800e64a:	4a0b      	ldr	r2, [pc, #44]	; (800e678 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e64c:	e002      	b.n	800e654 <LoopFillZerobss>

0800e64e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e64e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e650:	f842 3b04 	str.w	r3, [r2], #4

0800e654 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e654:	4b09      	ldr	r3, [pc, #36]	; (800e67c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e656:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e658:	d3f9      	bcc.n	800e64e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e65a:	f7ff ffd3 	bl	800e604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e65e:	f005 f991 	bl	8013984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e662:	f7fe fae1 	bl	800cc28 <main>
  bx  lr    
 800e666:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800e668:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800e66c:	080167a8 	.word	0x080167a8
  ldr  r0, =_sdata
 800e670:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e674:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 800e678:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 800e67c:	200146b8 	.word	0x200146b8

0800e680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e680:	e7fe      	b.n	800e680 <ADC_IRQHandler>
	...

0800e684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e688:	4b0e      	ldr	r3, [pc, #56]	; (800e6c4 <HAL_Init+0x40>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4a0d      	ldr	r2, [pc, #52]	; (800e6c4 <HAL_Init+0x40>)
 800e68e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e692:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e694:	4b0b      	ldr	r3, [pc, #44]	; (800e6c4 <HAL_Init+0x40>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	4a0a      	ldr	r2, [pc, #40]	; (800e6c4 <HAL_Init+0x40>)
 800e69a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e69e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e6a0:	4b08      	ldr	r3, [pc, #32]	; (800e6c4 <HAL_Init+0x40>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	4a07      	ldr	r2, [pc, #28]	; (800e6c4 <HAL_Init+0x40>)
 800e6a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e6ac:	2003      	movs	r0, #3
 800e6ae:	f000 fd37 	bl	800f120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e6b2:	2000      	movs	r0, #0
 800e6b4:	f000 f808 	bl	800e6c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e6b8:	f7ff fb84 	bl	800ddc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e6bc:	2300      	movs	r3, #0
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	40023c00 	.word	0x40023c00

0800e6c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e6d0:	4b12      	ldr	r3, [pc, #72]	; (800e71c <HAL_InitTick+0x54>)
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	4b12      	ldr	r3, [pc, #72]	; (800e720 <HAL_InitTick+0x58>)
 800e6d6:	781b      	ldrb	r3, [r3, #0]
 800e6d8:	4619      	mov	r1, r3
 800e6da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e6de:	fbb3 f3f1 	udiv	r3, r3, r1
 800e6e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f000 fd4f 	bl	800f18a <HAL_SYSTICK_Config>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d001      	beq.n	800e6f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	e00e      	b.n	800e714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2b0f      	cmp	r3, #15
 800e6fa:	d80a      	bhi.n	800e712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	6879      	ldr	r1, [r7, #4]
 800e700:	f04f 30ff 	mov.w	r0, #4294967295
 800e704:	f000 fd17 	bl	800f136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e708:	4a06      	ldr	r2, [pc, #24]	; (800e724 <HAL_InitTick+0x5c>)
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e70e:	2300      	movs	r3, #0
 800e710:	e000      	b.n	800e714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800e712:	2301      	movs	r3, #1
}
 800e714:	4618      	mov	r0, r3
 800e716:	3708      	adds	r7, #8
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}
 800e71c:	2000000c 	.word	0x2000000c
 800e720:	20000014 	.word	0x20000014
 800e724:	20000010 	.word	0x20000010

0800e728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e728:	b480      	push	{r7}
 800e72a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e72c:	4b06      	ldr	r3, [pc, #24]	; (800e748 <HAL_IncTick+0x20>)
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	461a      	mov	r2, r3
 800e732:	4b06      	ldr	r3, [pc, #24]	; (800e74c <HAL_IncTick+0x24>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	4413      	add	r3, r2
 800e738:	4a04      	ldr	r2, [pc, #16]	; (800e74c <HAL_IncTick+0x24>)
 800e73a:	6013      	str	r3, [r2, #0]
}
 800e73c:	bf00      	nop
 800e73e:	46bd      	mov	sp, r7
 800e740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e744:	4770      	bx	lr
 800e746:	bf00      	nop
 800e748:	20000014 	.word	0x20000014
 800e74c:	20014690 	.word	0x20014690

0800e750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e750:	b480      	push	{r7}
 800e752:	af00      	add	r7, sp, #0
  return uwTick;
 800e754:	4b03      	ldr	r3, [pc, #12]	; (800e764 <HAL_GetTick+0x14>)
 800e756:	681b      	ldr	r3, [r3, #0]
}
 800e758:	4618      	mov	r0, r3
 800e75a:	46bd      	mov	sp, r7
 800e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e760:	4770      	bx	lr
 800e762:	bf00      	nop
 800e764:	20014690 	.word	0x20014690

0800e768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b084      	sub	sp, #16
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e770:	f7ff ffee 	bl	800e750 <HAL_GetTick>
 800e774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e780:	d005      	beq.n	800e78e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e782:	4b09      	ldr	r3, [pc, #36]	; (800e7a8 <HAL_Delay+0x40>)
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	461a      	mov	r2, r3
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	4413      	add	r3, r2
 800e78c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e78e:	bf00      	nop
 800e790:	f7ff ffde 	bl	800e750 <HAL_GetTick>
 800e794:	4602      	mov	r2, r0
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	1ad3      	subs	r3, r2, r3
 800e79a:	68fa      	ldr	r2, [r7, #12]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d8f7      	bhi.n	800e790 <HAL_Delay+0x28>
  {
  }
}
 800e7a0:	bf00      	nop
 800e7a2:	3710      	adds	r7, #16
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}
 800e7a8:	20000014 	.word	0x20000014

0800e7ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b084      	sub	sp, #16
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d101      	bne.n	800e7c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	e033      	b.n	800e82a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d109      	bne.n	800e7de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f7ff fb22 	bl	800de14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7e2:	f003 0310 	and.w	r3, r3, #16
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d118      	bne.n	800e81c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800e7f2:	f023 0302 	bic.w	r3, r3, #2
 800e7f6:	f043 0202 	orr.w	r2, r3, #2
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f000 fa40 	bl	800ec84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2200      	movs	r2, #0
 800e808:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e80e:	f023 0303 	bic.w	r3, r3, #3
 800e812:	f043 0201 	orr.w	r2, r3, #1
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	641a      	str	r2, [r3, #64]	; 0x40
 800e81a:	e001      	b.n	800e820 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800e81c:	2301      	movs	r3, #1
 800e81e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2200      	movs	r2, #0
 800e824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800e828:	7bfb      	ldrb	r3, [r7, #15]
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3710      	adds	r7, #16
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
	...

0800e834 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b086      	sub	sp, #24
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	60b9      	str	r1, [r7, #8]
 800e83e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800e840:	2300      	movs	r3, #0
 800e842:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e84a:	2b01      	cmp	r3, #1
 800e84c:	d101      	bne.n	800e852 <HAL_ADC_Start_DMA+0x1e>
 800e84e:	2302      	movs	r3, #2
 800e850:	e0cc      	b.n	800e9ec <HAL_ADC_Start_DMA+0x1b8>
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	2201      	movs	r2, #1
 800e856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	689b      	ldr	r3, [r3, #8]
 800e860:	f003 0301 	and.w	r3, r3, #1
 800e864:	2b01      	cmp	r3, #1
 800e866:	d018      	beq.n	800e89a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	689a      	ldr	r2, [r3, #8]
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f042 0201 	orr.w	r2, r2, #1
 800e876:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800e878:	4b5e      	ldr	r3, [pc, #376]	; (800e9f4 <HAL_ADC_Start_DMA+0x1c0>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	4a5e      	ldr	r2, [pc, #376]	; (800e9f8 <HAL_ADC_Start_DMA+0x1c4>)
 800e87e:	fba2 2303 	umull	r2, r3, r2, r3
 800e882:	0c9a      	lsrs	r2, r3, #18
 800e884:	4613      	mov	r3, r2
 800e886:	005b      	lsls	r3, r3, #1
 800e888:	4413      	add	r3, r2
 800e88a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800e88c:	e002      	b.n	800e894 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800e88e:	693b      	ldr	r3, [r7, #16]
 800e890:	3b01      	subs	r3, #1
 800e892:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800e894:	693b      	ldr	r3, [r7, #16]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d1f9      	bne.n	800e88e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	689b      	ldr	r3, [r3, #8]
 800e8a0:	f003 0301 	and.w	r3, r3, #1
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	f040 80a0 	bne.w	800e9ea <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800e8b2:	f023 0301 	bic.w	r3, r3, #1
 800e8b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	685b      	ldr	r3, [r3, #4]
 800e8c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d007      	beq.n	800e8dc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800e8d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e8e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8e8:	d106      	bne.n	800e8f8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8ee:	f023 0206 	bic.w	r2, r3, #6
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	645a      	str	r2, [r3, #68]	; 0x44
 800e8f6:	e002      	b.n	800e8fe <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2200      	movs	r2, #0
 800e902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800e906:	4b3d      	ldr	r3, [pc, #244]	; (800e9fc <HAL_ADC_Start_DMA+0x1c8>)
 800e908:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e90e:	4a3c      	ldr	r2, [pc, #240]	; (800ea00 <HAL_ADC_Start_DMA+0x1cc>)
 800e910:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e916:	4a3b      	ldr	r2, [pc, #236]	; (800ea04 <HAL_ADC_Start_DMA+0x1d0>)
 800e918:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e91e:	4a3a      	ldr	r2, [pc, #232]	; (800ea08 <HAL_ADC_Start_DMA+0x1d4>)
 800e920:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800e92a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	685a      	ldr	r2, [r3, #4]
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e93a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	689a      	ldr	r2, [r3, #8]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e94a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	334c      	adds	r3, #76	; 0x4c
 800e956:	4619      	mov	r1, r3
 800e958:	68ba      	ldr	r2, [r7, #8]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f000 fcd0 	bl	800f300 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	685b      	ldr	r3, [r3, #4]
 800e964:	f003 031f 	and.w	r3, r3, #31
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d12a      	bne.n	800e9c2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	4a26      	ldr	r2, [pc, #152]	; (800ea0c <HAL_ADC_Start_DMA+0x1d8>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d015      	beq.n	800e9a2 <HAL_ADC_Start_DMA+0x16e>
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	4a25      	ldr	r2, [pc, #148]	; (800ea10 <HAL_ADC_Start_DMA+0x1dc>)
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d105      	bne.n	800e98c <HAL_ADC_Start_DMA+0x158>
 800e980:	4b1e      	ldr	r3, [pc, #120]	; (800e9fc <HAL_ADC_Start_DMA+0x1c8>)
 800e982:	685b      	ldr	r3, [r3, #4]
 800e984:	f003 031f 	and.w	r3, r3, #31
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d00a      	beq.n	800e9a2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4a20      	ldr	r2, [pc, #128]	; (800ea14 <HAL_ADC_Start_DMA+0x1e0>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d129      	bne.n	800e9ea <HAL_ADC_Start_DMA+0x1b6>
 800e996:	4b19      	ldr	r3, [pc, #100]	; (800e9fc <HAL_ADC_Start_DMA+0x1c8>)
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	f003 031f 	and.w	r3, r3, #31
 800e99e:	2b0f      	cmp	r3, #15
 800e9a0:	d823      	bhi.n	800e9ea <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	689b      	ldr	r3, [r3, #8]
 800e9a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d11c      	bne.n	800e9ea <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	689a      	ldr	r2, [r3, #8]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e9be:	609a      	str	r2, [r3, #8]
 800e9c0:	e013      	b.n	800e9ea <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	4a11      	ldr	r2, [pc, #68]	; (800ea0c <HAL_ADC_Start_DMA+0x1d8>)
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d10e      	bne.n	800e9ea <HAL_ADC_Start_DMA+0x1b6>
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	689b      	ldr	r3, [r3, #8]
 800e9d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d107      	bne.n	800e9ea <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	689a      	ldr	r2, [r3, #8]
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e9e8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800e9ea:	2300      	movs	r3, #0
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3718      	adds	r7, #24
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	2000000c 	.word	0x2000000c
 800e9f8:	431bde83 	.word	0x431bde83
 800e9fc:	40012300 	.word	0x40012300
 800ea00:	0800ee7d 	.word	0x0800ee7d
 800ea04:	0800ef37 	.word	0x0800ef37
 800ea08:	0800ef53 	.word	0x0800ef53
 800ea0c:	40012000 	.word	0x40012000
 800ea10:	40012100 	.word	0x40012100
 800ea14:	40012200 	.word	0x40012200

0800ea18 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ea18:	b480      	push	{r7}
 800ea1a:	b083      	sub	sp, #12
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800ea20:	bf00      	nop
 800ea22:	370c      	adds	r7, #12
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr

0800ea2c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	b083      	sub	sp, #12
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800ea34:	bf00      	nop
 800ea36:	370c      	adds	r7, #12
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr

0800ea40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800ea40:	b480      	push	{r7}
 800ea42:	b085      	sub	sp, #20
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	d101      	bne.n	800ea5c <HAL_ADC_ConfigChannel+0x1c>
 800ea58:	2302      	movs	r3, #2
 800ea5a:	e105      	b.n	800ec68 <HAL_ADC_ConfigChannel+0x228>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2201      	movs	r2, #1
 800ea60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	2b09      	cmp	r3, #9
 800ea6a:	d925      	bls.n	800eab8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	68d9      	ldr	r1, [r3, #12]
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	b29b      	uxth	r3, r3
 800ea78:	461a      	mov	r2, r3
 800ea7a:	4613      	mov	r3, r2
 800ea7c:	005b      	lsls	r3, r3, #1
 800ea7e:	4413      	add	r3, r2
 800ea80:	3b1e      	subs	r3, #30
 800ea82:	2207      	movs	r2, #7
 800ea84:	fa02 f303 	lsl.w	r3, r2, r3
 800ea88:	43da      	mvns	r2, r3
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	400a      	ands	r2, r1
 800ea90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	68d9      	ldr	r1, [r3, #12]
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	689a      	ldr	r2, [r3, #8]
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	b29b      	uxth	r3, r3
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	005b      	lsls	r3, r3, #1
 800eaa8:	4403      	add	r3, r0
 800eaaa:	3b1e      	subs	r3, #30
 800eaac:	409a      	lsls	r2, r3
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	430a      	orrs	r2, r1
 800eab4:	60da      	str	r2, [r3, #12]
 800eab6:	e022      	b.n	800eafe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	6919      	ldr	r1, [r3, #16]
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	461a      	mov	r2, r3
 800eac6:	4613      	mov	r3, r2
 800eac8:	005b      	lsls	r3, r3, #1
 800eaca:	4413      	add	r3, r2
 800eacc:	2207      	movs	r2, #7
 800eace:	fa02 f303 	lsl.w	r3, r2, r3
 800ead2:	43da      	mvns	r2, r3
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	400a      	ands	r2, r1
 800eada:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	6919      	ldr	r1, [r3, #16]
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	689a      	ldr	r2, [r3, #8]
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	4618      	mov	r0, r3
 800eaee:	4603      	mov	r3, r0
 800eaf0:	005b      	lsls	r3, r3, #1
 800eaf2:	4403      	add	r3, r0
 800eaf4:	409a      	lsls	r2, r3
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	430a      	orrs	r2, r1
 800eafc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	685b      	ldr	r3, [r3, #4]
 800eb02:	2b06      	cmp	r3, #6
 800eb04:	d824      	bhi.n	800eb50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	685a      	ldr	r2, [r3, #4]
 800eb10:	4613      	mov	r3, r2
 800eb12:	009b      	lsls	r3, r3, #2
 800eb14:	4413      	add	r3, r2
 800eb16:	3b05      	subs	r3, #5
 800eb18:	221f      	movs	r2, #31
 800eb1a:	fa02 f303 	lsl.w	r3, r2, r3
 800eb1e:	43da      	mvns	r2, r3
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	400a      	ands	r2, r1
 800eb26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	b29b      	uxth	r3, r3
 800eb34:	4618      	mov	r0, r3
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	685a      	ldr	r2, [r3, #4]
 800eb3a:	4613      	mov	r3, r2
 800eb3c:	009b      	lsls	r3, r3, #2
 800eb3e:	4413      	add	r3, r2
 800eb40:	3b05      	subs	r3, #5
 800eb42:	fa00 f203 	lsl.w	r2, r0, r3
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	430a      	orrs	r2, r1
 800eb4c:	635a      	str	r2, [r3, #52]	; 0x34
 800eb4e:	e04c      	b.n	800ebea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	2b0c      	cmp	r3, #12
 800eb56:	d824      	bhi.n	800eba2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	685a      	ldr	r2, [r3, #4]
 800eb62:	4613      	mov	r3, r2
 800eb64:	009b      	lsls	r3, r3, #2
 800eb66:	4413      	add	r3, r2
 800eb68:	3b23      	subs	r3, #35	; 0x23
 800eb6a:	221f      	movs	r2, #31
 800eb6c:	fa02 f303 	lsl.w	r3, r2, r3
 800eb70:	43da      	mvns	r2, r3
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	400a      	ands	r2, r1
 800eb78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	b29b      	uxth	r3, r3
 800eb86:	4618      	mov	r0, r3
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	685a      	ldr	r2, [r3, #4]
 800eb8c:	4613      	mov	r3, r2
 800eb8e:	009b      	lsls	r3, r3, #2
 800eb90:	4413      	add	r3, r2
 800eb92:	3b23      	subs	r3, #35	; 0x23
 800eb94:	fa00 f203 	lsl.w	r2, r0, r3
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	430a      	orrs	r2, r1
 800eb9e:	631a      	str	r2, [r3, #48]	; 0x30
 800eba0:	e023      	b.n	800ebea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	685a      	ldr	r2, [r3, #4]
 800ebac:	4613      	mov	r3, r2
 800ebae:	009b      	lsls	r3, r3, #2
 800ebb0:	4413      	add	r3, r2
 800ebb2:	3b41      	subs	r3, #65	; 0x41
 800ebb4:	221f      	movs	r2, #31
 800ebb6:	fa02 f303 	lsl.w	r3, r2, r3
 800ebba:	43da      	mvns	r2, r3
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	400a      	ands	r2, r1
 800ebc2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	b29b      	uxth	r3, r3
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	685a      	ldr	r2, [r3, #4]
 800ebd6:	4613      	mov	r3, r2
 800ebd8:	009b      	lsls	r3, r3, #2
 800ebda:	4413      	add	r3, r2
 800ebdc:	3b41      	subs	r3, #65	; 0x41
 800ebde:	fa00 f203 	lsl.w	r2, r0, r3
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	430a      	orrs	r2, r1
 800ebe8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ebea:	4b22      	ldr	r3, [pc, #136]	; (800ec74 <HAL_ADC_ConfigChannel+0x234>)
 800ebec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	4a21      	ldr	r2, [pc, #132]	; (800ec78 <HAL_ADC_ConfigChannel+0x238>)
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d109      	bne.n	800ec0c <HAL_ADC_ConfigChannel+0x1cc>
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	2b12      	cmp	r3, #18
 800ebfe:	d105      	bne.n	800ec0c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	4a19      	ldr	r2, [pc, #100]	; (800ec78 <HAL_ADC_ConfigChannel+0x238>)
 800ec12:	4293      	cmp	r3, r2
 800ec14:	d123      	bne.n	800ec5e <HAL_ADC_ConfigChannel+0x21e>
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	2b10      	cmp	r3, #16
 800ec1c:	d003      	beq.n	800ec26 <HAL_ADC_ConfigChannel+0x1e6>
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2b11      	cmp	r3, #17
 800ec24:	d11b      	bne.n	800ec5e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	685b      	ldr	r3, [r3, #4]
 800ec2a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	2b10      	cmp	r3, #16
 800ec38:	d111      	bne.n	800ec5e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800ec3a:	4b10      	ldr	r3, [pc, #64]	; (800ec7c <HAL_ADC_ConfigChannel+0x23c>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	4a10      	ldr	r2, [pc, #64]	; (800ec80 <HAL_ADC_ConfigChannel+0x240>)
 800ec40:	fba2 2303 	umull	r2, r3, r2, r3
 800ec44:	0c9a      	lsrs	r2, r3, #18
 800ec46:	4613      	mov	r3, r2
 800ec48:	009b      	lsls	r3, r3, #2
 800ec4a:	4413      	add	r3, r2
 800ec4c:	005b      	lsls	r3, r3, #1
 800ec4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ec50:	e002      	b.n	800ec58 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	3b01      	subs	r3, #1
 800ec56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d1f9      	bne.n	800ec52 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2200      	movs	r2, #0
 800ec62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800ec66:	2300      	movs	r3, #0
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3714      	adds	r7, #20
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr
 800ec74:	40012300 	.word	0x40012300
 800ec78:	40012000 	.word	0x40012000
 800ec7c:	2000000c 	.word	0x2000000c
 800ec80:	431bde83 	.word	0x431bde83

0800ec84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b085      	sub	sp, #20
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ec8c:	4b79      	ldr	r3, [pc, #484]	; (800ee74 <ADC_Init+0x1f0>)
 800ec8e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	685a      	ldr	r2, [r3, #4]
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	431a      	orrs	r2, r3
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	685a      	ldr	r2, [r3, #4]
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ecb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	6859      	ldr	r1, [r3, #4]
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	691b      	ldr	r3, [r3, #16]
 800ecc4:	021a      	lsls	r2, r3, #8
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	430a      	orrs	r2, r1
 800eccc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	685a      	ldr	r2, [r3, #4]
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800ecdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	6859      	ldr	r1, [r3, #4]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	689a      	ldr	r2, [r3, #8]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	430a      	orrs	r2, r1
 800ecee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	689a      	ldr	r2, [r3, #8]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ecfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	6899      	ldr	r1, [r3, #8]
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	68da      	ldr	r2, [r3, #12]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	430a      	orrs	r2, r1
 800ed10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed16:	4a58      	ldr	r2, [pc, #352]	; (800ee78 <ADC_Init+0x1f4>)
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	d022      	beq.n	800ed62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	689a      	ldr	r2, [r3, #8]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ed2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	6899      	ldr	r1, [r3, #8]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	430a      	orrs	r2, r1
 800ed3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	689a      	ldr	r2, [r3, #8]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ed4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	6899      	ldr	r1, [r3, #8]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	430a      	orrs	r2, r1
 800ed5e:	609a      	str	r2, [r3, #8]
 800ed60:	e00f      	b.n	800ed82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	689a      	ldr	r2, [r3, #8]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ed70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	689a      	ldr	r2, [r3, #8]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ed80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	689a      	ldr	r2, [r3, #8]
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f022 0202 	bic.w	r2, r2, #2
 800ed90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	6899      	ldr	r1, [r3, #8]
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	7e1b      	ldrb	r3, [r3, #24]
 800ed9c:	005a      	lsls	r2, r3, #1
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	430a      	orrs	r2, r1
 800eda4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d01b      	beq.n	800ede8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	685a      	ldr	r2, [r3, #4]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800edbe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	685a      	ldr	r2, [r3, #4]
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800edce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	6859      	ldr	r1, [r3, #4]
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edda:	3b01      	subs	r3, #1
 800eddc:	035a      	lsls	r2, r3, #13
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	430a      	orrs	r2, r1
 800ede4:	605a      	str	r2, [r3, #4]
 800ede6:	e007      	b.n	800edf8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	685a      	ldr	r2, [r3, #4]
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800edf6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800ee06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	69db      	ldr	r3, [r3, #28]
 800ee12:	3b01      	subs	r3, #1
 800ee14:	051a      	lsls	r2, r3, #20
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	430a      	orrs	r2, r1
 800ee1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	689a      	ldr	r2, [r3, #8]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ee2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	6899      	ldr	r1, [r3, #8]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee3a:	025a      	lsls	r2, r3, #9
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	430a      	orrs	r2, r1
 800ee42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	689a      	ldr	r2, [r3, #8]
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	6899      	ldr	r1, [r3, #8]
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	695b      	ldr	r3, [r3, #20]
 800ee5e:	029a      	lsls	r2, r3, #10
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	430a      	orrs	r2, r1
 800ee66:	609a      	str	r2, [r3, #8]
}
 800ee68:	bf00      	nop
 800ee6a:	3714      	adds	r7, #20
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee72:	4770      	bx	lr
 800ee74:	40012300 	.word	0x40012300
 800ee78:	0f000001 	.word	0x0f000001

0800ee7c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b084      	sub	sp, #16
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee88:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee8e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d13c      	bne.n	800ef10 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	689b      	ldr	r3, [r3, #8]
 800eea8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d12b      	bne.n	800ef08 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d127      	bne.n	800ef08 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eebe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d006      	beq.n	800eed4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	689b      	ldr	r3, [r3, #8]
 800eecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d119      	bne.n	800ef08 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	685a      	ldr	r2, [r3, #4]
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	f022 0220 	bic.w	r2, r2, #32
 800eee2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eee8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d105      	bne.n	800ef08 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef00:	f043 0201 	orr.w	r2, r3, #1
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800ef08:	68f8      	ldr	r0, [r7, #12]
 800ef0a:	f7fd fc6f 	bl	800c7ec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800ef0e:	e00e      	b.n	800ef2e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef14:	f003 0310 	and.w	r3, r3, #16
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d003      	beq.n	800ef24 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800ef1c:	68f8      	ldr	r0, [r7, #12]
 800ef1e:	f7ff fd85 	bl	800ea2c <HAL_ADC_ErrorCallback>
}
 800ef22:	e004      	b.n	800ef2e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	4798      	blx	r3
}
 800ef2e:	bf00      	nop
 800ef30:	3710      	adds	r7, #16
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}

0800ef36 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800ef36:	b580      	push	{r7, lr}
 800ef38:	b084      	sub	sp, #16
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef42:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800ef44:	68f8      	ldr	r0, [r7, #12]
 800ef46:	f7ff fd67 	bl	800ea18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ef4a:	bf00      	nop
 800ef4c:	3710      	adds	r7, #16
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b084      	sub	sp, #16
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef5e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	2240      	movs	r2, #64	; 0x40
 800ef64:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef6a:	f043 0204 	orr.w	r2, r3, #4
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800ef72:	68f8      	ldr	r0, [r7, #12]
 800ef74:	f7ff fd5a 	bl	800ea2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ef78:	bf00      	nop
 800ef7a:	3710      	adds	r7, #16
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}

0800ef80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b085      	sub	sp, #20
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f003 0307 	and.w	r3, r3, #7
 800ef8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ef90:	4b0c      	ldr	r3, [pc, #48]	; (800efc4 <__NVIC_SetPriorityGrouping+0x44>)
 800ef92:	68db      	ldr	r3, [r3, #12]
 800ef94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ef96:	68ba      	ldr	r2, [r7, #8]
 800ef98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ef9c:	4013      	ands	r3, r2
 800ef9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800efa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800efac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800efb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800efb2:	4a04      	ldr	r2, [pc, #16]	; (800efc4 <__NVIC_SetPriorityGrouping+0x44>)
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	60d3      	str	r3, [r2, #12]
}
 800efb8:	bf00      	nop
 800efba:	3714      	adds	r7, #20
 800efbc:	46bd      	mov	sp, r7
 800efbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc2:	4770      	bx	lr
 800efc4:	e000ed00 	.word	0xe000ed00

0800efc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800efc8:	b480      	push	{r7}
 800efca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800efcc:	4b04      	ldr	r3, [pc, #16]	; (800efe0 <__NVIC_GetPriorityGrouping+0x18>)
 800efce:	68db      	ldr	r3, [r3, #12]
 800efd0:	0a1b      	lsrs	r3, r3, #8
 800efd2:	f003 0307 	and.w	r3, r3, #7
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr
 800efe0:	e000ed00 	.word	0xe000ed00

0800efe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800efe4:	b480      	push	{r7}
 800efe6:	b083      	sub	sp, #12
 800efe8:	af00      	add	r7, sp, #0
 800efea:	4603      	mov	r3, r0
 800efec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800efee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	db0b      	blt.n	800f00e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800eff6:	79fb      	ldrb	r3, [r7, #7]
 800eff8:	f003 021f 	and.w	r2, r3, #31
 800effc:	4907      	ldr	r1, [pc, #28]	; (800f01c <__NVIC_EnableIRQ+0x38>)
 800effe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f002:	095b      	lsrs	r3, r3, #5
 800f004:	2001      	movs	r0, #1
 800f006:	fa00 f202 	lsl.w	r2, r0, r2
 800f00a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800f00e:	bf00      	nop
 800f010:	370c      	adds	r7, #12
 800f012:	46bd      	mov	sp, r7
 800f014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f018:	4770      	bx	lr
 800f01a:	bf00      	nop
 800f01c:	e000e100 	.word	0xe000e100

0800f020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f020:	b480      	push	{r7}
 800f022:	b083      	sub	sp, #12
 800f024:	af00      	add	r7, sp, #0
 800f026:	4603      	mov	r3, r0
 800f028:	6039      	str	r1, [r7, #0]
 800f02a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f02c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f030:	2b00      	cmp	r3, #0
 800f032:	db0a      	blt.n	800f04a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	b2da      	uxtb	r2, r3
 800f038:	490c      	ldr	r1, [pc, #48]	; (800f06c <__NVIC_SetPriority+0x4c>)
 800f03a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f03e:	0112      	lsls	r2, r2, #4
 800f040:	b2d2      	uxtb	r2, r2
 800f042:	440b      	add	r3, r1
 800f044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800f048:	e00a      	b.n	800f060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	b2da      	uxtb	r2, r3
 800f04e:	4908      	ldr	r1, [pc, #32]	; (800f070 <__NVIC_SetPriority+0x50>)
 800f050:	79fb      	ldrb	r3, [r7, #7]
 800f052:	f003 030f 	and.w	r3, r3, #15
 800f056:	3b04      	subs	r3, #4
 800f058:	0112      	lsls	r2, r2, #4
 800f05a:	b2d2      	uxtb	r2, r2
 800f05c:	440b      	add	r3, r1
 800f05e:	761a      	strb	r2, [r3, #24]
}
 800f060:	bf00      	nop
 800f062:	370c      	adds	r7, #12
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr
 800f06c:	e000e100 	.word	0xe000e100
 800f070:	e000ed00 	.word	0xe000ed00

0800f074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f074:	b480      	push	{r7}
 800f076:	b089      	sub	sp, #36	; 0x24
 800f078:	af00      	add	r7, sp, #0
 800f07a:	60f8      	str	r0, [r7, #12]
 800f07c:	60b9      	str	r1, [r7, #8]
 800f07e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f003 0307 	and.w	r3, r3, #7
 800f086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	f1c3 0307 	rsb	r3, r3, #7
 800f08e:	2b04      	cmp	r3, #4
 800f090:	bf28      	it	cs
 800f092:	2304      	movcs	r3, #4
 800f094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f096:	69fb      	ldr	r3, [r7, #28]
 800f098:	3304      	adds	r3, #4
 800f09a:	2b06      	cmp	r3, #6
 800f09c:	d902      	bls.n	800f0a4 <NVIC_EncodePriority+0x30>
 800f09e:	69fb      	ldr	r3, [r7, #28]
 800f0a0:	3b03      	subs	r3, #3
 800f0a2:	e000      	b.n	800f0a6 <NVIC_EncodePriority+0x32>
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f0ac:	69bb      	ldr	r3, [r7, #24]
 800f0ae:	fa02 f303 	lsl.w	r3, r2, r3
 800f0b2:	43da      	mvns	r2, r3
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	401a      	ands	r2, r3
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f0bc:	f04f 31ff 	mov.w	r1, #4294967295
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	fa01 f303 	lsl.w	r3, r1, r3
 800f0c6:	43d9      	mvns	r1, r3
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f0cc:	4313      	orrs	r3, r2
         );
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3724      	adds	r7, #36	; 0x24
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d8:	4770      	bx	lr
	...

0800f0dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	3b01      	subs	r3, #1
 800f0e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f0ec:	d301      	bcc.n	800f0f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	e00f      	b.n	800f112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f0f2:	4a0a      	ldr	r2, [pc, #40]	; (800f11c <SysTick_Config+0x40>)
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	3b01      	subs	r3, #1
 800f0f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f0fa:	210f      	movs	r1, #15
 800f0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f100:	f7ff ff8e 	bl	800f020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f104:	4b05      	ldr	r3, [pc, #20]	; (800f11c <SysTick_Config+0x40>)
 800f106:	2200      	movs	r2, #0
 800f108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f10a:	4b04      	ldr	r3, [pc, #16]	; (800f11c <SysTick_Config+0x40>)
 800f10c:	2207      	movs	r2, #7
 800f10e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f110:	2300      	movs	r3, #0
}
 800f112:	4618      	mov	r0, r3
 800f114:	3708      	adds	r7, #8
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}
 800f11a:	bf00      	nop
 800f11c:	e000e010 	.word	0xe000e010

0800f120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b082      	sub	sp, #8
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f7ff ff29 	bl	800ef80 <__NVIC_SetPriorityGrouping>
}
 800f12e:	bf00      	nop
 800f130:	3708      	adds	r7, #8
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}

0800f136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f136:	b580      	push	{r7, lr}
 800f138:	b086      	sub	sp, #24
 800f13a:	af00      	add	r7, sp, #0
 800f13c:	4603      	mov	r3, r0
 800f13e:	60b9      	str	r1, [r7, #8]
 800f140:	607a      	str	r2, [r7, #4]
 800f142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800f144:	2300      	movs	r3, #0
 800f146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f148:	f7ff ff3e 	bl	800efc8 <__NVIC_GetPriorityGrouping>
 800f14c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f14e:	687a      	ldr	r2, [r7, #4]
 800f150:	68b9      	ldr	r1, [r7, #8]
 800f152:	6978      	ldr	r0, [r7, #20]
 800f154:	f7ff ff8e 	bl	800f074 <NVIC_EncodePriority>
 800f158:	4602      	mov	r2, r0
 800f15a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f15e:	4611      	mov	r1, r2
 800f160:	4618      	mov	r0, r3
 800f162:	f7ff ff5d 	bl	800f020 <__NVIC_SetPriority>
}
 800f166:	bf00      	nop
 800f168:	3718      	adds	r7, #24
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}

0800f16e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f16e:	b580      	push	{r7, lr}
 800f170:	b082      	sub	sp, #8
 800f172:	af00      	add	r7, sp, #0
 800f174:	4603      	mov	r3, r0
 800f176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7ff ff31 	bl	800efe4 <__NVIC_EnableIRQ>
}
 800f182:	bf00      	nop
 800f184:	3708      	adds	r7, #8
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}

0800f18a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f18a:	b580      	push	{r7, lr}
 800f18c:	b082      	sub	sp, #8
 800f18e:	af00      	add	r7, sp, #0
 800f190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f7ff ffa2 	bl	800f0dc <SysTick_Config>
 800f198:	4603      	mov	r3, r0
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3708      	adds	r7, #8
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}
	...

0800f1a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b086      	sub	sp, #24
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800f1b0:	f7ff face 	bl	800e750 <HAL_GetTick>
 800f1b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d101      	bne.n	800f1c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800f1bc:	2301      	movs	r3, #1
 800f1be:	e099      	b.n	800f2f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2202      	movs	r2, #2
 800f1cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	681a      	ldr	r2, [r3, #0]
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	f022 0201 	bic.w	r2, r2, #1
 800f1de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f1e0:	e00f      	b.n	800f202 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f1e2:	f7ff fab5 	bl	800e750 <HAL_GetTick>
 800f1e6:	4602      	mov	r2, r0
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	1ad3      	subs	r3, r2, r3
 800f1ec:	2b05      	cmp	r3, #5
 800f1ee:	d908      	bls.n	800f202 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2220      	movs	r2, #32
 800f1f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2203      	movs	r2, #3
 800f1fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800f1fe:	2303      	movs	r3, #3
 800f200:	e078      	b.n	800f2f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f003 0301 	and.w	r3, r3, #1
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d1e8      	bne.n	800f1e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f218:	697a      	ldr	r2, [r7, #20]
 800f21a:	4b38      	ldr	r3, [pc, #224]	; (800f2fc <HAL_DMA_Init+0x158>)
 800f21c:	4013      	ands	r3, r2
 800f21e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	685a      	ldr	r2, [r3, #4]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	689b      	ldr	r3, [r3, #8]
 800f228:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f22e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	691b      	ldr	r3, [r3, #16]
 800f234:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f23a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	699b      	ldr	r3, [r3, #24]
 800f240:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f246:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	6a1b      	ldr	r3, [r3, #32]
 800f24c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f24e:	697a      	ldr	r2, [r7, #20]
 800f250:	4313      	orrs	r3, r2
 800f252:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f258:	2b04      	cmp	r3, #4
 800f25a:	d107      	bne.n	800f26c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f264:	4313      	orrs	r3, r2
 800f266:	697a      	ldr	r2, [r7, #20]
 800f268:	4313      	orrs	r3, r2
 800f26a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	697a      	ldr	r2, [r7, #20]
 800f272:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	695b      	ldr	r3, [r3, #20]
 800f27a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	f023 0307 	bic.w	r3, r3, #7
 800f282:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f288:	697a      	ldr	r2, [r7, #20]
 800f28a:	4313      	orrs	r3, r2
 800f28c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f292:	2b04      	cmp	r3, #4
 800f294:	d117      	bne.n	800f2c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f29a:	697a      	ldr	r2, [r7, #20]
 800f29c:	4313      	orrs	r3, r2
 800f29e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d00e      	beq.n	800f2c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f000 fa91 	bl	800f7d0 <DMA_CheckFifoParam>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d008      	beq.n	800f2c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2240      	movs	r2, #64	; 0x40
 800f2b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2201      	movs	r2, #1
 800f2be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	e016      	b.n	800f2f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	697a      	ldr	r2, [r7, #20]
 800f2cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f2ce:	6878      	ldr	r0, [r7, #4]
 800f2d0:	f000 fa48 	bl	800f764 <DMA_CalcBaseAndBitshift>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2dc:	223f      	movs	r2, #63	; 0x3f
 800f2de:	409a      	lsls	r2, r3
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800f2f2:	2300      	movs	r3, #0
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3718      	adds	r7, #24
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}
 800f2fc:	f010803f 	.word	0xf010803f

0800f300 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b086      	sub	sp, #24
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	607a      	str	r2, [r7, #4]
 800f30c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f30e:	2300      	movs	r3, #0
 800f310:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f316:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f31e:	2b01      	cmp	r3, #1
 800f320:	d101      	bne.n	800f326 <HAL_DMA_Start_IT+0x26>
 800f322:	2302      	movs	r3, #2
 800f324:	e040      	b.n	800f3a8 <HAL_DMA_Start_IT+0xa8>
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	2201      	movs	r2, #1
 800f32a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f334:	b2db      	uxtb	r3, r3
 800f336:	2b01      	cmp	r3, #1
 800f338:	d12f      	bne.n	800f39a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	2202      	movs	r2, #2
 800f33e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	2200      	movs	r2, #0
 800f346:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	687a      	ldr	r2, [r7, #4]
 800f34c:	68b9      	ldr	r1, [r7, #8]
 800f34e:	68f8      	ldr	r0, [r7, #12]
 800f350:	f000 f9da 	bl	800f708 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f358:	223f      	movs	r2, #63	; 0x3f
 800f35a:	409a      	lsls	r2, r3
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	681a      	ldr	r2, [r3, #0]
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	f042 0216 	orr.w	r2, r2, #22
 800f36e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f374:	2b00      	cmp	r3, #0
 800f376:	d007      	beq.n	800f388 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	681a      	ldr	r2, [r3, #0]
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f042 0208 	orr.w	r2, r2, #8
 800f386:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	681a      	ldr	r2, [r3, #0]
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	f042 0201 	orr.w	r2, r2, #1
 800f396:	601a      	str	r2, [r3, #0]
 800f398:	e005      	b.n	800f3a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	2200      	movs	r2, #0
 800f39e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800f3a2:	2302      	movs	r3, #2
 800f3a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800f3a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3718      	adds	r7, #24
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b083      	sub	sp, #12
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f3be:	b2db      	uxtb	r3, r3
 800f3c0:	2b02      	cmp	r3, #2
 800f3c2:	d004      	beq.n	800f3ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2280      	movs	r2, #128	; 0x80
 800f3c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	e00c      	b.n	800f3e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2205      	movs	r2, #5
 800f3d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	f022 0201 	bic.w	r2, r2, #1
 800f3e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f3e6:	2300      	movs	r3, #0
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	370c      	adds	r7, #12
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f2:	4770      	bx	lr

0800f3f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b086      	sub	sp, #24
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f400:	4b92      	ldr	r3, [pc, #584]	; (800f64c <HAL_DMA_IRQHandler+0x258>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	4a92      	ldr	r2, [pc, #584]	; (800f650 <HAL_DMA_IRQHandler+0x25c>)
 800f406:	fba2 2303 	umull	r2, r3, r2, r3
 800f40a:	0a9b      	lsrs	r3, r3, #10
 800f40c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f412:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800f414:	693b      	ldr	r3, [r7, #16]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f41e:	2208      	movs	r2, #8
 800f420:	409a      	lsls	r2, r3
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	4013      	ands	r3, r2
 800f426:	2b00      	cmp	r3, #0
 800f428:	d01a      	beq.n	800f460 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	f003 0304 	and.w	r3, r3, #4
 800f434:	2b00      	cmp	r3, #0
 800f436:	d013      	beq.n	800f460 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	681a      	ldr	r2, [r3, #0]
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f022 0204 	bic.w	r2, r2, #4
 800f446:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f44c:	2208      	movs	r2, #8
 800f44e:	409a      	lsls	r2, r3
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f458:	f043 0201 	orr.w	r2, r3, #1
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f464:	2201      	movs	r2, #1
 800f466:	409a      	lsls	r2, r3
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	4013      	ands	r3, r2
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d012      	beq.n	800f496 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	695b      	ldr	r3, [r3, #20]
 800f476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d00b      	beq.n	800f496 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f482:	2201      	movs	r2, #1
 800f484:	409a      	lsls	r2, r3
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f48e:	f043 0202 	orr.w	r2, r3, #2
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f49a:	2204      	movs	r2, #4
 800f49c:	409a      	lsls	r2, r3
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	4013      	ands	r3, r2
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d012      	beq.n	800f4cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	f003 0302 	and.w	r3, r3, #2
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d00b      	beq.n	800f4cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4b8:	2204      	movs	r2, #4
 800f4ba:	409a      	lsls	r2, r3
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4c4:	f043 0204 	orr.w	r2, r3, #4
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4d0:	2210      	movs	r2, #16
 800f4d2:	409a      	lsls	r2, r3
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	4013      	ands	r3, r2
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d043      	beq.n	800f564 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	f003 0308 	and.w	r3, r3, #8
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d03c      	beq.n	800f564 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4ee:	2210      	movs	r2, #16
 800f4f0:	409a      	lsls	r2, r3
 800f4f2:	693b      	ldr	r3, [r7, #16]
 800f4f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f500:	2b00      	cmp	r3, #0
 800f502:	d018      	beq.n	800f536 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d108      	bne.n	800f524 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f516:	2b00      	cmp	r3, #0
 800f518:	d024      	beq.n	800f564 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	4798      	blx	r3
 800f522:	e01f      	b.n	800f564 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d01b      	beq.n	800f564 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	4798      	blx	r3
 800f534:	e016      	b.n	800f564 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f540:	2b00      	cmp	r3, #0
 800f542:	d107      	bne.n	800f554 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f022 0208 	bic.w	r2, r2, #8
 800f552:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d003      	beq.n	800f564 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f568:	2220      	movs	r2, #32
 800f56a:	409a      	lsls	r2, r3
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	4013      	ands	r3, r2
 800f570:	2b00      	cmp	r3, #0
 800f572:	f000 808e 	beq.w	800f692 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f003 0310 	and.w	r3, r3, #16
 800f580:	2b00      	cmp	r3, #0
 800f582:	f000 8086 	beq.w	800f692 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f58a:	2220      	movs	r2, #32
 800f58c:	409a      	lsls	r2, r3
 800f58e:	693b      	ldr	r3, [r7, #16]
 800f590:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f598:	b2db      	uxtb	r3, r3
 800f59a:	2b05      	cmp	r3, #5
 800f59c:	d136      	bne.n	800f60c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	681a      	ldr	r2, [r3, #0]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	f022 0216 	bic.w	r2, r2, #22
 800f5ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	695a      	ldr	r2, [r3, #20]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f5bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d103      	bne.n	800f5ce <HAL_DMA_IRQHandler+0x1da>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d007      	beq.n	800f5de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	681a      	ldr	r2, [r3, #0]
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	f022 0208 	bic.w	r2, r2, #8
 800f5dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5e2:	223f      	movs	r2, #63	; 0x3f
 800f5e4:	409a      	lsls	r2, r3
 800f5e6:	693b      	ldr	r3, [r7, #16]
 800f5e8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	2201      	movs	r2, #1
 800f5f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d07d      	beq.n	800f6fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	4798      	blx	r3
        }
        return;
 800f60a:	e078      	b.n	800f6fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f616:	2b00      	cmp	r3, #0
 800f618:	d01c      	beq.n	800f654 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f624:	2b00      	cmp	r3, #0
 800f626:	d108      	bne.n	800f63a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d030      	beq.n	800f692 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	4798      	blx	r3
 800f638:	e02b      	b.n	800f692 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d027      	beq.n	800f692 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	4798      	blx	r3
 800f64a:	e022      	b.n	800f692 <HAL_DMA_IRQHandler+0x29e>
 800f64c:	2000000c 	.word	0x2000000c
 800f650:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d10f      	bne.n	800f682 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	681a      	ldr	r2, [r3, #0]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	f022 0210 	bic.w	r2, r2, #16
 800f670:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2200      	movs	r2, #0
 800f676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2201      	movs	r2, #1
 800f67e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f686:	2b00      	cmp	r3, #0
 800f688:	d003      	beq.n	800f692 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f696:	2b00      	cmp	r3, #0
 800f698:	d032      	beq.n	800f700 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f69e:	f003 0301 	and.w	r3, r3, #1
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d022      	beq.n	800f6ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2205      	movs	r2, #5
 800f6aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	681a      	ldr	r2, [r3, #0]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	f022 0201 	bic.w	r2, r2, #1
 800f6bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	60bb      	str	r3, [r7, #8]
 800f6c4:	697a      	ldr	r2, [r7, #20]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d307      	bcc.n	800f6da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	f003 0301 	and.w	r3, r3, #1
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d1f2      	bne.n	800f6be <HAL_DMA_IRQHandler+0x2ca>
 800f6d8:	e000      	b.n	800f6dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 800f6da:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d005      	beq.n	800f700 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	4798      	blx	r3
 800f6fc:	e000      	b.n	800f700 <HAL_DMA_IRQHandler+0x30c>
        return;
 800f6fe:	bf00      	nop
    }
  }
}
 800f700:	3718      	adds	r7, #24
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}
 800f706:	bf00      	nop

0800f708 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f708:	b480      	push	{r7}
 800f70a:	b085      	sub	sp, #20
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	60f8      	str	r0, [r7, #12]
 800f710:	60b9      	str	r1, [r7, #8]
 800f712:	607a      	str	r2, [r7, #4]
 800f714:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f724:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	683a      	ldr	r2, [r7, #0]
 800f72c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	689b      	ldr	r3, [r3, #8]
 800f732:	2b40      	cmp	r3, #64	; 0x40
 800f734:	d108      	bne.n	800f748 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	687a      	ldr	r2, [r7, #4]
 800f73c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	68ba      	ldr	r2, [r7, #8]
 800f744:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800f746:	e007      	b.n	800f758 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	68ba      	ldr	r2, [r7, #8]
 800f74e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	687a      	ldr	r2, [r7, #4]
 800f756:	60da      	str	r2, [r3, #12]
}
 800f758:	bf00      	nop
 800f75a:	3714      	adds	r7, #20
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr

0800f764 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800f764:	b480      	push	{r7}
 800f766:	b085      	sub	sp, #20
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	b2db      	uxtb	r3, r3
 800f772:	3b10      	subs	r3, #16
 800f774:	4a14      	ldr	r2, [pc, #80]	; (800f7c8 <DMA_CalcBaseAndBitshift+0x64>)
 800f776:	fba2 2303 	umull	r2, r3, r2, r3
 800f77a:	091b      	lsrs	r3, r3, #4
 800f77c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f77e:	4a13      	ldr	r2, [pc, #76]	; (800f7cc <DMA_CalcBaseAndBitshift+0x68>)
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	4413      	add	r3, r2
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	461a      	mov	r2, r3
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2b03      	cmp	r3, #3
 800f790:	d909      	bls.n	800f7a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f79a:	f023 0303 	bic.w	r3, r3, #3
 800f79e:	1d1a      	adds	r2, r3, #4
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	659a      	str	r2, [r3, #88]	; 0x58
 800f7a4:	e007      	b.n	800f7b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f7ae:	f023 0303 	bic.w	r3, r3, #3
 800f7b2:	687a      	ldr	r2, [r7, #4]
 800f7b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3714      	adds	r7, #20
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c4:	4770      	bx	lr
 800f7c6:	bf00      	nop
 800f7c8:	aaaaaaab 	.word	0xaaaaaaab
 800f7cc:	080164cc 	.word	0x080164cc

0800f7d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b085      	sub	sp, #20
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f7d8:	2300      	movs	r3, #0
 800f7da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	699b      	ldr	r3, [r3, #24]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d11f      	bne.n	800f82a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	2b03      	cmp	r3, #3
 800f7ee:	d855      	bhi.n	800f89c <DMA_CheckFifoParam+0xcc>
 800f7f0:	a201      	add	r2, pc, #4	; (adr r2, 800f7f8 <DMA_CheckFifoParam+0x28>)
 800f7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7f6:	bf00      	nop
 800f7f8:	0800f809 	.word	0x0800f809
 800f7fc:	0800f81b 	.word	0x0800f81b
 800f800:	0800f809 	.word	0x0800f809
 800f804:	0800f89d 	.word	0x0800f89d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f80c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f810:	2b00      	cmp	r3, #0
 800f812:	d045      	beq.n	800f8a0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800f814:	2301      	movs	r3, #1
 800f816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f818:	e042      	b.n	800f8a0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f81e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f822:	d13f      	bne.n	800f8a4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800f824:	2301      	movs	r3, #1
 800f826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f828:	e03c      	b.n	800f8a4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	699b      	ldr	r3, [r3, #24]
 800f82e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f832:	d121      	bne.n	800f878 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	2b03      	cmp	r3, #3
 800f838:	d836      	bhi.n	800f8a8 <DMA_CheckFifoParam+0xd8>
 800f83a:	a201      	add	r2, pc, #4	; (adr r2, 800f840 <DMA_CheckFifoParam+0x70>)
 800f83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f840:	0800f851 	.word	0x0800f851
 800f844:	0800f857 	.word	0x0800f857
 800f848:	0800f851 	.word	0x0800f851
 800f84c:	0800f869 	.word	0x0800f869
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800f850:	2301      	movs	r3, #1
 800f852:	73fb      	strb	r3, [r7, #15]
      break;
 800f854:	e02f      	b.n	800f8b6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f85a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d024      	beq.n	800f8ac <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800f862:	2301      	movs	r3, #1
 800f864:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f866:	e021      	b.n	800f8ac <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f86c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f870:	d11e      	bne.n	800f8b0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800f872:	2301      	movs	r3, #1
 800f874:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800f876:	e01b      	b.n	800f8b0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	2b02      	cmp	r3, #2
 800f87c:	d902      	bls.n	800f884 <DMA_CheckFifoParam+0xb4>
 800f87e:	2b03      	cmp	r3, #3
 800f880:	d003      	beq.n	800f88a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800f882:	e018      	b.n	800f8b6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800f884:	2301      	movs	r3, #1
 800f886:	73fb      	strb	r3, [r7, #15]
      break;
 800f888:	e015      	b.n	800f8b6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f88e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f892:	2b00      	cmp	r3, #0
 800f894:	d00e      	beq.n	800f8b4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800f896:	2301      	movs	r3, #1
 800f898:	73fb      	strb	r3, [r7, #15]
      break;
 800f89a:	e00b      	b.n	800f8b4 <DMA_CheckFifoParam+0xe4>
      break;
 800f89c:	bf00      	nop
 800f89e:	e00a      	b.n	800f8b6 <DMA_CheckFifoParam+0xe6>
      break;
 800f8a0:	bf00      	nop
 800f8a2:	e008      	b.n	800f8b6 <DMA_CheckFifoParam+0xe6>
      break;
 800f8a4:	bf00      	nop
 800f8a6:	e006      	b.n	800f8b6 <DMA_CheckFifoParam+0xe6>
      break;
 800f8a8:	bf00      	nop
 800f8aa:	e004      	b.n	800f8b6 <DMA_CheckFifoParam+0xe6>
      break;
 800f8ac:	bf00      	nop
 800f8ae:	e002      	b.n	800f8b6 <DMA_CheckFifoParam+0xe6>
      break;   
 800f8b0:	bf00      	nop
 800f8b2:	e000      	b.n	800f8b6 <DMA_CheckFifoParam+0xe6>
      break;
 800f8b4:	bf00      	nop
    }
  } 
  
  return status; 
 800f8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3714      	adds	r7, #20
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c2:	4770      	bx	lr

0800f8c4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b086      	sub	sp, #24
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	60f8      	str	r0, [r7, #12]
 800f8cc:	60b9      	str	r1, [r7, #8]
 800f8ce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800f8d6:	4b23      	ldr	r3, [pc, #140]	; (800f964 <HAL_FLASH_Program+0xa0>)
 800f8d8:	7e1b      	ldrb	r3, [r3, #24]
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	d101      	bne.n	800f8e2 <HAL_FLASH_Program+0x1e>
 800f8de:	2302      	movs	r3, #2
 800f8e0:	e03b      	b.n	800f95a <HAL_FLASH_Program+0x96>
 800f8e2:	4b20      	ldr	r3, [pc, #128]	; (800f964 <HAL_FLASH_Program+0xa0>)
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f8e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f8ec:	f000 f870 	bl	800f9d0 <FLASH_WaitForLastOperation>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800f8f4:	7dfb      	ldrb	r3, [r7, #23]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d12b      	bne.n	800f952 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d105      	bne.n	800f90c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800f900:	783b      	ldrb	r3, [r7, #0]
 800f902:	4619      	mov	r1, r3
 800f904:	68b8      	ldr	r0, [r7, #8]
 800f906:	f000 f919 	bl	800fb3c <FLASH_Program_Byte>
 800f90a:	e016      	b.n	800f93a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2b01      	cmp	r3, #1
 800f910:	d105      	bne.n	800f91e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800f912:	883b      	ldrh	r3, [r7, #0]
 800f914:	4619      	mov	r1, r3
 800f916:	68b8      	ldr	r0, [r7, #8]
 800f918:	f000 f8ec 	bl	800faf4 <FLASH_Program_HalfWord>
 800f91c:	e00d      	b.n	800f93a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2b02      	cmp	r3, #2
 800f922:	d105      	bne.n	800f930 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	4619      	mov	r1, r3
 800f928:	68b8      	ldr	r0, [r7, #8]
 800f92a:	f000 f8c1 	bl	800fab0 <FLASH_Program_Word>
 800f92e:	e004      	b.n	800f93a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800f930:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f934:	68b8      	ldr	r0, [r7, #8]
 800f936:	f000 f88b 	bl	800fa50 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f93a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f93e:	f000 f847 	bl	800f9d0 <FLASH_WaitForLastOperation>
 800f942:	4603      	mov	r3, r0
 800f944:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800f946:	4b08      	ldr	r3, [pc, #32]	; (800f968 <HAL_FLASH_Program+0xa4>)
 800f948:	691b      	ldr	r3, [r3, #16]
 800f94a:	4a07      	ldr	r2, [pc, #28]	; (800f968 <HAL_FLASH_Program+0xa4>)
 800f94c:	f023 0301 	bic.w	r3, r3, #1
 800f950:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800f952:	4b04      	ldr	r3, [pc, #16]	; (800f964 <HAL_FLASH_Program+0xa0>)
 800f954:	2200      	movs	r2, #0
 800f956:	761a      	strb	r2, [r3, #24]
  
  return status;
 800f958:	7dfb      	ldrb	r3, [r7, #23]
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3718      	adds	r7, #24
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
 800f962:	bf00      	nop
 800f964:	20014694 	.word	0x20014694
 800f968:	40023c00 	.word	0x40023c00

0800f96c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800f96c:	b480      	push	{r7}
 800f96e:	b083      	sub	sp, #12
 800f970:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800f972:	2300      	movs	r3, #0
 800f974:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800f976:	4b0b      	ldr	r3, [pc, #44]	; (800f9a4 <HAL_FLASH_Unlock+0x38>)
 800f978:	691b      	ldr	r3, [r3, #16]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	da0b      	bge.n	800f996 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800f97e:	4b09      	ldr	r3, [pc, #36]	; (800f9a4 <HAL_FLASH_Unlock+0x38>)
 800f980:	4a09      	ldr	r2, [pc, #36]	; (800f9a8 <HAL_FLASH_Unlock+0x3c>)
 800f982:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800f984:	4b07      	ldr	r3, [pc, #28]	; (800f9a4 <HAL_FLASH_Unlock+0x38>)
 800f986:	4a09      	ldr	r2, [pc, #36]	; (800f9ac <HAL_FLASH_Unlock+0x40>)
 800f988:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800f98a:	4b06      	ldr	r3, [pc, #24]	; (800f9a4 <HAL_FLASH_Unlock+0x38>)
 800f98c:	691b      	ldr	r3, [r3, #16]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	da01      	bge.n	800f996 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800f992:	2301      	movs	r3, #1
 800f994:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800f996:	79fb      	ldrb	r3, [r7, #7]
}
 800f998:	4618      	mov	r0, r3
 800f99a:	370c      	adds	r7, #12
 800f99c:	46bd      	mov	sp, r7
 800f99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a2:	4770      	bx	lr
 800f9a4:	40023c00 	.word	0x40023c00
 800f9a8:	45670123 	.word	0x45670123
 800f9ac:	cdef89ab 	.word	0xcdef89ab

0800f9b0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800f9b4:	4b05      	ldr	r3, [pc, #20]	; (800f9cc <HAL_FLASH_Lock+0x1c>)
 800f9b6:	691b      	ldr	r3, [r3, #16]
 800f9b8:	4a04      	ldr	r2, [pc, #16]	; (800f9cc <HAL_FLASH_Lock+0x1c>)
 800f9ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f9be:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800f9c0:	2300      	movs	r3, #0
}
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ca:	4770      	bx	lr
 800f9cc:	40023c00 	.word	0x40023c00

0800f9d0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b084      	sub	sp, #16
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f9d8:	2300      	movs	r3, #0
 800f9da:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f9dc:	4b1a      	ldr	r3, [pc, #104]	; (800fa48 <FLASH_WaitForLastOperation+0x78>)
 800f9de:	2200      	movs	r2, #0
 800f9e0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800f9e2:	f7fe feb5 	bl	800e750 <HAL_GetTick>
 800f9e6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800f9e8:	e010      	b.n	800fa0c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9f0:	d00c      	beq.n	800fa0c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d007      	beq.n	800fa08 <FLASH_WaitForLastOperation+0x38>
 800f9f8:	f7fe feaa 	bl	800e750 <HAL_GetTick>
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	1ad3      	subs	r3, r2, r3
 800fa02:	687a      	ldr	r2, [r7, #4]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d201      	bcs.n	800fa0c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800fa08:	2303      	movs	r3, #3
 800fa0a:	e019      	b.n	800fa40 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800fa0c:	4b0f      	ldr	r3, [pc, #60]	; (800fa4c <FLASH_WaitForLastOperation+0x7c>)
 800fa0e:	68db      	ldr	r3, [r3, #12]
 800fa10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d1e8      	bne.n	800f9ea <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800fa18:	4b0c      	ldr	r3, [pc, #48]	; (800fa4c <FLASH_WaitForLastOperation+0x7c>)
 800fa1a:	68db      	ldr	r3, [r3, #12]
 800fa1c:	f003 0301 	and.w	r3, r3, #1
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d002      	beq.n	800fa2a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800fa24:	4b09      	ldr	r3, [pc, #36]	; (800fa4c <FLASH_WaitForLastOperation+0x7c>)
 800fa26:	2201      	movs	r2, #1
 800fa28:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800fa2a:	4b08      	ldr	r3, [pc, #32]	; (800fa4c <FLASH_WaitForLastOperation+0x7c>)
 800fa2c:	68db      	ldr	r3, [r3, #12]
 800fa2e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d003      	beq.n	800fa3e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800fa36:	f000 f8a3 	bl	800fb80 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	e000      	b.n	800fa40 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800fa3e:	2300      	movs	r3, #0
  
}  
 800fa40:	4618      	mov	r0, r3
 800fa42:	3710      	adds	r7, #16
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	20014694 	.word	0x20014694
 800fa4c:	40023c00 	.word	0x40023c00

0800fa50 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800fa50:	b490      	push	{r4, r7}
 800fa52:	b084      	sub	sp, #16
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	60f8      	str	r0, [r7, #12]
 800fa58:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fa5c:	4b13      	ldr	r3, [pc, #76]	; (800faac <FLASH_Program_DoubleWord+0x5c>)
 800fa5e:	691b      	ldr	r3, [r3, #16]
 800fa60:	4a12      	ldr	r2, [pc, #72]	; (800faac <FLASH_Program_DoubleWord+0x5c>)
 800fa62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800fa68:	4b10      	ldr	r3, [pc, #64]	; (800faac <FLASH_Program_DoubleWord+0x5c>)
 800fa6a:	691b      	ldr	r3, [r3, #16]
 800fa6c:	4a0f      	ldr	r2, [pc, #60]	; (800faac <FLASH_Program_DoubleWord+0x5c>)
 800fa6e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800fa72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800fa74:	4b0d      	ldr	r3, [pc, #52]	; (800faac <FLASH_Program_DoubleWord+0x5c>)
 800fa76:	691b      	ldr	r3, [r3, #16]
 800fa78:	4a0c      	ldr	r2, [pc, #48]	; (800faac <FLASH_Program_DoubleWord+0x5c>)
 800fa7a:	f043 0301 	orr.w	r3, r3, #1
 800fa7e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	683a      	ldr	r2, [r7, #0]
 800fa84:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800fa86:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800fa8a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fa8e:	f04f 0300 	mov.w	r3, #0
 800fa92:	f04f 0400 	mov.w	r4, #0
 800fa96:	0013      	movs	r3, r2
 800fa98:	2400      	movs	r4, #0
 800fa9a:	68fa      	ldr	r2, [r7, #12]
 800fa9c:	3204      	adds	r2, #4
 800fa9e:	6013      	str	r3, [r2, #0]
}
 800faa0:	bf00      	nop
 800faa2:	3710      	adds	r7, #16
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bc90      	pop	{r4, r7}
 800faa8:	4770      	bx	lr
 800faaa:	bf00      	nop
 800faac:	40023c00 	.word	0x40023c00

0800fab0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800fab0:	b480      	push	{r7}
 800fab2:	b083      	sub	sp, #12
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
 800fab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800faba:	4b0d      	ldr	r3, [pc, #52]	; (800faf0 <FLASH_Program_Word+0x40>)
 800fabc:	691b      	ldr	r3, [r3, #16]
 800fabe:	4a0c      	ldr	r2, [pc, #48]	; (800faf0 <FLASH_Program_Word+0x40>)
 800fac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fac4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800fac6:	4b0a      	ldr	r3, [pc, #40]	; (800faf0 <FLASH_Program_Word+0x40>)
 800fac8:	691b      	ldr	r3, [r3, #16]
 800faca:	4a09      	ldr	r2, [pc, #36]	; (800faf0 <FLASH_Program_Word+0x40>)
 800facc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fad0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800fad2:	4b07      	ldr	r3, [pc, #28]	; (800faf0 <FLASH_Program_Word+0x40>)
 800fad4:	691b      	ldr	r3, [r3, #16]
 800fad6:	4a06      	ldr	r2, [pc, #24]	; (800faf0 <FLASH_Program_Word+0x40>)
 800fad8:	f043 0301 	orr.w	r3, r3, #1
 800fadc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	683a      	ldr	r2, [r7, #0]
 800fae2:	601a      	str	r2, [r3, #0]
}
 800fae4:	bf00      	nop
 800fae6:	370c      	adds	r7, #12
 800fae8:	46bd      	mov	sp, r7
 800faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faee:	4770      	bx	lr
 800faf0:	40023c00 	.word	0x40023c00

0800faf4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800faf4:	b480      	push	{r7}
 800faf6:	b083      	sub	sp, #12
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	460b      	mov	r3, r1
 800fafe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fb00:	4b0d      	ldr	r3, [pc, #52]	; (800fb38 <FLASH_Program_HalfWord+0x44>)
 800fb02:	691b      	ldr	r3, [r3, #16]
 800fb04:	4a0c      	ldr	r2, [pc, #48]	; (800fb38 <FLASH_Program_HalfWord+0x44>)
 800fb06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800fb0c:	4b0a      	ldr	r3, [pc, #40]	; (800fb38 <FLASH_Program_HalfWord+0x44>)
 800fb0e:	691b      	ldr	r3, [r3, #16]
 800fb10:	4a09      	ldr	r2, [pc, #36]	; (800fb38 <FLASH_Program_HalfWord+0x44>)
 800fb12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800fb18:	4b07      	ldr	r3, [pc, #28]	; (800fb38 <FLASH_Program_HalfWord+0x44>)
 800fb1a:	691b      	ldr	r3, [r3, #16]
 800fb1c:	4a06      	ldr	r2, [pc, #24]	; (800fb38 <FLASH_Program_HalfWord+0x44>)
 800fb1e:	f043 0301 	orr.w	r3, r3, #1
 800fb22:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	887a      	ldrh	r2, [r7, #2]
 800fb28:	801a      	strh	r2, [r3, #0]
}
 800fb2a:	bf00      	nop
 800fb2c:	370c      	adds	r7, #12
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb34:	4770      	bx	lr
 800fb36:	bf00      	nop
 800fb38:	40023c00 	.word	0x40023c00

0800fb3c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b083      	sub	sp, #12
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
 800fb44:	460b      	mov	r3, r1
 800fb46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fb48:	4b0c      	ldr	r3, [pc, #48]	; (800fb7c <FLASH_Program_Byte+0x40>)
 800fb4a:	691b      	ldr	r3, [r3, #16]
 800fb4c:	4a0b      	ldr	r2, [pc, #44]	; (800fb7c <FLASH_Program_Byte+0x40>)
 800fb4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800fb54:	4b09      	ldr	r3, [pc, #36]	; (800fb7c <FLASH_Program_Byte+0x40>)
 800fb56:	4a09      	ldr	r2, [pc, #36]	; (800fb7c <FLASH_Program_Byte+0x40>)
 800fb58:	691b      	ldr	r3, [r3, #16]
 800fb5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800fb5c:	4b07      	ldr	r3, [pc, #28]	; (800fb7c <FLASH_Program_Byte+0x40>)
 800fb5e:	691b      	ldr	r3, [r3, #16]
 800fb60:	4a06      	ldr	r2, [pc, #24]	; (800fb7c <FLASH_Program_Byte+0x40>)
 800fb62:	f043 0301 	orr.w	r3, r3, #1
 800fb66:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	78fa      	ldrb	r2, [r7, #3]
 800fb6c:	701a      	strb	r2, [r3, #0]
}
 800fb6e:	bf00      	nop
 800fb70:	370c      	adds	r7, #12
 800fb72:	46bd      	mov	sp, r7
 800fb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb78:	4770      	bx	lr
 800fb7a:	bf00      	nop
 800fb7c:	40023c00 	.word	0x40023c00

0800fb80 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800fb80:	b480      	push	{r7}
 800fb82:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800fb84:	4b27      	ldr	r3, [pc, #156]	; (800fc24 <FLASH_SetErrorCode+0xa4>)
 800fb86:	68db      	ldr	r3, [r3, #12]
 800fb88:	f003 0310 	and.w	r3, r3, #16
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d008      	beq.n	800fba2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800fb90:	4b25      	ldr	r3, [pc, #148]	; (800fc28 <FLASH_SetErrorCode+0xa8>)
 800fb92:	69db      	ldr	r3, [r3, #28]
 800fb94:	f043 0310 	orr.w	r3, r3, #16
 800fb98:	4a23      	ldr	r2, [pc, #140]	; (800fc28 <FLASH_SetErrorCode+0xa8>)
 800fb9a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800fb9c:	4b21      	ldr	r3, [pc, #132]	; (800fc24 <FLASH_SetErrorCode+0xa4>)
 800fb9e:	2210      	movs	r2, #16
 800fba0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800fba2:	4b20      	ldr	r3, [pc, #128]	; (800fc24 <FLASH_SetErrorCode+0xa4>)
 800fba4:	68db      	ldr	r3, [r3, #12]
 800fba6:	f003 0320 	and.w	r3, r3, #32
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d008      	beq.n	800fbc0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800fbae:	4b1e      	ldr	r3, [pc, #120]	; (800fc28 <FLASH_SetErrorCode+0xa8>)
 800fbb0:	69db      	ldr	r3, [r3, #28]
 800fbb2:	f043 0308 	orr.w	r3, r3, #8
 800fbb6:	4a1c      	ldr	r2, [pc, #112]	; (800fc28 <FLASH_SetErrorCode+0xa8>)
 800fbb8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800fbba:	4b1a      	ldr	r3, [pc, #104]	; (800fc24 <FLASH_SetErrorCode+0xa4>)
 800fbbc:	2220      	movs	r2, #32
 800fbbe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800fbc0:	4b18      	ldr	r3, [pc, #96]	; (800fc24 <FLASH_SetErrorCode+0xa4>)
 800fbc2:	68db      	ldr	r3, [r3, #12]
 800fbc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d008      	beq.n	800fbde <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800fbcc:	4b16      	ldr	r3, [pc, #88]	; (800fc28 <FLASH_SetErrorCode+0xa8>)
 800fbce:	69db      	ldr	r3, [r3, #28]
 800fbd0:	f043 0304 	orr.w	r3, r3, #4
 800fbd4:	4a14      	ldr	r2, [pc, #80]	; (800fc28 <FLASH_SetErrorCode+0xa8>)
 800fbd6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800fbd8:	4b12      	ldr	r3, [pc, #72]	; (800fc24 <FLASH_SetErrorCode+0xa4>)
 800fbda:	2240      	movs	r2, #64	; 0x40
 800fbdc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800fbde:	4b11      	ldr	r3, [pc, #68]	; (800fc24 <FLASH_SetErrorCode+0xa4>)
 800fbe0:	68db      	ldr	r3, [r3, #12]
 800fbe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d008      	beq.n	800fbfc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800fbea:	4b0f      	ldr	r3, [pc, #60]	; (800fc28 <FLASH_SetErrorCode+0xa8>)
 800fbec:	69db      	ldr	r3, [r3, #28]
 800fbee:	f043 0302 	orr.w	r3, r3, #2
 800fbf2:	4a0d      	ldr	r2, [pc, #52]	; (800fc28 <FLASH_SetErrorCode+0xa8>)
 800fbf4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800fbf6:	4b0b      	ldr	r3, [pc, #44]	; (800fc24 <FLASH_SetErrorCode+0xa4>)
 800fbf8:	2280      	movs	r2, #128	; 0x80
 800fbfa:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800fbfc:	4b09      	ldr	r3, [pc, #36]	; (800fc24 <FLASH_SetErrorCode+0xa4>)
 800fbfe:	68db      	ldr	r3, [r3, #12]
 800fc00:	f003 0302 	and.w	r3, r3, #2
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d008      	beq.n	800fc1a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800fc08:	4b07      	ldr	r3, [pc, #28]	; (800fc28 <FLASH_SetErrorCode+0xa8>)
 800fc0a:	69db      	ldr	r3, [r3, #28]
 800fc0c:	f043 0320 	orr.w	r3, r3, #32
 800fc10:	4a05      	ldr	r2, [pc, #20]	; (800fc28 <FLASH_SetErrorCode+0xa8>)
 800fc12:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800fc14:	4b03      	ldr	r3, [pc, #12]	; (800fc24 <FLASH_SetErrorCode+0xa4>)
 800fc16:	2202      	movs	r2, #2
 800fc18:	60da      	str	r2, [r3, #12]
  }
}
 800fc1a:	bf00      	nop
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr
 800fc24:	40023c00 	.word	0x40023c00
 800fc28:	20014694 	.word	0x20014694

0800fc2c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b084      	sub	sp, #16
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
 800fc34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800fc36:	2301      	movs	r3, #1
 800fc38:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800fc3e:	4b31      	ldr	r3, [pc, #196]	; (800fd04 <HAL_FLASHEx_Erase+0xd8>)
 800fc40:	7e1b      	ldrb	r3, [r3, #24]
 800fc42:	2b01      	cmp	r3, #1
 800fc44:	d101      	bne.n	800fc4a <HAL_FLASHEx_Erase+0x1e>
 800fc46:	2302      	movs	r3, #2
 800fc48:	e058      	b.n	800fcfc <HAL_FLASHEx_Erase+0xd0>
 800fc4a:	4b2e      	ldr	r3, [pc, #184]	; (800fd04 <HAL_FLASHEx_Erase+0xd8>)
 800fc4c:	2201      	movs	r2, #1
 800fc4e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fc50:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fc54:	f7ff febc 	bl	800f9d0 <FLASH_WaitForLastOperation>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800fc5c:	7bfb      	ldrb	r3, [r7, #15]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d148      	bne.n	800fcf4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	f04f 32ff 	mov.w	r2, #4294967295
 800fc68:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	d115      	bne.n	800fc9e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	691b      	ldr	r3, [r3, #16]
 800fc76:	b2da      	uxtb	r2, r3
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	685b      	ldr	r3, [r3, #4]
 800fc7c:	4619      	mov	r1, r3
 800fc7e:	4610      	mov	r0, r2
 800fc80:	f000 f844 	bl	800fd0c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fc84:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fc88:	f7ff fea2 	bl	800f9d0 <FLASH_WaitForLastOperation>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800fc90:	4b1d      	ldr	r3, [pc, #116]	; (800fd08 <HAL_FLASHEx_Erase+0xdc>)
 800fc92:	691b      	ldr	r3, [r3, #16]
 800fc94:	4a1c      	ldr	r2, [pc, #112]	; (800fd08 <HAL_FLASHEx_Erase+0xdc>)
 800fc96:	f023 0304 	bic.w	r3, r3, #4
 800fc9a:	6113      	str	r3, [r2, #16]
 800fc9c:	e028      	b.n	800fcf0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	689b      	ldr	r3, [r3, #8]
 800fca2:	60bb      	str	r3, [r7, #8]
 800fca4:	e01c      	b.n	800fce0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	691b      	ldr	r3, [r3, #16]
 800fcaa:	b2db      	uxtb	r3, r3
 800fcac:	4619      	mov	r1, r3
 800fcae:	68b8      	ldr	r0, [r7, #8]
 800fcb0:	f000 f850 	bl	800fd54 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fcb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fcb8:	f7ff fe8a 	bl	800f9d0 <FLASH_WaitForLastOperation>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800fcc0:	4b11      	ldr	r3, [pc, #68]	; (800fd08 <HAL_FLASHEx_Erase+0xdc>)
 800fcc2:	691b      	ldr	r3, [r3, #16]
 800fcc4:	4a10      	ldr	r2, [pc, #64]	; (800fd08 <HAL_FLASHEx_Erase+0xdc>)
 800fcc6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800fcca:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800fccc:	7bfb      	ldrb	r3, [r7, #15]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d003      	beq.n	800fcda <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	68ba      	ldr	r2, [r7, #8]
 800fcd6:	601a      	str	r2, [r3, #0]
          break;
 800fcd8:	e00a      	b.n	800fcf0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	3301      	adds	r3, #1
 800fcde:	60bb      	str	r3, [r7, #8]
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	68da      	ldr	r2, [r3, #12]
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	689b      	ldr	r3, [r3, #8]
 800fce8:	4413      	add	r3, r2
 800fcea:	68ba      	ldr	r2, [r7, #8]
 800fcec:	429a      	cmp	r2, r3
 800fcee:	d3da      	bcc.n	800fca6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800fcf0:	f000 f878 	bl	800fde4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800fcf4:	4b03      	ldr	r3, [pc, #12]	; (800fd04 <HAL_FLASHEx_Erase+0xd8>)
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	761a      	strb	r2, [r3, #24]

  return status;
 800fcfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3710      	adds	r7, #16
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	20014694 	.word	0x20014694
 800fd08:	40023c00 	.word	0x40023c00

0800fd0c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	b083      	sub	sp, #12
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	4603      	mov	r3, r0
 800fd14:	6039      	str	r1, [r7, #0]
 800fd16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fd18:	4b0d      	ldr	r3, [pc, #52]	; (800fd50 <FLASH_MassErase+0x44>)
 800fd1a:	691b      	ldr	r3, [r3, #16]
 800fd1c:	4a0c      	ldr	r2, [pc, #48]	; (800fd50 <FLASH_MassErase+0x44>)
 800fd1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800fd24:	4b0a      	ldr	r3, [pc, #40]	; (800fd50 <FLASH_MassErase+0x44>)
 800fd26:	691b      	ldr	r3, [r3, #16]
 800fd28:	4a09      	ldr	r2, [pc, #36]	; (800fd50 <FLASH_MassErase+0x44>)
 800fd2a:	f043 0304 	orr.w	r3, r3, #4
 800fd2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800fd30:	4b07      	ldr	r3, [pc, #28]	; (800fd50 <FLASH_MassErase+0x44>)
 800fd32:	691a      	ldr	r2, [r3, #16]
 800fd34:	79fb      	ldrb	r3, [r7, #7]
 800fd36:	021b      	lsls	r3, r3, #8
 800fd38:	4313      	orrs	r3, r2
 800fd3a:	4a05      	ldr	r2, [pc, #20]	; (800fd50 <FLASH_MassErase+0x44>)
 800fd3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fd40:	6113      	str	r3, [r2, #16]
}
 800fd42:	bf00      	nop
 800fd44:	370c      	adds	r7, #12
 800fd46:	46bd      	mov	sp, r7
 800fd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4c:	4770      	bx	lr
 800fd4e:	bf00      	nop
 800fd50:	40023c00 	.word	0x40023c00

0800fd54 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800fd54:	b480      	push	{r7}
 800fd56:	b085      	sub	sp, #20
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	460b      	mov	r3, r1
 800fd5e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800fd60:	2300      	movs	r3, #0
 800fd62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800fd64:	78fb      	ldrb	r3, [r7, #3]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d102      	bne.n	800fd70 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	60fb      	str	r3, [r7, #12]
 800fd6e:	e010      	b.n	800fd92 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800fd70:	78fb      	ldrb	r3, [r7, #3]
 800fd72:	2b01      	cmp	r3, #1
 800fd74:	d103      	bne.n	800fd7e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800fd76:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fd7a:	60fb      	str	r3, [r7, #12]
 800fd7c:	e009      	b.n	800fd92 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800fd7e:	78fb      	ldrb	r3, [r7, #3]
 800fd80:	2b02      	cmp	r3, #2
 800fd82:	d103      	bne.n	800fd8c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800fd84:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd88:	60fb      	str	r3, [r7, #12]
 800fd8a:	e002      	b.n	800fd92 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800fd8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800fd90:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fd92:	4b13      	ldr	r3, [pc, #76]	; (800fde0 <FLASH_Erase_Sector+0x8c>)
 800fd94:	691b      	ldr	r3, [r3, #16]
 800fd96:	4a12      	ldr	r2, [pc, #72]	; (800fde0 <FLASH_Erase_Sector+0x8c>)
 800fd98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd9c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800fd9e:	4b10      	ldr	r3, [pc, #64]	; (800fde0 <FLASH_Erase_Sector+0x8c>)
 800fda0:	691a      	ldr	r2, [r3, #16]
 800fda2:	490f      	ldr	r1, [pc, #60]	; (800fde0 <FLASH_Erase_Sector+0x8c>)
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	4313      	orrs	r3, r2
 800fda8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800fdaa:	4b0d      	ldr	r3, [pc, #52]	; (800fde0 <FLASH_Erase_Sector+0x8c>)
 800fdac:	691b      	ldr	r3, [r3, #16]
 800fdae:	4a0c      	ldr	r2, [pc, #48]	; (800fde0 <FLASH_Erase_Sector+0x8c>)
 800fdb0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800fdb4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800fdb6:	4b0a      	ldr	r3, [pc, #40]	; (800fde0 <FLASH_Erase_Sector+0x8c>)
 800fdb8:	691a      	ldr	r2, [r3, #16]
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	00db      	lsls	r3, r3, #3
 800fdbe:	4313      	orrs	r3, r2
 800fdc0:	4a07      	ldr	r2, [pc, #28]	; (800fde0 <FLASH_Erase_Sector+0x8c>)
 800fdc2:	f043 0302 	orr.w	r3, r3, #2
 800fdc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800fdc8:	4b05      	ldr	r3, [pc, #20]	; (800fde0 <FLASH_Erase_Sector+0x8c>)
 800fdca:	691b      	ldr	r3, [r3, #16]
 800fdcc:	4a04      	ldr	r2, [pc, #16]	; (800fde0 <FLASH_Erase_Sector+0x8c>)
 800fdce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fdd2:	6113      	str	r3, [r2, #16]
}
 800fdd4:	bf00      	nop
 800fdd6:	3714      	adds	r7, #20
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdde:	4770      	bx	lr
 800fde0:	40023c00 	.word	0x40023c00

0800fde4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800fde4:	b480      	push	{r7}
 800fde6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800fde8:	4b20      	ldr	r3, [pc, #128]	; (800fe6c <FLASH_FlushCaches+0x88>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d017      	beq.n	800fe24 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800fdf4:	4b1d      	ldr	r3, [pc, #116]	; (800fe6c <FLASH_FlushCaches+0x88>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	4a1c      	ldr	r2, [pc, #112]	; (800fe6c <FLASH_FlushCaches+0x88>)
 800fdfa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fdfe:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800fe00:	4b1a      	ldr	r3, [pc, #104]	; (800fe6c <FLASH_FlushCaches+0x88>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	4a19      	ldr	r2, [pc, #100]	; (800fe6c <FLASH_FlushCaches+0x88>)
 800fe06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fe0a:	6013      	str	r3, [r2, #0]
 800fe0c:	4b17      	ldr	r3, [pc, #92]	; (800fe6c <FLASH_FlushCaches+0x88>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	4a16      	ldr	r2, [pc, #88]	; (800fe6c <FLASH_FlushCaches+0x88>)
 800fe12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fe16:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800fe18:	4b14      	ldr	r3, [pc, #80]	; (800fe6c <FLASH_FlushCaches+0x88>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	4a13      	ldr	r2, [pc, #76]	; (800fe6c <FLASH_FlushCaches+0x88>)
 800fe1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fe22:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800fe24:	4b11      	ldr	r3, [pc, #68]	; (800fe6c <FLASH_FlushCaches+0x88>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d017      	beq.n	800fe60 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800fe30:	4b0e      	ldr	r3, [pc, #56]	; (800fe6c <FLASH_FlushCaches+0x88>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	4a0d      	ldr	r2, [pc, #52]	; (800fe6c <FLASH_FlushCaches+0x88>)
 800fe36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fe3a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800fe3c:	4b0b      	ldr	r3, [pc, #44]	; (800fe6c <FLASH_FlushCaches+0x88>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	4a0a      	ldr	r2, [pc, #40]	; (800fe6c <FLASH_FlushCaches+0x88>)
 800fe42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fe46:	6013      	str	r3, [r2, #0]
 800fe48:	4b08      	ldr	r3, [pc, #32]	; (800fe6c <FLASH_FlushCaches+0x88>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	4a07      	ldr	r2, [pc, #28]	; (800fe6c <FLASH_FlushCaches+0x88>)
 800fe4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fe52:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800fe54:	4b05      	ldr	r3, [pc, #20]	; (800fe6c <FLASH_FlushCaches+0x88>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	4a04      	ldr	r2, [pc, #16]	; (800fe6c <FLASH_FlushCaches+0x88>)
 800fe5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fe5e:	6013      	str	r3, [r2, #0]
  }
}
 800fe60:	bf00      	nop
 800fe62:	46bd      	mov	sp, r7
 800fe64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe68:	4770      	bx	lr
 800fe6a:	bf00      	nop
 800fe6c:	40023c00 	.word	0x40023c00

0800fe70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800fe70:	b480      	push	{r7}
 800fe72:	b089      	sub	sp, #36	; 0x24
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
 800fe78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800fe82:	2300      	movs	r3, #0
 800fe84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fe86:	2300      	movs	r3, #0
 800fe88:	61fb      	str	r3, [r7, #28]
 800fe8a:	e16b      	b.n	8010164 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800fe8c:	2201      	movs	r2, #1
 800fe8e:	69fb      	ldr	r3, [r7, #28]
 800fe90:	fa02 f303 	lsl.w	r3, r2, r3
 800fe94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	697a      	ldr	r2, [r7, #20]
 800fe9c:	4013      	ands	r3, r2
 800fe9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800fea0:	693a      	ldr	r2, [r7, #16]
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	429a      	cmp	r2, r3
 800fea6:	f040 815a 	bne.w	801015e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	2b01      	cmp	r3, #1
 800feb0:	d00b      	beq.n	800feca <HAL_GPIO_Init+0x5a>
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	685b      	ldr	r3, [r3, #4]
 800feb6:	2b02      	cmp	r3, #2
 800feb8:	d007      	beq.n	800feca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800febe:	2b11      	cmp	r3, #17
 800fec0:	d003      	beq.n	800feca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	685b      	ldr	r3, [r3, #4]
 800fec6:	2b12      	cmp	r3, #18
 800fec8:	d130      	bne.n	800ff2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	689b      	ldr	r3, [r3, #8]
 800fece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800fed0:	69fb      	ldr	r3, [r7, #28]
 800fed2:	005b      	lsls	r3, r3, #1
 800fed4:	2203      	movs	r2, #3
 800fed6:	fa02 f303 	lsl.w	r3, r2, r3
 800feda:	43db      	mvns	r3, r3
 800fedc:	69ba      	ldr	r2, [r7, #24]
 800fede:	4013      	ands	r3, r2
 800fee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	68da      	ldr	r2, [r3, #12]
 800fee6:	69fb      	ldr	r3, [r7, #28]
 800fee8:	005b      	lsls	r3, r3, #1
 800feea:	fa02 f303 	lsl.w	r3, r2, r3
 800feee:	69ba      	ldr	r2, [r7, #24]
 800fef0:	4313      	orrs	r3, r2
 800fef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	69ba      	ldr	r2, [r7, #24]
 800fef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	685b      	ldr	r3, [r3, #4]
 800fefe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ff00:	2201      	movs	r2, #1
 800ff02:	69fb      	ldr	r3, [r7, #28]
 800ff04:	fa02 f303 	lsl.w	r3, r2, r3
 800ff08:	43db      	mvns	r3, r3
 800ff0a:	69ba      	ldr	r2, [r7, #24]
 800ff0c:	4013      	ands	r3, r2
 800ff0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	685b      	ldr	r3, [r3, #4]
 800ff14:	091b      	lsrs	r3, r3, #4
 800ff16:	f003 0201 	and.w	r2, r3, #1
 800ff1a:	69fb      	ldr	r3, [r7, #28]
 800ff1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ff20:	69ba      	ldr	r2, [r7, #24]
 800ff22:	4313      	orrs	r3, r2
 800ff24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	69ba      	ldr	r2, [r7, #24]
 800ff2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	68db      	ldr	r3, [r3, #12]
 800ff30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ff32:	69fb      	ldr	r3, [r7, #28]
 800ff34:	005b      	lsls	r3, r3, #1
 800ff36:	2203      	movs	r2, #3
 800ff38:	fa02 f303 	lsl.w	r3, r2, r3
 800ff3c:	43db      	mvns	r3, r3
 800ff3e:	69ba      	ldr	r2, [r7, #24]
 800ff40:	4013      	ands	r3, r2
 800ff42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	689a      	ldr	r2, [r3, #8]
 800ff48:	69fb      	ldr	r3, [r7, #28]
 800ff4a:	005b      	lsls	r3, r3, #1
 800ff4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ff50:	69ba      	ldr	r2, [r7, #24]
 800ff52:	4313      	orrs	r3, r2
 800ff54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	69ba      	ldr	r2, [r7, #24]
 800ff5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	685b      	ldr	r3, [r3, #4]
 800ff60:	2b02      	cmp	r3, #2
 800ff62:	d003      	beq.n	800ff6c <HAL_GPIO_Init+0xfc>
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	685b      	ldr	r3, [r3, #4]
 800ff68:	2b12      	cmp	r3, #18
 800ff6a:	d123      	bne.n	800ffb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	08da      	lsrs	r2, r3, #3
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	3208      	adds	r2, #8
 800ff74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ff7a:	69fb      	ldr	r3, [r7, #28]
 800ff7c:	f003 0307 	and.w	r3, r3, #7
 800ff80:	009b      	lsls	r3, r3, #2
 800ff82:	220f      	movs	r2, #15
 800ff84:	fa02 f303 	lsl.w	r3, r2, r3
 800ff88:	43db      	mvns	r3, r3
 800ff8a:	69ba      	ldr	r2, [r7, #24]
 800ff8c:	4013      	ands	r3, r2
 800ff8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	691a      	ldr	r2, [r3, #16]
 800ff94:	69fb      	ldr	r3, [r7, #28]
 800ff96:	f003 0307 	and.w	r3, r3, #7
 800ff9a:	009b      	lsls	r3, r3, #2
 800ff9c:	fa02 f303 	lsl.w	r3, r2, r3
 800ffa0:	69ba      	ldr	r2, [r7, #24]
 800ffa2:	4313      	orrs	r3, r2
 800ffa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ffa6:	69fb      	ldr	r3, [r7, #28]
 800ffa8:	08da      	lsrs	r2, r3, #3
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	3208      	adds	r2, #8
 800ffae:	69b9      	ldr	r1, [r7, #24]
 800ffb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ffba:	69fb      	ldr	r3, [r7, #28]
 800ffbc:	005b      	lsls	r3, r3, #1
 800ffbe:	2203      	movs	r2, #3
 800ffc0:	fa02 f303 	lsl.w	r3, r2, r3
 800ffc4:	43db      	mvns	r3, r3
 800ffc6:	69ba      	ldr	r2, [r7, #24]
 800ffc8:	4013      	ands	r3, r2
 800ffca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	f003 0203 	and.w	r2, r3, #3
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	005b      	lsls	r3, r3, #1
 800ffd8:	fa02 f303 	lsl.w	r3, r2, r3
 800ffdc:	69ba      	ldr	r2, [r7, #24]
 800ffde:	4313      	orrs	r3, r2
 800ffe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	69ba      	ldr	r2, [r7, #24]
 800ffe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	685b      	ldr	r3, [r3, #4]
 800ffec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	f000 80b4 	beq.w	801015e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fff6:	2300      	movs	r3, #0
 800fff8:	60fb      	str	r3, [r7, #12]
 800fffa:	4b5f      	ldr	r3, [pc, #380]	; (8010178 <HAL_GPIO_Init+0x308>)
 800fffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fffe:	4a5e      	ldr	r2, [pc, #376]	; (8010178 <HAL_GPIO_Init+0x308>)
 8010000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010004:	6453      	str	r3, [r2, #68]	; 0x44
 8010006:	4b5c      	ldr	r3, [pc, #368]	; (8010178 <HAL_GPIO_Init+0x308>)
 8010008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801000a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801000e:	60fb      	str	r3, [r7, #12]
 8010010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8010012:	4a5a      	ldr	r2, [pc, #360]	; (801017c <HAL_GPIO_Init+0x30c>)
 8010014:	69fb      	ldr	r3, [r7, #28]
 8010016:	089b      	lsrs	r3, r3, #2
 8010018:	3302      	adds	r3, #2
 801001a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801001e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010020:	69fb      	ldr	r3, [r7, #28]
 8010022:	f003 0303 	and.w	r3, r3, #3
 8010026:	009b      	lsls	r3, r3, #2
 8010028:	220f      	movs	r2, #15
 801002a:	fa02 f303 	lsl.w	r3, r2, r3
 801002e:	43db      	mvns	r3, r3
 8010030:	69ba      	ldr	r2, [r7, #24]
 8010032:	4013      	ands	r3, r2
 8010034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	4a51      	ldr	r2, [pc, #324]	; (8010180 <HAL_GPIO_Init+0x310>)
 801003a:	4293      	cmp	r3, r2
 801003c:	d02b      	beq.n	8010096 <HAL_GPIO_Init+0x226>
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	4a50      	ldr	r2, [pc, #320]	; (8010184 <HAL_GPIO_Init+0x314>)
 8010042:	4293      	cmp	r3, r2
 8010044:	d025      	beq.n	8010092 <HAL_GPIO_Init+0x222>
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4a4f      	ldr	r2, [pc, #316]	; (8010188 <HAL_GPIO_Init+0x318>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d01f      	beq.n	801008e <HAL_GPIO_Init+0x21e>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	4a4e      	ldr	r2, [pc, #312]	; (801018c <HAL_GPIO_Init+0x31c>)
 8010052:	4293      	cmp	r3, r2
 8010054:	d019      	beq.n	801008a <HAL_GPIO_Init+0x21a>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	4a4d      	ldr	r2, [pc, #308]	; (8010190 <HAL_GPIO_Init+0x320>)
 801005a:	4293      	cmp	r3, r2
 801005c:	d013      	beq.n	8010086 <HAL_GPIO_Init+0x216>
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	4a4c      	ldr	r2, [pc, #304]	; (8010194 <HAL_GPIO_Init+0x324>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d00d      	beq.n	8010082 <HAL_GPIO_Init+0x212>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	4a4b      	ldr	r2, [pc, #300]	; (8010198 <HAL_GPIO_Init+0x328>)
 801006a:	4293      	cmp	r3, r2
 801006c:	d007      	beq.n	801007e <HAL_GPIO_Init+0x20e>
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	4a4a      	ldr	r2, [pc, #296]	; (801019c <HAL_GPIO_Init+0x32c>)
 8010072:	4293      	cmp	r3, r2
 8010074:	d101      	bne.n	801007a <HAL_GPIO_Init+0x20a>
 8010076:	2307      	movs	r3, #7
 8010078:	e00e      	b.n	8010098 <HAL_GPIO_Init+0x228>
 801007a:	2308      	movs	r3, #8
 801007c:	e00c      	b.n	8010098 <HAL_GPIO_Init+0x228>
 801007e:	2306      	movs	r3, #6
 8010080:	e00a      	b.n	8010098 <HAL_GPIO_Init+0x228>
 8010082:	2305      	movs	r3, #5
 8010084:	e008      	b.n	8010098 <HAL_GPIO_Init+0x228>
 8010086:	2304      	movs	r3, #4
 8010088:	e006      	b.n	8010098 <HAL_GPIO_Init+0x228>
 801008a:	2303      	movs	r3, #3
 801008c:	e004      	b.n	8010098 <HAL_GPIO_Init+0x228>
 801008e:	2302      	movs	r3, #2
 8010090:	e002      	b.n	8010098 <HAL_GPIO_Init+0x228>
 8010092:	2301      	movs	r3, #1
 8010094:	e000      	b.n	8010098 <HAL_GPIO_Init+0x228>
 8010096:	2300      	movs	r3, #0
 8010098:	69fa      	ldr	r2, [r7, #28]
 801009a:	f002 0203 	and.w	r2, r2, #3
 801009e:	0092      	lsls	r2, r2, #2
 80100a0:	4093      	lsls	r3, r2
 80100a2:	69ba      	ldr	r2, [r7, #24]
 80100a4:	4313      	orrs	r3, r2
 80100a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80100a8:	4934      	ldr	r1, [pc, #208]	; (801017c <HAL_GPIO_Init+0x30c>)
 80100aa:	69fb      	ldr	r3, [r7, #28]
 80100ac:	089b      	lsrs	r3, r3, #2
 80100ae:	3302      	adds	r3, #2
 80100b0:	69ba      	ldr	r2, [r7, #24]
 80100b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80100b6:	4b3a      	ldr	r3, [pc, #232]	; (80101a0 <HAL_GPIO_Init+0x330>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	43db      	mvns	r3, r3
 80100c0:	69ba      	ldr	r2, [r7, #24]
 80100c2:	4013      	ands	r3, r2
 80100c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d003      	beq.n	80100da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80100d2:	69ba      	ldr	r2, [r7, #24]
 80100d4:	693b      	ldr	r3, [r7, #16]
 80100d6:	4313      	orrs	r3, r2
 80100d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80100da:	4a31      	ldr	r2, [pc, #196]	; (80101a0 <HAL_GPIO_Init+0x330>)
 80100dc:	69bb      	ldr	r3, [r7, #24]
 80100de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80100e0:	4b2f      	ldr	r3, [pc, #188]	; (80101a0 <HAL_GPIO_Init+0x330>)
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	43db      	mvns	r3, r3
 80100ea:	69ba      	ldr	r2, [r7, #24]
 80100ec:	4013      	ands	r3, r2
 80100ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d003      	beq.n	8010104 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80100fc:	69ba      	ldr	r2, [r7, #24]
 80100fe:	693b      	ldr	r3, [r7, #16]
 8010100:	4313      	orrs	r3, r2
 8010102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8010104:	4a26      	ldr	r2, [pc, #152]	; (80101a0 <HAL_GPIO_Init+0x330>)
 8010106:	69bb      	ldr	r3, [r7, #24]
 8010108:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801010a:	4b25      	ldr	r3, [pc, #148]	; (80101a0 <HAL_GPIO_Init+0x330>)
 801010c:	689b      	ldr	r3, [r3, #8]
 801010e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	43db      	mvns	r3, r3
 8010114:	69ba      	ldr	r2, [r7, #24]
 8010116:	4013      	ands	r3, r2
 8010118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	685b      	ldr	r3, [r3, #4]
 801011e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010122:	2b00      	cmp	r3, #0
 8010124:	d003      	beq.n	801012e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8010126:	69ba      	ldr	r2, [r7, #24]
 8010128:	693b      	ldr	r3, [r7, #16]
 801012a:	4313      	orrs	r3, r2
 801012c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801012e:	4a1c      	ldr	r2, [pc, #112]	; (80101a0 <HAL_GPIO_Init+0x330>)
 8010130:	69bb      	ldr	r3, [r7, #24]
 8010132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010134:	4b1a      	ldr	r3, [pc, #104]	; (80101a0 <HAL_GPIO_Init+0x330>)
 8010136:	68db      	ldr	r3, [r3, #12]
 8010138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	43db      	mvns	r3, r3
 801013e:	69ba      	ldr	r2, [r7, #24]
 8010140:	4013      	ands	r3, r2
 8010142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	685b      	ldr	r3, [r3, #4]
 8010148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801014c:	2b00      	cmp	r3, #0
 801014e:	d003      	beq.n	8010158 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8010150:	69ba      	ldr	r2, [r7, #24]
 8010152:	693b      	ldr	r3, [r7, #16]
 8010154:	4313      	orrs	r3, r2
 8010156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010158:	4a11      	ldr	r2, [pc, #68]	; (80101a0 <HAL_GPIO_Init+0x330>)
 801015a:	69bb      	ldr	r3, [r7, #24]
 801015c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801015e:	69fb      	ldr	r3, [r7, #28]
 8010160:	3301      	adds	r3, #1
 8010162:	61fb      	str	r3, [r7, #28]
 8010164:	69fb      	ldr	r3, [r7, #28]
 8010166:	2b0f      	cmp	r3, #15
 8010168:	f67f ae90 	bls.w	800fe8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801016c:	bf00      	nop
 801016e:	3724      	adds	r7, #36	; 0x24
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	4770      	bx	lr
 8010178:	40023800 	.word	0x40023800
 801017c:	40013800 	.word	0x40013800
 8010180:	40020000 	.word	0x40020000
 8010184:	40020400 	.word	0x40020400
 8010188:	40020800 	.word	0x40020800
 801018c:	40020c00 	.word	0x40020c00
 8010190:	40021000 	.word	0x40021000
 8010194:	40021400 	.word	0x40021400
 8010198:	40021800 	.word	0x40021800
 801019c:	40021c00 	.word	0x40021c00
 80101a0:	40013c00 	.word	0x40013c00

080101a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80101a4:	b480      	push	{r7}
 80101a6:	b085      	sub	sp, #20
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	460b      	mov	r3, r1
 80101ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	691a      	ldr	r2, [r3, #16]
 80101b4:	887b      	ldrh	r3, [r7, #2]
 80101b6:	4013      	ands	r3, r2
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d002      	beq.n	80101c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80101bc:	2301      	movs	r3, #1
 80101be:	73fb      	strb	r3, [r7, #15]
 80101c0:	e001      	b.n	80101c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80101c2:	2300      	movs	r3, #0
 80101c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80101c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80101c8:	4618      	mov	r0, r3
 80101ca:	3714      	adds	r7, #20
 80101cc:	46bd      	mov	sp, r7
 80101ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d2:	4770      	bx	lr

080101d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b083      	sub	sp, #12
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	460b      	mov	r3, r1
 80101de:	807b      	strh	r3, [r7, #2]
 80101e0:	4613      	mov	r3, r2
 80101e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80101e4:	787b      	ldrb	r3, [r7, #1]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d003      	beq.n	80101f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80101ea:	887a      	ldrh	r2, [r7, #2]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80101f0:	e003      	b.n	80101fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80101f2:	887b      	ldrh	r3, [r7, #2]
 80101f4:	041a      	lsls	r2, r3, #16
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	619a      	str	r2, [r3, #24]
}
 80101fa:	bf00      	nop
 80101fc:	370c      	adds	r7, #12
 80101fe:	46bd      	mov	sp, r7
 8010200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010204:	4770      	bx	lr
	...

08010208 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b084      	sub	sp, #16
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d101      	bne.n	801021a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8010216:	2301      	movs	r3, #1
 8010218:	e11f      	b.n	801045a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010220:	b2db      	uxtb	r3, r3
 8010222:	2b00      	cmp	r3, #0
 8010224:	d106      	bne.n	8010234 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2200      	movs	r2, #0
 801022a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801022e:	6878      	ldr	r0, [r7, #4]
 8010230:	f7fd fea0 	bl	800df74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2224      	movs	r2, #36	; 0x24
 8010238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	681a      	ldr	r2, [r3, #0]
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f022 0201 	bic.w	r2, r2, #1
 801024a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	681a      	ldr	r2, [r3, #0]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801025a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	681a      	ldr	r2, [r3, #0]
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801026a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801026c:	f001 f820 	bl	80112b0 <HAL_RCC_GetPCLK1Freq>
 8010270:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	685b      	ldr	r3, [r3, #4]
 8010276:	4a7b      	ldr	r2, [pc, #492]	; (8010464 <HAL_I2C_Init+0x25c>)
 8010278:	4293      	cmp	r3, r2
 801027a:	d807      	bhi.n	801028c <HAL_I2C_Init+0x84>
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	4a7a      	ldr	r2, [pc, #488]	; (8010468 <HAL_I2C_Init+0x260>)
 8010280:	4293      	cmp	r3, r2
 8010282:	bf94      	ite	ls
 8010284:	2301      	movls	r3, #1
 8010286:	2300      	movhi	r3, #0
 8010288:	b2db      	uxtb	r3, r3
 801028a:	e006      	b.n	801029a <HAL_I2C_Init+0x92>
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	4a77      	ldr	r2, [pc, #476]	; (801046c <HAL_I2C_Init+0x264>)
 8010290:	4293      	cmp	r3, r2
 8010292:	bf94      	ite	ls
 8010294:	2301      	movls	r3, #1
 8010296:	2300      	movhi	r3, #0
 8010298:	b2db      	uxtb	r3, r3
 801029a:	2b00      	cmp	r3, #0
 801029c:	d001      	beq.n	80102a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801029e:	2301      	movs	r3, #1
 80102a0:	e0db      	b.n	801045a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	4a72      	ldr	r2, [pc, #456]	; (8010470 <HAL_I2C_Init+0x268>)
 80102a6:	fba2 2303 	umull	r2, r3, r2, r3
 80102aa:	0c9b      	lsrs	r3, r3, #18
 80102ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	685b      	ldr	r3, [r3, #4]
 80102b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	68ba      	ldr	r2, [r7, #8]
 80102be:	430a      	orrs	r2, r1
 80102c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	6a1b      	ldr	r3, [r3, #32]
 80102c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	685b      	ldr	r3, [r3, #4]
 80102d0:	4a64      	ldr	r2, [pc, #400]	; (8010464 <HAL_I2C_Init+0x25c>)
 80102d2:	4293      	cmp	r3, r2
 80102d4:	d802      	bhi.n	80102dc <HAL_I2C_Init+0xd4>
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	3301      	adds	r3, #1
 80102da:	e009      	b.n	80102f0 <HAL_I2C_Init+0xe8>
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80102e2:	fb02 f303 	mul.w	r3, r2, r3
 80102e6:	4a63      	ldr	r2, [pc, #396]	; (8010474 <HAL_I2C_Init+0x26c>)
 80102e8:	fba2 2303 	umull	r2, r3, r2, r3
 80102ec:	099b      	lsrs	r3, r3, #6
 80102ee:	3301      	adds	r3, #1
 80102f0:	687a      	ldr	r2, [r7, #4]
 80102f2:	6812      	ldr	r2, [r2, #0]
 80102f4:	430b      	orrs	r3, r1
 80102f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	69db      	ldr	r3, [r3, #28]
 80102fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8010302:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	685b      	ldr	r3, [r3, #4]
 801030a:	4956      	ldr	r1, [pc, #344]	; (8010464 <HAL_I2C_Init+0x25c>)
 801030c:	428b      	cmp	r3, r1
 801030e:	d80d      	bhi.n	801032c <HAL_I2C_Init+0x124>
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	1e59      	subs	r1, r3, #1
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	685b      	ldr	r3, [r3, #4]
 8010318:	005b      	lsls	r3, r3, #1
 801031a:	fbb1 f3f3 	udiv	r3, r1, r3
 801031e:	3301      	adds	r3, #1
 8010320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010324:	2b04      	cmp	r3, #4
 8010326:	bf38      	it	cc
 8010328:	2304      	movcc	r3, #4
 801032a:	e04f      	b.n	80103cc <HAL_I2C_Init+0x1c4>
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	689b      	ldr	r3, [r3, #8]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d111      	bne.n	8010358 <HAL_I2C_Init+0x150>
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	1e58      	subs	r0, r3, #1
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6859      	ldr	r1, [r3, #4]
 801033c:	460b      	mov	r3, r1
 801033e:	005b      	lsls	r3, r3, #1
 8010340:	440b      	add	r3, r1
 8010342:	fbb0 f3f3 	udiv	r3, r0, r3
 8010346:	3301      	adds	r3, #1
 8010348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801034c:	2b00      	cmp	r3, #0
 801034e:	bf0c      	ite	eq
 8010350:	2301      	moveq	r3, #1
 8010352:	2300      	movne	r3, #0
 8010354:	b2db      	uxtb	r3, r3
 8010356:	e012      	b.n	801037e <HAL_I2C_Init+0x176>
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	1e58      	subs	r0, r3, #1
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6859      	ldr	r1, [r3, #4]
 8010360:	460b      	mov	r3, r1
 8010362:	009b      	lsls	r3, r3, #2
 8010364:	440b      	add	r3, r1
 8010366:	0099      	lsls	r1, r3, #2
 8010368:	440b      	add	r3, r1
 801036a:	fbb0 f3f3 	udiv	r3, r0, r3
 801036e:	3301      	adds	r3, #1
 8010370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010374:	2b00      	cmp	r3, #0
 8010376:	bf0c      	ite	eq
 8010378:	2301      	moveq	r3, #1
 801037a:	2300      	movne	r3, #0
 801037c:	b2db      	uxtb	r3, r3
 801037e:	2b00      	cmp	r3, #0
 8010380:	d001      	beq.n	8010386 <HAL_I2C_Init+0x17e>
 8010382:	2301      	movs	r3, #1
 8010384:	e022      	b.n	80103cc <HAL_I2C_Init+0x1c4>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	689b      	ldr	r3, [r3, #8]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d10e      	bne.n	80103ac <HAL_I2C_Init+0x1a4>
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	1e58      	subs	r0, r3, #1
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6859      	ldr	r1, [r3, #4]
 8010396:	460b      	mov	r3, r1
 8010398:	005b      	lsls	r3, r3, #1
 801039a:	440b      	add	r3, r1
 801039c:	fbb0 f3f3 	udiv	r3, r0, r3
 80103a0:	3301      	adds	r3, #1
 80103a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80103a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80103aa:	e00f      	b.n	80103cc <HAL_I2C_Init+0x1c4>
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	1e58      	subs	r0, r3, #1
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	6859      	ldr	r1, [r3, #4]
 80103b4:	460b      	mov	r3, r1
 80103b6:	009b      	lsls	r3, r3, #2
 80103b8:	440b      	add	r3, r1
 80103ba:	0099      	lsls	r1, r3, #2
 80103bc:	440b      	add	r3, r1
 80103be:	fbb0 f3f3 	udiv	r3, r0, r3
 80103c2:	3301      	adds	r3, #1
 80103c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80103c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80103cc:	6879      	ldr	r1, [r7, #4]
 80103ce:	6809      	ldr	r1, [r1, #0]
 80103d0:	4313      	orrs	r3, r2
 80103d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	69da      	ldr	r2, [r3, #28]
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6a1b      	ldr	r3, [r3, #32]
 80103e6:	431a      	orrs	r2, r3
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	430a      	orrs	r2, r1
 80103ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	689b      	ldr	r3, [r3, #8]
 80103f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80103fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80103fe:	687a      	ldr	r2, [r7, #4]
 8010400:	6911      	ldr	r1, [r2, #16]
 8010402:	687a      	ldr	r2, [r7, #4]
 8010404:	68d2      	ldr	r2, [r2, #12]
 8010406:	4311      	orrs	r1, r2
 8010408:	687a      	ldr	r2, [r7, #4]
 801040a:	6812      	ldr	r2, [r2, #0]
 801040c:	430b      	orrs	r3, r1
 801040e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	68db      	ldr	r3, [r3, #12]
 8010416:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	695a      	ldr	r2, [r3, #20]
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	699b      	ldr	r3, [r3, #24]
 8010422:	431a      	orrs	r2, r3
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	430a      	orrs	r2, r1
 801042a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	681a      	ldr	r2, [r3, #0]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	f042 0201 	orr.w	r2, r2, #1
 801043a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2200      	movs	r2, #0
 8010440:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2220      	movs	r2, #32
 8010446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2200      	movs	r2, #0
 801044e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2200      	movs	r2, #0
 8010454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8010458:	2300      	movs	r3, #0
}
 801045a:	4618      	mov	r0, r3
 801045c:	3710      	adds	r7, #16
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}
 8010462:	bf00      	nop
 8010464:	000186a0 	.word	0x000186a0
 8010468:	001e847f 	.word	0x001e847f
 801046c:	003d08ff 	.word	0x003d08ff
 8010470:	431bde83 	.word	0x431bde83
 8010474:	10624dd3 	.word	0x10624dd3

08010478 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b088      	sub	sp, #32
 801047c:	af02      	add	r7, sp, #8
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	607a      	str	r2, [r7, #4]
 8010482:	461a      	mov	r2, r3
 8010484:	460b      	mov	r3, r1
 8010486:	817b      	strh	r3, [r7, #10]
 8010488:	4613      	mov	r3, r2
 801048a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801048c:	f7fe f960 	bl	800e750 <HAL_GetTick>
 8010490:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010498:	b2db      	uxtb	r3, r3
 801049a:	2b20      	cmp	r3, #32
 801049c:	f040 80e0 	bne.w	8010660 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80104a0:	697b      	ldr	r3, [r7, #20]
 80104a2:	9300      	str	r3, [sp, #0]
 80104a4:	2319      	movs	r3, #25
 80104a6:	2201      	movs	r2, #1
 80104a8:	4970      	ldr	r1, [pc, #448]	; (801066c <HAL_I2C_Master_Transmit+0x1f4>)
 80104aa:	68f8      	ldr	r0, [r7, #12]
 80104ac:	f000 f964 	bl	8010778 <I2C_WaitOnFlagUntilTimeout>
 80104b0:	4603      	mov	r3, r0
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d001      	beq.n	80104ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80104b6:	2302      	movs	r3, #2
 80104b8:	e0d3      	b.n	8010662 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80104c0:	2b01      	cmp	r3, #1
 80104c2:	d101      	bne.n	80104c8 <HAL_I2C_Master_Transmit+0x50>
 80104c4:	2302      	movs	r3, #2
 80104c6:	e0cc      	b.n	8010662 <HAL_I2C_Master_Transmit+0x1ea>
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	2201      	movs	r2, #1
 80104cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	f003 0301 	and.w	r3, r3, #1
 80104da:	2b01      	cmp	r3, #1
 80104dc:	d007      	beq.n	80104ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	681a      	ldr	r2, [r3, #0]
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	f042 0201 	orr.w	r2, r2, #1
 80104ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	681a      	ldr	r2, [r3, #0]
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80104fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	2221      	movs	r2, #33	; 0x21
 8010502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	2210      	movs	r2, #16
 801050a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	2200      	movs	r2, #0
 8010512:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	687a      	ldr	r2, [r7, #4]
 8010518:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	893a      	ldrh	r2, [r7, #8]
 801051e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010524:	b29a      	uxth	r2, r3
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	4a50      	ldr	r2, [pc, #320]	; (8010670 <HAL_I2C_Master_Transmit+0x1f8>)
 801052e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8010530:	8979      	ldrh	r1, [r7, #10]
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	6a3a      	ldr	r2, [r7, #32]
 8010536:	68f8      	ldr	r0, [r7, #12]
 8010538:	f000 f89c 	bl	8010674 <I2C_MasterRequestWrite>
 801053c:	4603      	mov	r3, r0
 801053e:	2b00      	cmp	r3, #0
 8010540:	d001      	beq.n	8010546 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8010542:	2301      	movs	r3, #1
 8010544:	e08d      	b.n	8010662 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010546:	2300      	movs	r3, #0
 8010548:	613b      	str	r3, [r7, #16]
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	695b      	ldr	r3, [r3, #20]
 8010550:	613b      	str	r3, [r7, #16]
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	699b      	ldr	r3, [r3, #24]
 8010558:	613b      	str	r3, [r7, #16]
 801055a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 801055c:	e066      	b.n	801062c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801055e:	697a      	ldr	r2, [r7, #20]
 8010560:	6a39      	ldr	r1, [r7, #32]
 8010562:	68f8      	ldr	r0, [r7, #12]
 8010564:	f000 f9de 	bl	8010924 <I2C_WaitOnTXEFlagUntilTimeout>
 8010568:	4603      	mov	r3, r0
 801056a:	2b00      	cmp	r3, #0
 801056c:	d00d      	beq.n	801058a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010572:	2b04      	cmp	r3, #4
 8010574:	d107      	bne.n	8010586 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	681a      	ldr	r2, [r3, #0]
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010584:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8010586:	2301      	movs	r3, #1
 8010588:	e06b      	b.n	8010662 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801058e:	781a      	ldrb	r2, [r3, #0]
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801059a:	1c5a      	adds	r2, r3, #1
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80105a4:	b29b      	uxth	r3, r3
 80105a6:	3b01      	subs	r3, #1
 80105a8:	b29a      	uxth	r2, r3
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80105b2:	3b01      	subs	r3, #1
 80105b4:	b29a      	uxth	r2, r3
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	695b      	ldr	r3, [r3, #20]
 80105c0:	f003 0304 	and.w	r3, r3, #4
 80105c4:	2b04      	cmp	r3, #4
 80105c6:	d11b      	bne.n	8010600 <HAL_I2C_Master_Transmit+0x188>
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d017      	beq.n	8010600 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105d4:	781a      	ldrb	r2, [r3, #0]
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105e0:	1c5a      	adds	r2, r3, #1
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80105ea:	b29b      	uxth	r3, r3
 80105ec:	3b01      	subs	r3, #1
 80105ee:	b29a      	uxth	r2, r3
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80105f8:	3b01      	subs	r3, #1
 80105fa:	b29a      	uxth	r2, r3
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010600:	697a      	ldr	r2, [r7, #20]
 8010602:	6a39      	ldr	r1, [r7, #32]
 8010604:	68f8      	ldr	r0, [r7, #12]
 8010606:	f000 f9ce 	bl	80109a6 <I2C_WaitOnBTFFlagUntilTimeout>
 801060a:	4603      	mov	r3, r0
 801060c:	2b00      	cmp	r3, #0
 801060e:	d00d      	beq.n	801062c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010614:	2b04      	cmp	r3, #4
 8010616:	d107      	bne.n	8010628 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	681a      	ldr	r2, [r3, #0]
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010626:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8010628:	2301      	movs	r3, #1
 801062a:	e01a      	b.n	8010662 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010630:	2b00      	cmp	r3, #0
 8010632:	d194      	bne.n	801055e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	681a      	ldr	r2, [r3, #0]
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	2220      	movs	r2, #32
 8010648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	2200      	movs	r2, #0
 8010650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	2200      	movs	r2, #0
 8010658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801065c:	2300      	movs	r3, #0
 801065e:	e000      	b.n	8010662 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010660:	2302      	movs	r3, #2
  }
}
 8010662:	4618      	mov	r0, r3
 8010664:	3718      	adds	r7, #24
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}
 801066a:	bf00      	nop
 801066c:	00100002 	.word	0x00100002
 8010670:	ffff0000 	.word	0xffff0000

08010674 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b088      	sub	sp, #32
 8010678:	af02      	add	r7, sp, #8
 801067a:	60f8      	str	r0, [r7, #12]
 801067c:	607a      	str	r2, [r7, #4]
 801067e:	603b      	str	r3, [r7, #0]
 8010680:	460b      	mov	r3, r1
 8010682:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010688:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	2b08      	cmp	r3, #8
 801068e:	d006      	beq.n	801069e <I2C_MasterRequestWrite+0x2a>
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	2b01      	cmp	r3, #1
 8010694:	d003      	beq.n	801069e <I2C_MasterRequestWrite+0x2a>
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801069c:	d108      	bne.n	80106b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	681a      	ldr	r2, [r3, #0]
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80106ac:	601a      	str	r2, [r3, #0]
 80106ae:	e00b      	b.n	80106c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106b4:	2b12      	cmp	r3, #18
 80106b6:	d107      	bne.n	80106c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	681a      	ldr	r2, [r3, #0]
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80106c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	9300      	str	r3, [sp, #0]
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2200      	movs	r2, #0
 80106d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80106d4:	68f8      	ldr	r0, [r7, #12]
 80106d6:	f000 f84f 	bl	8010778 <I2C_WaitOnFlagUntilTimeout>
 80106da:	4603      	mov	r3, r0
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d00d      	beq.n	80106fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80106ee:	d103      	bne.n	80106f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80106f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80106f8:	2303      	movs	r3, #3
 80106fa:	e035      	b.n	8010768 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	691b      	ldr	r3, [r3, #16]
 8010700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010704:	d108      	bne.n	8010718 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8010706:	897b      	ldrh	r3, [r7, #10]
 8010708:	b2db      	uxtb	r3, r3
 801070a:	461a      	mov	r2, r3
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010714:	611a      	str	r2, [r3, #16]
 8010716:	e01b      	b.n	8010750 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8010718:	897b      	ldrh	r3, [r7, #10]
 801071a:	11db      	asrs	r3, r3, #7
 801071c:	b2db      	uxtb	r3, r3
 801071e:	f003 0306 	and.w	r3, r3, #6
 8010722:	b2db      	uxtb	r3, r3
 8010724:	f063 030f 	orn	r3, r3, #15
 8010728:	b2da      	uxtb	r2, r3
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	687a      	ldr	r2, [r7, #4]
 8010734:	490e      	ldr	r1, [pc, #56]	; (8010770 <I2C_MasterRequestWrite+0xfc>)
 8010736:	68f8      	ldr	r0, [r7, #12]
 8010738:	f000 f875 	bl	8010826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801073c:	4603      	mov	r3, r0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d001      	beq.n	8010746 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8010742:	2301      	movs	r3, #1
 8010744:	e010      	b.n	8010768 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8010746:	897b      	ldrh	r3, [r7, #10]
 8010748:	b2da      	uxtb	r2, r3
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	687a      	ldr	r2, [r7, #4]
 8010754:	4907      	ldr	r1, [pc, #28]	; (8010774 <I2C_MasterRequestWrite+0x100>)
 8010756:	68f8      	ldr	r0, [r7, #12]
 8010758:	f000 f865 	bl	8010826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801075c:	4603      	mov	r3, r0
 801075e:	2b00      	cmp	r3, #0
 8010760:	d001      	beq.n	8010766 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8010762:	2301      	movs	r3, #1
 8010764:	e000      	b.n	8010768 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8010766:	2300      	movs	r3, #0
}
 8010768:	4618      	mov	r0, r3
 801076a:	3718      	adds	r7, #24
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}
 8010770:	00010008 	.word	0x00010008
 8010774:	00010002 	.word	0x00010002

08010778 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b084      	sub	sp, #16
 801077c:	af00      	add	r7, sp, #0
 801077e:	60f8      	str	r0, [r7, #12]
 8010780:	60b9      	str	r1, [r7, #8]
 8010782:	603b      	str	r3, [r7, #0]
 8010784:	4613      	mov	r3, r2
 8010786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010788:	e025      	b.n	80107d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010790:	d021      	beq.n	80107d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010792:	f7fd ffdd 	bl	800e750 <HAL_GetTick>
 8010796:	4602      	mov	r2, r0
 8010798:	69bb      	ldr	r3, [r7, #24]
 801079a:	1ad3      	subs	r3, r2, r3
 801079c:	683a      	ldr	r2, [r7, #0]
 801079e:	429a      	cmp	r2, r3
 80107a0:	d302      	bcc.n	80107a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d116      	bne.n	80107d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	2200      	movs	r2, #0
 80107ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	2220      	movs	r2, #32
 80107b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	2200      	movs	r2, #0
 80107ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107c2:	f043 0220 	orr.w	r2, r3, #32
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	2200      	movs	r2, #0
 80107ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80107d2:	2301      	movs	r3, #1
 80107d4:	e023      	b.n	801081e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	0c1b      	lsrs	r3, r3, #16
 80107da:	b2db      	uxtb	r3, r3
 80107dc:	2b01      	cmp	r3, #1
 80107de:	d10d      	bne.n	80107fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	695b      	ldr	r3, [r3, #20]
 80107e6:	43da      	mvns	r2, r3
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	4013      	ands	r3, r2
 80107ec:	b29b      	uxth	r3, r3
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	bf0c      	ite	eq
 80107f2:	2301      	moveq	r3, #1
 80107f4:	2300      	movne	r3, #0
 80107f6:	b2db      	uxtb	r3, r3
 80107f8:	461a      	mov	r2, r3
 80107fa:	e00c      	b.n	8010816 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	699b      	ldr	r3, [r3, #24]
 8010802:	43da      	mvns	r2, r3
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	4013      	ands	r3, r2
 8010808:	b29b      	uxth	r3, r3
 801080a:	2b00      	cmp	r3, #0
 801080c:	bf0c      	ite	eq
 801080e:	2301      	moveq	r3, #1
 8010810:	2300      	movne	r3, #0
 8010812:	b2db      	uxtb	r3, r3
 8010814:	461a      	mov	r2, r3
 8010816:	79fb      	ldrb	r3, [r7, #7]
 8010818:	429a      	cmp	r2, r3
 801081a:	d0b6      	beq.n	801078a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801081c:	2300      	movs	r3, #0
}
 801081e:	4618      	mov	r0, r3
 8010820:	3710      	adds	r7, #16
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}

08010826 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8010826:	b580      	push	{r7, lr}
 8010828:	b084      	sub	sp, #16
 801082a:	af00      	add	r7, sp, #0
 801082c:	60f8      	str	r0, [r7, #12]
 801082e:	60b9      	str	r1, [r7, #8]
 8010830:	607a      	str	r2, [r7, #4]
 8010832:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8010834:	e051      	b.n	80108da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	695b      	ldr	r3, [r3, #20]
 801083c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010844:	d123      	bne.n	801088e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	681a      	ldr	r2, [r3, #0]
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010854:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801085e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	2200      	movs	r2, #0
 8010864:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	2220      	movs	r2, #32
 801086a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	2200      	movs	r2, #0
 8010872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801087a:	f043 0204 	orr.w	r2, r3, #4
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	2200      	movs	r2, #0
 8010886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801088a:	2301      	movs	r3, #1
 801088c:	e046      	b.n	801091c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010894:	d021      	beq.n	80108da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010896:	f7fd ff5b 	bl	800e750 <HAL_GetTick>
 801089a:	4602      	mov	r2, r0
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	1ad3      	subs	r3, r2, r3
 80108a0:	687a      	ldr	r2, [r7, #4]
 80108a2:	429a      	cmp	r2, r3
 80108a4:	d302      	bcc.n	80108ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d116      	bne.n	80108da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2200      	movs	r2, #0
 80108b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	2220      	movs	r2, #32
 80108b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	2200      	movs	r2, #0
 80108be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108c6:	f043 0220 	orr.w	r2, r3, #32
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	2200      	movs	r2, #0
 80108d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80108d6:	2301      	movs	r3, #1
 80108d8:	e020      	b.n	801091c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	0c1b      	lsrs	r3, r3, #16
 80108de:	b2db      	uxtb	r3, r3
 80108e0:	2b01      	cmp	r3, #1
 80108e2:	d10c      	bne.n	80108fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	695b      	ldr	r3, [r3, #20]
 80108ea:	43da      	mvns	r2, r3
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	4013      	ands	r3, r2
 80108f0:	b29b      	uxth	r3, r3
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	bf14      	ite	ne
 80108f6:	2301      	movne	r3, #1
 80108f8:	2300      	moveq	r3, #0
 80108fa:	b2db      	uxtb	r3, r3
 80108fc:	e00b      	b.n	8010916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	699b      	ldr	r3, [r3, #24]
 8010904:	43da      	mvns	r2, r3
 8010906:	68bb      	ldr	r3, [r7, #8]
 8010908:	4013      	ands	r3, r2
 801090a:	b29b      	uxth	r3, r3
 801090c:	2b00      	cmp	r3, #0
 801090e:	bf14      	ite	ne
 8010910:	2301      	movne	r3, #1
 8010912:	2300      	moveq	r3, #0
 8010914:	b2db      	uxtb	r3, r3
 8010916:	2b00      	cmp	r3, #0
 8010918:	d18d      	bne.n	8010836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801091a:	2300      	movs	r3, #0
}
 801091c:	4618      	mov	r0, r3
 801091e:	3710      	adds	r7, #16
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}

08010924 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b084      	sub	sp, #16
 8010928:	af00      	add	r7, sp, #0
 801092a:	60f8      	str	r0, [r7, #12]
 801092c:	60b9      	str	r1, [r7, #8]
 801092e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010930:	e02d      	b.n	801098e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8010932:	68f8      	ldr	r0, [r7, #12]
 8010934:	f000 f878 	bl	8010a28 <I2C_IsAcknowledgeFailed>
 8010938:	4603      	mov	r3, r0
 801093a:	2b00      	cmp	r3, #0
 801093c:	d001      	beq.n	8010942 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801093e:	2301      	movs	r3, #1
 8010940:	e02d      	b.n	801099e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010948:	d021      	beq.n	801098e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801094a:	f7fd ff01 	bl	800e750 <HAL_GetTick>
 801094e:	4602      	mov	r2, r0
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	1ad3      	subs	r3, r2, r3
 8010954:	68ba      	ldr	r2, [r7, #8]
 8010956:	429a      	cmp	r2, r3
 8010958:	d302      	bcc.n	8010960 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d116      	bne.n	801098e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	2200      	movs	r2, #0
 8010964:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	2220      	movs	r2, #32
 801096a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	2200      	movs	r2, #0
 8010972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801097a:	f043 0220 	orr.w	r2, r3, #32
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	2200      	movs	r2, #0
 8010986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801098a:	2301      	movs	r3, #1
 801098c:	e007      	b.n	801099e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	695b      	ldr	r3, [r3, #20]
 8010994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010998:	2b80      	cmp	r3, #128	; 0x80
 801099a:	d1ca      	bne.n	8010932 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801099c:	2300      	movs	r3, #0
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3710      	adds	r7, #16
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}

080109a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80109a6:	b580      	push	{r7, lr}
 80109a8:	b084      	sub	sp, #16
 80109aa:	af00      	add	r7, sp, #0
 80109ac:	60f8      	str	r0, [r7, #12]
 80109ae:	60b9      	str	r1, [r7, #8]
 80109b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80109b2:	e02d      	b.n	8010a10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80109b4:	68f8      	ldr	r0, [r7, #12]
 80109b6:	f000 f837 	bl	8010a28 <I2C_IsAcknowledgeFailed>
 80109ba:	4603      	mov	r3, r0
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d001      	beq.n	80109c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80109c0:	2301      	movs	r3, #1
 80109c2:	e02d      	b.n	8010a20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109ca:	d021      	beq.n	8010a10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80109cc:	f7fd fec0 	bl	800e750 <HAL_GetTick>
 80109d0:	4602      	mov	r2, r0
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	1ad3      	subs	r3, r2, r3
 80109d6:	68ba      	ldr	r2, [r7, #8]
 80109d8:	429a      	cmp	r2, r3
 80109da:	d302      	bcc.n	80109e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80109dc:	68bb      	ldr	r3, [r7, #8]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d116      	bne.n	8010a10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	2200      	movs	r2, #0
 80109e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	2220      	movs	r2, #32
 80109ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	2200      	movs	r2, #0
 80109f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109fc:	f043 0220 	orr.w	r2, r3, #32
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	2200      	movs	r2, #0
 8010a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	e007      	b.n	8010a20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	695b      	ldr	r3, [r3, #20]
 8010a16:	f003 0304 	and.w	r3, r3, #4
 8010a1a:	2b04      	cmp	r3, #4
 8010a1c:	d1ca      	bne.n	80109b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010a1e:	2300      	movs	r3, #0
}
 8010a20:	4618      	mov	r0, r3
 8010a22:	3710      	adds	r7, #16
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}

08010a28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b083      	sub	sp, #12
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	695b      	ldr	r3, [r3, #20]
 8010a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a3e:	d11b      	bne.n	8010a78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010a48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2220      	movs	r2, #32
 8010a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a64:	f043 0204 	orr.w	r2, r3, #4
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2200      	movs	r2, #0
 8010a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8010a74:	2301      	movs	r3, #1
 8010a76:	e000      	b.n	8010a7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8010a78:	2300      	movs	r3, #0
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	370c      	adds	r7, #12
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a84:	4770      	bx	lr
	...

08010a88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b086      	sub	sp, #24
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d101      	bne.n	8010a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010a96:	2301      	movs	r3, #1
 8010a98:	e25b      	b.n	8010f52 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	f003 0301 	and.w	r3, r3, #1
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d075      	beq.n	8010b92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8010aa6:	4ba3      	ldr	r3, [pc, #652]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010aa8:	689b      	ldr	r3, [r3, #8]
 8010aaa:	f003 030c 	and.w	r3, r3, #12
 8010aae:	2b04      	cmp	r3, #4
 8010ab0:	d00c      	beq.n	8010acc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010ab2:	4ba0      	ldr	r3, [pc, #640]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010ab4:	689b      	ldr	r3, [r3, #8]
 8010ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8010aba:	2b08      	cmp	r3, #8
 8010abc:	d112      	bne.n	8010ae4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010abe:	4b9d      	ldr	r3, [pc, #628]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010ac0:	685b      	ldr	r3, [r3, #4]
 8010ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010aca:	d10b      	bne.n	8010ae4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010acc:	4b99      	ldr	r3, [pc, #612]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d05b      	beq.n	8010b90 <HAL_RCC_OscConfig+0x108>
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	685b      	ldr	r3, [r3, #4]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d157      	bne.n	8010b90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	e236      	b.n	8010f52 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	685b      	ldr	r3, [r3, #4]
 8010ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010aec:	d106      	bne.n	8010afc <HAL_RCC_OscConfig+0x74>
 8010aee:	4b91      	ldr	r3, [pc, #580]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	4a90      	ldr	r2, [pc, #576]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010af8:	6013      	str	r3, [r2, #0]
 8010afa:	e01d      	b.n	8010b38 <HAL_RCC_OscConfig+0xb0>
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	685b      	ldr	r3, [r3, #4]
 8010b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010b04:	d10c      	bne.n	8010b20 <HAL_RCC_OscConfig+0x98>
 8010b06:	4b8b      	ldr	r3, [pc, #556]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	4a8a      	ldr	r2, [pc, #552]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010b10:	6013      	str	r3, [r2, #0]
 8010b12:	4b88      	ldr	r3, [pc, #544]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	4a87      	ldr	r2, [pc, #540]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010b1c:	6013      	str	r3, [r2, #0]
 8010b1e:	e00b      	b.n	8010b38 <HAL_RCC_OscConfig+0xb0>
 8010b20:	4b84      	ldr	r3, [pc, #528]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	4a83      	ldr	r2, [pc, #524]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010b2a:	6013      	str	r3, [r2, #0]
 8010b2c:	4b81      	ldr	r3, [pc, #516]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	4a80      	ldr	r2, [pc, #512]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	685b      	ldr	r3, [r3, #4]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d013      	beq.n	8010b68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010b40:	f7fd fe06 	bl	800e750 <HAL_GetTick>
 8010b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010b46:	e008      	b.n	8010b5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010b48:	f7fd fe02 	bl	800e750 <HAL_GetTick>
 8010b4c:	4602      	mov	r2, r0
 8010b4e:	693b      	ldr	r3, [r7, #16]
 8010b50:	1ad3      	subs	r3, r2, r3
 8010b52:	2b64      	cmp	r3, #100	; 0x64
 8010b54:	d901      	bls.n	8010b5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8010b56:	2303      	movs	r3, #3
 8010b58:	e1fb      	b.n	8010f52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010b5a:	4b76      	ldr	r3, [pc, #472]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d0f0      	beq.n	8010b48 <HAL_RCC_OscConfig+0xc0>
 8010b66:	e014      	b.n	8010b92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010b68:	f7fd fdf2 	bl	800e750 <HAL_GetTick>
 8010b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010b6e:	e008      	b.n	8010b82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010b70:	f7fd fdee 	bl	800e750 <HAL_GetTick>
 8010b74:	4602      	mov	r2, r0
 8010b76:	693b      	ldr	r3, [r7, #16]
 8010b78:	1ad3      	subs	r3, r2, r3
 8010b7a:	2b64      	cmp	r3, #100	; 0x64
 8010b7c:	d901      	bls.n	8010b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010b7e:	2303      	movs	r3, #3
 8010b80:	e1e7      	b.n	8010f52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010b82:	4b6c      	ldr	r3, [pc, #432]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d1f0      	bne.n	8010b70 <HAL_RCC_OscConfig+0xe8>
 8010b8e:	e000      	b.n	8010b92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	f003 0302 	and.w	r3, r3, #2
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d063      	beq.n	8010c66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010b9e:	4b65      	ldr	r3, [pc, #404]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010ba0:	689b      	ldr	r3, [r3, #8]
 8010ba2:	f003 030c 	and.w	r3, r3, #12
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d00b      	beq.n	8010bc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010baa:	4b62      	ldr	r3, [pc, #392]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010bac:	689b      	ldr	r3, [r3, #8]
 8010bae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010bb2:	2b08      	cmp	r3, #8
 8010bb4:	d11c      	bne.n	8010bf0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010bb6:	4b5f      	ldr	r3, [pc, #380]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010bb8:	685b      	ldr	r3, [r3, #4]
 8010bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d116      	bne.n	8010bf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010bc2:	4b5c      	ldr	r3, [pc, #368]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	f003 0302 	and.w	r3, r3, #2
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d005      	beq.n	8010bda <HAL_RCC_OscConfig+0x152>
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	68db      	ldr	r3, [r3, #12]
 8010bd2:	2b01      	cmp	r3, #1
 8010bd4:	d001      	beq.n	8010bda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8010bd6:	2301      	movs	r3, #1
 8010bd8:	e1bb      	b.n	8010f52 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010bda:	4b56      	ldr	r3, [pc, #344]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	691b      	ldr	r3, [r3, #16]
 8010be6:	00db      	lsls	r3, r3, #3
 8010be8:	4952      	ldr	r1, [pc, #328]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010bea:	4313      	orrs	r3, r2
 8010bec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010bee:	e03a      	b.n	8010c66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	68db      	ldr	r3, [r3, #12]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d020      	beq.n	8010c3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010bf8:	4b4f      	ldr	r3, [pc, #316]	; (8010d38 <HAL_RCC_OscConfig+0x2b0>)
 8010bfa:	2201      	movs	r2, #1
 8010bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010bfe:	f7fd fda7 	bl	800e750 <HAL_GetTick>
 8010c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010c04:	e008      	b.n	8010c18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010c06:	f7fd fda3 	bl	800e750 <HAL_GetTick>
 8010c0a:	4602      	mov	r2, r0
 8010c0c:	693b      	ldr	r3, [r7, #16]
 8010c0e:	1ad3      	subs	r3, r2, r3
 8010c10:	2b02      	cmp	r3, #2
 8010c12:	d901      	bls.n	8010c18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8010c14:	2303      	movs	r3, #3
 8010c16:	e19c      	b.n	8010f52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010c18:	4b46      	ldr	r3, [pc, #280]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	f003 0302 	and.w	r3, r3, #2
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d0f0      	beq.n	8010c06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010c24:	4b43      	ldr	r3, [pc, #268]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	691b      	ldr	r3, [r3, #16]
 8010c30:	00db      	lsls	r3, r3, #3
 8010c32:	4940      	ldr	r1, [pc, #256]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010c34:	4313      	orrs	r3, r2
 8010c36:	600b      	str	r3, [r1, #0]
 8010c38:	e015      	b.n	8010c66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010c3a:	4b3f      	ldr	r3, [pc, #252]	; (8010d38 <HAL_RCC_OscConfig+0x2b0>)
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010c40:	f7fd fd86 	bl	800e750 <HAL_GetTick>
 8010c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010c46:	e008      	b.n	8010c5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010c48:	f7fd fd82 	bl	800e750 <HAL_GetTick>
 8010c4c:	4602      	mov	r2, r0
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	1ad3      	subs	r3, r2, r3
 8010c52:	2b02      	cmp	r3, #2
 8010c54:	d901      	bls.n	8010c5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8010c56:	2303      	movs	r3, #3
 8010c58:	e17b      	b.n	8010f52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010c5a:	4b36      	ldr	r3, [pc, #216]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f003 0302 	and.w	r3, r3, #2
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d1f0      	bne.n	8010c48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	f003 0308 	and.w	r3, r3, #8
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d030      	beq.n	8010cd4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	695b      	ldr	r3, [r3, #20]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d016      	beq.n	8010ca8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010c7a:	4b30      	ldr	r3, [pc, #192]	; (8010d3c <HAL_RCC_OscConfig+0x2b4>)
 8010c7c:	2201      	movs	r2, #1
 8010c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010c80:	f7fd fd66 	bl	800e750 <HAL_GetTick>
 8010c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010c86:	e008      	b.n	8010c9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010c88:	f7fd fd62 	bl	800e750 <HAL_GetTick>
 8010c8c:	4602      	mov	r2, r0
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	1ad3      	subs	r3, r2, r3
 8010c92:	2b02      	cmp	r3, #2
 8010c94:	d901      	bls.n	8010c9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8010c96:	2303      	movs	r3, #3
 8010c98:	e15b      	b.n	8010f52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010c9a:	4b26      	ldr	r3, [pc, #152]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c9e:	f003 0302 	and.w	r3, r3, #2
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d0f0      	beq.n	8010c88 <HAL_RCC_OscConfig+0x200>
 8010ca6:	e015      	b.n	8010cd4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010ca8:	4b24      	ldr	r3, [pc, #144]	; (8010d3c <HAL_RCC_OscConfig+0x2b4>)
 8010caa:	2200      	movs	r2, #0
 8010cac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010cae:	f7fd fd4f 	bl	800e750 <HAL_GetTick>
 8010cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010cb4:	e008      	b.n	8010cc8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010cb6:	f7fd fd4b 	bl	800e750 <HAL_GetTick>
 8010cba:	4602      	mov	r2, r0
 8010cbc:	693b      	ldr	r3, [r7, #16]
 8010cbe:	1ad3      	subs	r3, r2, r3
 8010cc0:	2b02      	cmp	r3, #2
 8010cc2:	d901      	bls.n	8010cc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8010cc4:	2303      	movs	r3, #3
 8010cc6:	e144      	b.n	8010f52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010cc8:	4b1a      	ldr	r3, [pc, #104]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ccc:	f003 0302 	and.w	r3, r3, #2
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d1f0      	bne.n	8010cb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	f003 0304 	and.w	r3, r3, #4
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	f000 80a0 	beq.w	8010e22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010ce6:	4b13      	ldr	r3, [pc, #76]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d10f      	bne.n	8010d12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	60bb      	str	r3, [r7, #8]
 8010cf6:	4b0f      	ldr	r3, [pc, #60]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cfa:	4a0e      	ldr	r2, [pc, #56]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010d00:	6413      	str	r3, [r2, #64]	; 0x40
 8010d02:	4b0c      	ldr	r3, [pc, #48]	; (8010d34 <HAL_RCC_OscConfig+0x2ac>)
 8010d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d0a:	60bb      	str	r3, [r7, #8]
 8010d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010d0e:	2301      	movs	r3, #1
 8010d10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010d12:	4b0b      	ldr	r3, [pc, #44]	; (8010d40 <HAL_RCC_OscConfig+0x2b8>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d121      	bne.n	8010d62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010d1e:	4b08      	ldr	r3, [pc, #32]	; (8010d40 <HAL_RCC_OscConfig+0x2b8>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	4a07      	ldr	r2, [pc, #28]	; (8010d40 <HAL_RCC_OscConfig+0x2b8>)
 8010d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010d2a:	f7fd fd11 	bl	800e750 <HAL_GetTick>
 8010d2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010d30:	e011      	b.n	8010d56 <HAL_RCC_OscConfig+0x2ce>
 8010d32:	bf00      	nop
 8010d34:	40023800 	.word	0x40023800
 8010d38:	42470000 	.word	0x42470000
 8010d3c:	42470e80 	.word	0x42470e80
 8010d40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010d44:	f7fd fd04 	bl	800e750 <HAL_GetTick>
 8010d48:	4602      	mov	r2, r0
 8010d4a:	693b      	ldr	r3, [r7, #16]
 8010d4c:	1ad3      	subs	r3, r2, r3
 8010d4e:	2b02      	cmp	r3, #2
 8010d50:	d901      	bls.n	8010d56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8010d52:	2303      	movs	r3, #3
 8010d54:	e0fd      	b.n	8010f52 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010d56:	4b81      	ldr	r3, [pc, #516]	; (8010f5c <HAL_RCC_OscConfig+0x4d4>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d0f0      	beq.n	8010d44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	689b      	ldr	r3, [r3, #8]
 8010d66:	2b01      	cmp	r3, #1
 8010d68:	d106      	bne.n	8010d78 <HAL_RCC_OscConfig+0x2f0>
 8010d6a:	4b7d      	ldr	r3, [pc, #500]	; (8010f60 <HAL_RCC_OscConfig+0x4d8>)
 8010d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d6e:	4a7c      	ldr	r2, [pc, #496]	; (8010f60 <HAL_RCC_OscConfig+0x4d8>)
 8010d70:	f043 0301 	orr.w	r3, r3, #1
 8010d74:	6713      	str	r3, [r2, #112]	; 0x70
 8010d76:	e01c      	b.n	8010db2 <HAL_RCC_OscConfig+0x32a>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	689b      	ldr	r3, [r3, #8]
 8010d7c:	2b05      	cmp	r3, #5
 8010d7e:	d10c      	bne.n	8010d9a <HAL_RCC_OscConfig+0x312>
 8010d80:	4b77      	ldr	r3, [pc, #476]	; (8010f60 <HAL_RCC_OscConfig+0x4d8>)
 8010d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d84:	4a76      	ldr	r2, [pc, #472]	; (8010f60 <HAL_RCC_OscConfig+0x4d8>)
 8010d86:	f043 0304 	orr.w	r3, r3, #4
 8010d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8010d8c:	4b74      	ldr	r3, [pc, #464]	; (8010f60 <HAL_RCC_OscConfig+0x4d8>)
 8010d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d90:	4a73      	ldr	r2, [pc, #460]	; (8010f60 <HAL_RCC_OscConfig+0x4d8>)
 8010d92:	f043 0301 	orr.w	r3, r3, #1
 8010d96:	6713      	str	r3, [r2, #112]	; 0x70
 8010d98:	e00b      	b.n	8010db2 <HAL_RCC_OscConfig+0x32a>
 8010d9a:	4b71      	ldr	r3, [pc, #452]	; (8010f60 <HAL_RCC_OscConfig+0x4d8>)
 8010d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d9e:	4a70      	ldr	r2, [pc, #448]	; (8010f60 <HAL_RCC_OscConfig+0x4d8>)
 8010da0:	f023 0301 	bic.w	r3, r3, #1
 8010da4:	6713      	str	r3, [r2, #112]	; 0x70
 8010da6:	4b6e      	ldr	r3, [pc, #440]	; (8010f60 <HAL_RCC_OscConfig+0x4d8>)
 8010da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010daa:	4a6d      	ldr	r2, [pc, #436]	; (8010f60 <HAL_RCC_OscConfig+0x4d8>)
 8010dac:	f023 0304 	bic.w	r3, r3, #4
 8010db0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	689b      	ldr	r3, [r3, #8]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d015      	beq.n	8010de6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010dba:	f7fd fcc9 	bl	800e750 <HAL_GetTick>
 8010dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010dc0:	e00a      	b.n	8010dd8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010dc2:	f7fd fcc5 	bl	800e750 <HAL_GetTick>
 8010dc6:	4602      	mov	r2, r0
 8010dc8:	693b      	ldr	r3, [r7, #16]
 8010dca:	1ad3      	subs	r3, r2, r3
 8010dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	d901      	bls.n	8010dd8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8010dd4:	2303      	movs	r3, #3
 8010dd6:	e0bc      	b.n	8010f52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010dd8:	4b61      	ldr	r3, [pc, #388]	; (8010f60 <HAL_RCC_OscConfig+0x4d8>)
 8010dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ddc:	f003 0302 	and.w	r3, r3, #2
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d0ee      	beq.n	8010dc2 <HAL_RCC_OscConfig+0x33a>
 8010de4:	e014      	b.n	8010e10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010de6:	f7fd fcb3 	bl	800e750 <HAL_GetTick>
 8010dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010dec:	e00a      	b.n	8010e04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010dee:	f7fd fcaf 	bl	800e750 <HAL_GetTick>
 8010df2:	4602      	mov	r2, r0
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	1ad3      	subs	r3, r2, r3
 8010df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010dfc:	4293      	cmp	r3, r2
 8010dfe:	d901      	bls.n	8010e04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8010e00:	2303      	movs	r3, #3
 8010e02:	e0a6      	b.n	8010f52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010e04:	4b56      	ldr	r3, [pc, #344]	; (8010f60 <HAL_RCC_OscConfig+0x4d8>)
 8010e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e08:	f003 0302 	and.w	r3, r3, #2
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d1ee      	bne.n	8010dee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010e10:	7dfb      	ldrb	r3, [r7, #23]
 8010e12:	2b01      	cmp	r3, #1
 8010e14:	d105      	bne.n	8010e22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010e16:	4b52      	ldr	r3, [pc, #328]	; (8010f60 <HAL_RCC_OscConfig+0x4d8>)
 8010e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e1a:	4a51      	ldr	r2, [pc, #324]	; (8010f60 <HAL_RCC_OscConfig+0x4d8>)
 8010e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010e20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	699b      	ldr	r3, [r3, #24]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	f000 8092 	beq.w	8010f50 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8010e2c:	4b4c      	ldr	r3, [pc, #304]	; (8010f60 <HAL_RCC_OscConfig+0x4d8>)
 8010e2e:	689b      	ldr	r3, [r3, #8]
 8010e30:	f003 030c 	and.w	r3, r3, #12
 8010e34:	2b08      	cmp	r3, #8
 8010e36:	d05c      	beq.n	8010ef2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	699b      	ldr	r3, [r3, #24]
 8010e3c:	2b02      	cmp	r3, #2
 8010e3e:	d141      	bne.n	8010ec4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010e40:	4b48      	ldr	r3, [pc, #288]	; (8010f64 <HAL_RCC_OscConfig+0x4dc>)
 8010e42:	2200      	movs	r2, #0
 8010e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010e46:	f7fd fc83 	bl	800e750 <HAL_GetTick>
 8010e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010e4c:	e008      	b.n	8010e60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010e4e:	f7fd fc7f 	bl	800e750 <HAL_GetTick>
 8010e52:	4602      	mov	r2, r0
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	1ad3      	subs	r3, r2, r3
 8010e58:	2b02      	cmp	r3, #2
 8010e5a:	d901      	bls.n	8010e60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8010e5c:	2303      	movs	r3, #3
 8010e5e:	e078      	b.n	8010f52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010e60:	4b3f      	ldr	r3, [pc, #252]	; (8010f60 <HAL_RCC_OscConfig+0x4d8>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d1f0      	bne.n	8010e4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	69da      	ldr	r2, [r3, #28]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6a1b      	ldr	r3, [r3, #32]
 8010e74:	431a      	orrs	r2, r3
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e7a:	019b      	lsls	r3, r3, #6
 8010e7c:	431a      	orrs	r2, r3
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e82:	085b      	lsrs	r3, r3, #1
 8010e84:	3b01      	subs	r3, #1
 8010e86:	041b      	lsls	r3, r3, #16
 8010e88:	431a      	orrs	r2, r3
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e8e:	061b      	lsls	r3, r3, #24
 8010e90:	4933      	ldr	r1, [pc, #204]	; (8010f60 <HAL_RCC_OscConfig+0x4d8>)
 8010e92:	4313      	orrs	r3, r2
 8010e94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010e96:	4b33      	ldr	r3, [pc, #204]	; (8010f64 <HAL_RCC_OscConfig+0x4dc>)
 8010e98:	2201      	movs	r2, #1
 8010e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010e9c:	f7fd fc58 	bl	800e750 <HAL_GetTick>
 8010ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010ea2:	e008      	b.n	8010eb6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010ea4:	f7fd fc54 	bl	800e750 <HAL_GetTick>
 8010ea8:	4602      	mov	r2, r0
 8010eaa:	693b      	ldr	r3, [r7, #16]
 8010eac:	1ad3      	subs	r3, r2, r3
 8010eae:	2b02      	cmp	r3, #2
 8010eb0:	d901      	bls.n	8010eb6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8010eb2:	2303      	movs	r3, #3
 8010eb4:	e04d      	b.n	8010f52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010eb6:	4b2a      	ldr	r3, [pc, #168]	; (8010f60 <HAL_RCC_OscConfig+0x4d8>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d0f0      	beq.n	8010ea4 <HAL_RCC_OscConfig+0x41c>
 8010ec2:	e045      	b.n	8010f50 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010ec4:	4b27      	ldr	r3, [pc, #156]	; (8010f64 <HAL_RCC_OscConfig+0x4dc>)
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010eca:	f7fd fc41 	bl	800e750 <HAL_GetTick>
 8010ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010ed0:	e008      	b.n	8010ee4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010ed2:	f7fd fc3d 	bl	800e750 <HAL_GetTick>
 8010ed6:	4602      	mov	r2, r0
 8010ed8:	693b      	ldr	r3, [r7, #16]
 8010eda:	1ad3      	subs	r3, r2, r3
 8010edc:	2b02      	cmp	r3, #2
 8010ede:	d901      	bls.n	8010ee4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8010ee0:	2303      	movs	r3, #3
 8010ee2:	e036      	b.n	8010f52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010ee4:	4b1e      	ldr	r3, [pc, #120]	; (8010f60 <HAL_RCC_OscConfig+0x4d8>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d1f0      	bne.n	8010ed2 <HAL_RCC_OscConfig+0x44a>
 8010ef0:	e02e      	b.n	8010f50 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	699b      	ldr	r3, [r3, #24]
 8010ef6:	2b01      	cmp	r3, #1
 8010ef8:	d101      	bne.n	8010efe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8010efa:	2301      	movs	r3, #1
 8010efc:	e029      	b.n	8010f52 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8010efe:	4b18      	ldr	r3, [pc, #96]	; (8010f60 <HAL_RCC_OscConfig+0x4d8>)
 8010f00:	685b      	ldr	r3, [r3, #4]
 8010f02:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	69db      	ldr	r3, [r3, #28]
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	d11c      	bne.n	8010f4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d115      	bne.n	8010f4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8010f20:	68fa      	ldr	r2, [r7, #12]
 8010f22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010f26:	4013      	ands	r3, r2
 8010f28:	687a      	ldr	r2, [r7, #4]
 8010f2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010f2c:	4293      	cmp	r3, r2
 8010f2e:	d10d      	bne.n	8010f4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	d106      	bne.n	8010f4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d001      	beq.n	8010f50 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	e000      	b.n	8010f52 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8010f50:	2300      	movs	r3, #0
}
 8010f52:	4618      	mov	r0, r3
 8010f54:	3718      	adds	r7, #24
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}
 8010f5a:	bf00      	nop
 8010f5c:	40007000 	.word	0x40007000
 8010f60:	40023800 	.word	0x40023800
 8010f64:	42470060 	.word	0x42470060

08010f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b084      	sub	sp, #16
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d101      	bne.n	8010f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010f78:	2301      	movs	r3, #1
 8010f7a:	e0cc      	b.n	8011116 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010f7c:	4b68      	ldr	r3, [pc, #416]	; (8011120 <HAL_RCC_ClockConfig+0x1b8>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	f003 030f 	and.w	r3, r3, #15
 8010f84:	683a      	ldr	r2, [r7, #0]
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d90c      	bls.n	8010fa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010f8a:	4b65      	ldr	r3, [pc, #404]	; (8011120 <HAL_RCC_ClockConfig+0x1b8>)
 8010f8c:	683a      	ldr	r2, [r7, #0]
 8010f8e:	b2d2      	uxtb	r2, r2
 8010f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010f92:	4b63      	ldr	r3, [pc, #396]	; (8011120 <HAL_RCC_ClockConfig+0x1b8>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	f003 030f 	and.w	r3, r3, #15
 8010f9a:	683a      	ldr	r2, [r7, #0]
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	d001      	beq.n	8010fa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	e0b8      	b.n	8011116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	f003 0302 	and.w	r3, r3, #2
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d020      	beq.n	8010ff2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	f003 0304 	and.w	r3, r3, #4
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d005      	beq.n	8010fc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010fbc:	4b59      	ldr	r3, [pc, #356]	; (8011124 <HAL_RCC_ClockConfig+0x1bc>)
 8010fbe:	689b      	ldr	r3, [r3, #8]
 8010fc0:	4a58      	ldr	r2, [pc, #352]	; (8011124 <HAL_RCC_ClockConfig+0x1bc>)
 8010fc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8010fc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	f003 0308 	and.w	r3, r3, #8
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d005      	beq.n	8010fe0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010fd4:	4b53      	ldr	r3, [pc, #332]	; (8011124 <HAL_RCC_ClockConfig+0x1bc>)
 8010fd6:	689b      	ldr	r3, [r3, #8]
 8010fd8:	4a52      	ldr	r2, [pc, #328]	; (8011124 <HAL_RCC_ClockConfig+0x1bc>)
 8010fda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8010fde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010fe0:	4b50      	ldr	r3, [pc, #320]	; (8011124 <HAL_RCC_ClockConfig+0x1bc>)
 8010fe2:	689b      	ldr	r3, [r3, #8]
 8010fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	689b      	ldr	r3, [r3, #8]
 8010fec:	494d      	ldr	r1, [pc, #308]	; (8011124 <HAL_RCC_ClockConfig+0x1bc>)
 8010fee:	4313      	orrs	r3, r2
 8010ff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	f003 0301 	and.w	r3, r3, #1
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d044      	beq.n	8011088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	685b      	ldr	r3, [r3, #4]
 8011002:	2b01      	cmp	r3, #1
 8011004:	d107      	bne.n	8011016 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011006:	4b47      	ldr	r3, [pc, #284]	; (8011124 <HAL_RCC_ClockConfig+0x1bc>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801100e:	2b00      	cmp	r3, #0
 8011010:	d119      	bne.n	8011046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011012:	2301      	movs	r3, #1
 8011014:	e07f      	b.n	8011116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	685b      	ldr	r3, [r3, #4]
 801101a:	2b02      	cmp	r3, #2
 801101c:	d003      	beq.n	8011026 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011022:	2b03      	cmp	r3, #3
 8011024:	d107      	bne.n	8011036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011026:	4b3f      	ldr	r3, [pc, #252]	; (8011124 <HAL_RCC_ClockConfig+0x1bc>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801102e:	2b00      	cmp	r3, #0
 8011030:	d109      	bne.n	8011046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011032:	2301      	movs	r3, #1
 8011034:	e06f      	b.n	8011116 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011036:	4b3b      	ldr	r3, [pc, #236]	; (8011124 <HAL_RCC_ClockConfig+0x1bc>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	f003 0302 	and.w	r3, r3, #2
 801103e:	2b00      	cmp	r3, #0
 8011040:	d101      	bne.n	8011046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011042:	2301      	movs	r3, #1
 8011044:	e067      	b.n	8011116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011046:	4b37      	ldr	r3, [pc, #220]	; (8011124 <HAL_RCC_ClockConfig+0x1bc>)
 8011048:	689b      	ldr	r3, [r3, #8]
 801104a:	f023 0203 	bic.w	r2, r3, #3
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	4934      	ldr	r1, [pc, #208]	; (8011124 <HAL_RCC_ClockConfig+0x1bc>)
 8011054:	4313      	orrs	r3, r2
 8011056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011058:	f7fd fb7a 	bl	800e750 <HAL_GetTick>
 801105c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801105e:	e00a      	b.n	8011076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011060:	f7fd fb76 	bl	800e750 <HAL_GetTick>
 8011064:	4602      	mov	r2, r0
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	1ad3      	subs	r3, r2, r3
 801106a:	f241 3288 	movw	r2, #5000	; 0x1388
 801106e:	4293      	cmp	r3, r2
 8011070:	d901      	bls.n	8011076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8011072:	2303      	movs	r3, #3
 8011074:	e04f      	b.n	8011116 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011076:	4b2b      	ldr	r3, [pc, #172]	; (8011124 <HAL_RCC_ClockConfig+0x1bc>)
 8011078:	689b      	ldr	r3, [r3, #8]
 801107a:	f003 020c 	and.w	r2, r3, #12
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	685b      	ldr	r3, [r3, #4]
 8011082:	009b      	lsls	r3, r3, #2
 8011084:	429a      	cmp	r2, r3
 8011086:	d1eb      	bne.n	8011060 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011088:	4b25      	ldr	r3, [pc, #148]	; (8011120 <HAL_RCC_ClockConfig+0x1b8>)
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	f003 030f 	and.w	r3, r3, #15
 8011090:	683a      	ldr	r2, [r7, #0]
 8011092:	429a      	cmp	r2, r3
 8011094:	d20c      	bcs.n	80110b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011096:	4b22      	ldr	r3, [pc, #136]	; (8011120 <HAL_RCC_ClockConfig+0x1b8>)
 8011098:	683a      	ldr	r2, [r7, #0]
 801109a:	b2d2      	uxtb	r2, r2
 801109c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801109e:	4b20      	ldr	r3, [pc, #128]	; (8011120 <HAL_RCC_ClockConfig+0x1b8>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	f003 030f 	and.w	r3, r3, #15
 80110a6:	683a      	ldr	r2, [r7, #0]
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d001      	beq.n	80110b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80110ac:	2301      	movs	r3, #1
 80110ae:	e032      	b.n	8011116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	f003 0304 	and.w	r3, r3, #4
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d008      	beq.n	80110ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80110bc:	4b19      	ldr	r3, [pc, #100]	; (8011124 <HAL_RCC_ClockConfig+0x1bc>)
 80110be:	689b      	ldr	r3, [r3, #8]
 80110c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	68db      	ldr	r3, [r3, #12]
 80110c8:	4916      	ldr	r1, [pc, #88]	; (8011124 <HAL_RCC_ClockConfig+0x1bc>)
 80110ca:	4313      	orrs	r3, r2
 80110cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	f003 0308 	and.w	r3, r3, #8
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d009      	beq.n	80110ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80110da:	4b12      	ldr	r3, [pc, #72]	; (8011124 <HAL_RCC_ClockConfig+0x1bc>)
 80110dc:	689b      	ldr	r3, [r3, #8]
 80110de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	691b      	ldr	r3, [r3, #16]
 80110e6:	00db      	lsls	r3, r3, #3
 80110e8:	490e      	ldr	r1, [pc, #56]	; (8011124 <HAL_RCC_ClockConfig+0x1bc>)
 80110ea:	4313      	orrs	r3, r2
 80110ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80110ee:	f000 f821 	bl	8011134 <HAL_RCC_GetSysClockFreq>
 80110f2:	4601      	mov	r1, r0
 80110f4:	4b0b      	ldr	r3, [pc, #44]	; (8011124 <HAL_RCC_ClockConfig+0x1bc>)
 80110f6:	689b      	ldr	r3, [r3, #8]
 80110f8:	091b      	lsrs	r3, r3, #4
 80110fa:	f003 030f 	and.w	r3, r3, #15
 80110fe:	4a0a      	ldr	r2, [pc, #40]	; (8011128 <HAL_RCC_ClockConfig+0x1c0>)
 8011100:	5cd3      	ldrb	r3, [r2, r3]
 8011102:	fa21 f303 	lsr.w	r3, r1, r3
 8011106:	4a09      	ldr	r2, [pc, #36]	; (801112c <HAL_RCC_ClockConfig+0x1c4>)
 8011108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801110a:	4b09      	ldr	r3, [pc, #36]	; (8011130 <HAL_RCC_ClockConfig+0x1c8>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	4618      	mov	r0, r3
 8011110:	f7fd fada 	bl	800e6c8 <HAL_InitTick>

  return HAL_OK;
 8011114:	2300      	movs	r3, #0
}
 8011116:	4618      	mov	r0, r3
 8011118:	3710      	adds	r7, #16
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}
 801111e:	bf00      	nop
 8011120:	40023c00 	.word	0x40023c00
 8011124:	40023800 	.word	0x40023800
 8011128:	080164b4 	.word	0x080164b4
 801112c:	2000000c 	.word	0x2000000c
 8011130:	20000010 	.word	0x20000010

08011134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011136:	b085      	sub	sp, #20
 8011138:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801113a:	2300      	movs	r3, #0
 801113c:	607b      	str	r3, [r7, #4]
 801113e:	2300      	movs	r3, #0
 8011140:	60fb      	str	r3, [r7, #12]
 8011142:	2300      	movs	r3, #0
 8011144:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8011146:	2300      	movs	r3, #0
 8011148:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801114a:	4b50      	ldr	r3, [pc, #320]	; (801128c <HAL_RCC_GetSysClockFreq+0x158>)
 801114c:	689b      	ldr	r3, [r3, #8]
 801114e:	f003 030c 	and.w	r3, r3, #12
 8011152:	2b04      	cmp	r3, #4
 8011154:	d007      	beq.n	8011166 <HAL_RCC_GetSysClockFreq+0x32>
 8011156:	2b08      	cmp	r3, #8
 8011158:	d008      	beq.n	801116c <HAL_RCC_GetSysClockFreq+0x38>
 801115a:	2b00      	cmp	r3, #0
 801115c:	f040 808d 	bne.w	801127a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011160:	4b4b      	ldr	r3, [pc, #300]	; (8011290 <HAL_RCC_GetSysClockFreq+0x15c>)
 8011162:	60bb      	str	r3, [r7, #8]
       break;
 8011164:	e08c      	b.n	8011280 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8011166:	4b4b      	ldr	r3, [pc, #300]	; (8011294 <HAL_RCC_GetSysClockFreq+0x160>)
 8011168:	60bb      	str	r3, [r7, #8]
      break;
 801116a:	e089      	b.n	8011280 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801116c:	4b47      	ldr	r3, [pc, #284]	; (801128c <HAL_RCC_GetSysClockFreq+0x158>)
 801116e:	685b      	ldr	r3, [r3, #4]
 8011170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011174:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011176:	4b45      	ldr	r3, [pc, #276]	; (801128c <HAL_RCC_GetSysClockFreq+0x158>)
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801117e:	2b00      	cmp	r3, #0
 8011180:	d023      	beq.n	80111ca <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011182:	4b42      	ldr	r3, [pc, #264]	; (801128c <HAL_RCC_GetSysClockFreq+0x158>)
 8011184:	685b      	ldr	r3, [r3, #4]
 8011186:	099b      	lsrs	r3, r3, #6
 8011188:	f04f 0400 	mov.w	r4, #0
 801118c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8011190:	f04f 0200 	mov.w	r2, #0
 8011194:	ea03 0501 	and.w	r5, r3, r1
 8011198:	ea04 0602 	and.w	r6, r4, r2
 801119c:	4a3d      	ldr	r2, [pc, #244]	; (8011294 <HAL_RCC_GetSysClockFreq+0x160>)
 801119e:	fb02 f106 	mul.w	r1, r2, r6
 80111a2:	2200      	movs	r2, #0
 80111a4:	fb02 f205 	mul.w	r2, r2, r5
 80111a8:	440a      	add	r2, r1
 80111aa:	493a      	ldr	r1, [pc, #232]	; (8011294 <HAL_RCC_GetSysClockFreq+0x160>)
 80111ac:	fba5 0101 	umull	r0, r1, r5, r1
 80111b0:	1853      	adds	r3, r2, r1
 80111b2:	4619      	mov	r1, r3
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	f04f 0400 	mov.w	r4, #0
 80111ba:	461a      	mov	r2, r3
 80111bc:	4623      	mov	r3, r4
 80111be:	f7f7 fc7b 	bl	8008ab8 <__aeabi_uldivmod>
 80111c2:	4603      	mov	r3, r0
 80111c4:	460c      	mov	r4, r1
 80111c6:	60fb      	str	r3, [r7, #12]
 80111c8:	e049      	b.n	801125e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80111ca:	4b30      	ldr	r3, [pc, #192]	; (801128c <HAL_RCC_GetSysClockFreq+0x158>)
 80111cc:	685b      	ldr	r3, [r3, #4]
 80111ce:	099b      	lsrs	r3, r3, #6
 80111d0:	f04f 0400 	mov.w	r4, #0
 80111d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80111d8:	f04f 0200 	mov.w	r2, #0
 80111dc:	ea03 0501 	and.w	r5, r3, r1
 80111e0:	ea04 0602 	and.w	r6, r4, r2
 80111e4:	4629      	mov	r1, r5
 80111e6:	4632      	mov	r2, r6
 80111e8:	f04f 0300 	mov.w	r3, #0
 80111ec:	f04f 0400 	mov.w	r4, #0
 80111f0:	0154      	lsls	r4, r2, #5
 80111f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80111f6:	014b      	lsls	r3, r1, #5
 80111f8:	4619      	mov	r1, r3
 80111fa:	4622      	mov	r2, r4
 80111fc:	1b49      	subs	r1, r1, r5
 80111fe:	eb62 0206 	sbc.w	r2, r2, r6
 8011202:	f04f 0300 	mov.w	r3, #0
 8011206:	f04f 0400 	mov.w	r4, #0
 801120a:	0194      	lsls	r4, r2, #6
 801120c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8011210:	018b      	lsls	r3, r1, #6
 8011212:	1a5b      	subs	r3, r3, r1
 8011214:	eb64 0402 	sbc.w	r4, r4, r2
 8011218:	f04f 0100 	mov.w	r1, #0
 801121c:	f04f 0200 	mov.w	r2, #0
 8011220:	00e2      	lsls	r2, r4, #3
 8011222:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8011226:	00d9      	lsls	r1, r3, #3
 8011228:	460b      	mov	r3, r1
 801122a:	4614      	mov	r4, r2
 801122c:	195b      	adds	r3, r3, r5
 801122e:	eb44 0406 	adc.w	r4, r4, r6
 8011232:	f04f 0100 	mov.w	r1, #0
 8011236:	f04f 0200 	mov.w	r2, #0
 801123a:	02a2      	lsls	r2, r4, #10
 801123c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8011240:	0299      	lsls	r1, r3, #10
 8011242:	460b      	mov	r3, r1
 8011244:	4614      	mov	r4, r2
 8011246:	4618      	mov	r0, r3
 8011248:	4621      	mov	r1, r4
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	f04f 0400 	mov.w	r4, #0
 8011250:	461a      	mov	r2, r3
 8011252:	4623      	mov	r3, r4
 8011254:	f7f7 fc30 	bl	8008ab8 <__aeabi_uldivmod>
 8011258:	4603      	mov	r3, r0
 801125a:	460c      	mov	r4, r1
 801125c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801125e:	4b0b      	ldr	r3, [pc, #44]	; (801128c <HAL_RCC_GetSysClockFreq+0x158>)
 8011260:	685b      	ldr	r3, [r3, #4]
 8011262:	0c1b      	lsrs	r3, r3, #16
 8011264:	f003 0303 	and.w	r3, r3, #3
 8011268:	3301      	adds	r3, #1
 801126a:	005b      	lsls	r3, r3, #1
 801126c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 801126e:	68fa      	ldr	r2, [r7, #12]
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	fbb2 f3f3 	udiv	r3, r2, r3
 8011276:	60bb      	str	r3, [r7, #8]
      break;
 8011278:	e002      	b.n	8011280 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801127a:	4b05      	ldr	r3, [pc, #20]	; (8011290 <HAL_RCC_GetSysClockFreq+0x15c>)
 801127c:	60bb      	str	r3, [r7, #8]
      break;
 801127e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8011280:	68bb      	ldr	r3, [r7, #8]
}
 8011282:	4618      	mov	r0, r3
 8011284:	3714      	adds	r7, #20
 8011286:	46bd      	mov	sp, r7
 8011288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801128a:	bf00      	nop
 801128c:	40023800 	.word	0x40023800
 8011290:	00f42400 	.word	0x00f42400
 8011294:	00b71b00 	.word	0x00b71b00

08011298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011298:	b480      	push	{r7}
 801129a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801129c:	4b03      	ldr	r3, [pc, #12]	; (80112ac <HAL_RCC_GetHCLKFreq+0x14>)
 801129e:	681b      	ldr	r3, [r3, #0]
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	46bd      	mov	sp, r7
 80112a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a8:	4770      	bx	lr
 80112aa:	bf00      	nop
 80112ac:	2000000c 	.word	0x2000000c

080112b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80112b4:	f7ff fff0 	bl	8011298 <HAL_RCC_GetHCLKFreq>
 80112b8:	4601      	mov	r1, r0
 80112ba:	4b05      	ldr	r3, [pc, #20]	; (80112d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80112bc:	689b      	ldr	r3, [r3, #8]
 80112be:	0a9b      	lsrs	r3, r3, #10
 80112c0:	f003 0307 	and.w	r3, r3, #7
 80112c4:	4a03      	ldr	r2, [pc, #12]	; (80112d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80112c6:	5cd3      	ldrb	r3, [r2, r3]
 80112c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80112cc:	4618      	mov	r0, r3
 80112ce:	bd80      	pop	{r7, pc}
 80112d0:	40023800 	.word	0x40023800
 80112d4:	080164c4 	.word	0x080164c4

080112d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80112dc:	f7ff ffdc 	bl	8011298 <HAL_RCC_GetHCLKFreq>
 80112e0:	4601      	mov	r1, r0
 80112e2:	4b05      	ldr	r3, [pc, #20]	; (80112f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80112e4:	689b      	ldr	r3, [r3, #8]
 80112e6:	0b5b      	lsrs	r3, r3, #13
 80112e8:	f003 0307 	and.w	r3, r3, #7
 80112ec:	4a03      	ldr	r2, [pc, #12]	; (80112fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80112ee:	5cd3      	ldrb	r3, [r2, r3]
 80112f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	bd80      	pop	{r7, pc}
 80112f8:	40023800 	.word	0x40023800
 80112fc:	080164c4 	.word	0x080164c4

08011300 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b082      	sub	sp, #8
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d101      	bne.n	8011312 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801130e:	2301      	movs	r3, #1
 8011310:	e056      	b.n	80113c0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2200      	movs	r2, #0
 8011316:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801131e:	b2db      	uxtb	r3, r3
 8011320:	2b00      	cmp	r3, #0
 8011322:	d106      	bne.n	8011332 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2200      	movs	r2, #0
 8011328:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f7fc fe69 	bl	800e004 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2202      	movs	r2, #2
 8011336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	681a      	ldr	r2, [r3, #0]
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011348:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	685a      	ldr	r2, [r3, #4]
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	689b      	ldr	r3, [r3, #8]
 8011352:	431a      	orrs	r2, r3
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	68db      	ldr	r3, [r3, #12]
 8011358:	431a      	orrs	r2, r3
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	691b      	ldr	r3, [r3, #16]
 801135e:	431a      	orrs	r2, r3
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	695b      	ldr	r3, [r3, #20]
 8011364:	431a      	orrs	r2, r3
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	699b      	ldr	r3, [r3, #24]
 801136a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801136e:	431a      	orrs	r2, r3
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	69db      	ldr	r3, [r3, #28]
 8011374:	431a      	orrs	r2, r3
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	6a1b      	ldr	r3, [r3, #32]
 801137a:	ea42 0103 	orr.w	r1, r2, r3
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	430a      	orrs	r2, r1
 8011388:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	699b      	ldr	r3, [r3, #24]
 801138e:	0c1b      	lsrs	r3, r3, #16
 8011390:	f003 0104 	and.w	r1, r3, #4
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	430a      	orrs	r2, r1
 801139e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	69da      	ldr	r2, [r3, #28]
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80113ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2200      	movs	r2, #0
 80113b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2201      	movs	r2, #1
 80113ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80113be:	2300      	movs	r3, #0
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	3708      	adds	r7, #8
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}

080113c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b088      	sub	sp, #32
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	60f8      	str	r0, [r7, #12]
 80113d0:	60b9      	str	r1, [r7, #8]
 80113d2:	603b      	str	r3, [r7, #0]
 80113d4:	4613      	mov	r3, r2
 80113d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80113d8:	2300      	movs	r3, #0
 80113da:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80113e2:	2b01      	cmp	r3, #1
 80113e4:	d101      	bne.n	80113ea <HAL_SPI_Transmit+0x22>
 80113e6:	2302      	movs	r3, #2
 80113e8:	e11e      	b.n	8011628 <HAL_SPI_Transmit+0x260>
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	2201      	movs	r2, #1
 80113ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80113f2:	f7fd f9ad 	bl	800e750 <HAL_GetTick>
 80113f6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80113f8:	88fb      	ldrh	r3, [r7, #6]
 80113fa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011402:	b2db      	uxtb	r3, r3
 8011404:	2b01      	cmp	r3, #1
 8011406:	d002      	beq.n	801140e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8011408:	2302      	movs	r3, #2
 801140a:	77fb      	strb	r3, [r7, #31]
    goto error;
 801140c:	e103      	b.n	8011616 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d002      	beq.n	801141a <HAL_SPI_Transmit+0x52>
 8011414:	88fb      	ldrh	r3, [r7, #6]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d102      	bne.n	8011420 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801141a:	2301      	movs	r3, #1
 801141c:	77fb      	strb	r3, [r7, #31]
    goto error;
 801141e:	e0fa      	b.n	8011616 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	2203      	movs	r2, #3
 8011424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	2200      	movs	r2, #0
 801142c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	68ba      	ldr	r2, [r7, #8]
 8011432:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	88fa      	ldrh	r2, [r7, #6]
 8011438:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	88fa      	ldrh	r2, [r7, #6]
 801143e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	2200      	movs	r2, #0
 8011444:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	2200      	movs	r2, #0
 801144a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	2200      	movs	r2, #0
 8011450:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	2200      	movs	r2, #0
 8011456:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	2200      	movs	r2, #0
 801145c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	689b      	ldr	r3, [r3, #8]
 8011462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011466:	d107      	bne.n	8011478 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	681a      	ldr	r2, [r3, #0]
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011476:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011482:	2b40      	cmp	r3, #64	; 0x40
 8011484:	d007      	beq.n	8011496 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	681a      	ldr	r2, [r3, #0]
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011494:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	68db      	ldr	r3, [r3, #12]
 801149a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801149e:	d14b      	bne.n	8011538 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	685b      	ldr	r3, [r3, #4]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d002      	beq.n	80114ae <HAL_SPI_Transmit+0xe6>
 80114a8:	8afb      	ldrh	r3, [r7, #22]
 80114aa:	2b01      	cmp	r3, #1
 80114ac:	d13e      	bne.n	801152c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114b2:	881a      	ldrh	r2, [r3, #0]
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114be:	1c9a      	adds	r2, r3, #2
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80114c8:	b29b      	uxth	r3, r3
 80114ca:	3b01      	subs	r3, #1
 80114cc:	b29a      	uxth	r2, r3
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80114d2:	e02b      	b.n	801152c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	689b      	ldr	r3, [r3, #8]
 80114da:	f003 0302 	and.w	r3, r3, #2
 80114de:	2b02      	cmp	r3, #2
 80114e0:	d112      	bne.n	8011508 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114e6:	881a      	ldrh	r2, [r3, #0]
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114f2:	1c9a      	adds	r2, r3, #2
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80114fc:	b29b      	uxth	r3, r3
 80114fe:	3b01      	subs	r3, #1
 8011500:	b29a      	uxth	r2, r3
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	86da      	strh	r2, [r3, #54]	; 0x36
 8011506:	e011      	b.n	801152c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011508:	f7fd f922 	bl	800e750 <HAL_GetTick>
 801150c:	4602      	mov	r2, r0
 801150e:	69bb      	ldr	r3, [r7, #24]
 8011510:	1ad3      	subs	r3, r2, r3
 8011512:	683a      	ldr	r2, [r7, #0]
 8011514:	429a      	cmp	r2, r3
 8011516:	d803      	bhi.n	8011520 <HAL_SPI_Transmit+0x158>
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801151e:	d102      	bne.n	8011526 <HAL_SPI_Transmit+0x15e>
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d102      	bne.n	801152c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8011526:	2303      	movs	r3, #3
 8011528:	77fb      	strb	r3, [r7, #31]
          goto error;
 801152a:	e074      	b.n	8011616 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011530:	b29b      	uxth	r3, r3
 8011532:	2b00      	cmp	r3, #0
 8011534:	d1ce      	bne.n	80114d4 <HAL_SPI_Transmit+0x10c>
 8011536:	e04c      	b.n	80115d2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	685b      	ldr	r3, [r3, #4]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d002      	beq.n	8011546 <HAL_SPI_Transmit+0x17e>
 8011540:	8afb      	ldrh	r3, [r7, #22]
 8011542:	2b01      	cmp	r3, #1
 8011544:	d140      	bne.n	80115c8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	330c      	adds	r3, #12
 8011550:	7812      	ldrb	r2, [r2, #0]
 8011552:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011558:	1c5a      	adds	r2, r3, #1
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011562:	b29b      	uxth	r3, r3
 8011564:	3b01      	subs	r3, #1
 8011566:	b29a      	uxth	r2, r3
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801156c:	e02c      	b.n	80115c8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	689b      	ldr	r3, [r3, #8]
 8011574:	f003 0302 	and.w	r3, r3, #2
 8011578:	2b02      	cmp	r3, #2
 801157a:	d113      	bne.n	80115a4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	330c      	adds	r3, #12
 8011586:	7812      	ldrb	r2, [r2, #0]
 8011588:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801158e:	1c5a      	adds	r2, r3, #1
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011598:	b29b      	uxth	r3, r3
 801159a:	3b01      	subs	r3, #1
 801159c:	b29a      	uxth	r2, r3
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80115a2:	e011      	b.n	80115c8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80115a4:	f7fd f8d4 	bl	800e750 <HAL_GetTick>
 80115a8:	4602      	mov	r2, r0
 80115aa:	69bb      	ldr	r3, [r7, #24]
 80115ac:	1ad3      	subs	r3, r2, r3
 80115ae:	683a      	ldr	r2, [r7, #0]
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d803      	bhi.n	80115bc <HAL_SPI_Transmit+0x1f4>
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ba:	d102      	bne.n	80115c2 <HAL_SPI_Transmit+0x1fa>
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d102      	bne.n	80115c8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80115c2:	2303      	movs	r3, #3
 80115c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80115c6:	e026      	b.n	8011616 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80115cc:	b29b      	uxth	r3, r3
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d1cd      	bne.n	801156e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80115d2:	69ba      	ldr	r2, [r7, #24]
 80115d4:	6839      	ldr	r1, [r7, #0]
 80115d6:	68f8      	ldr	r0, [r7, #12]
 80115d8:	f000 fba4 	bl	8011d24 <SPI_EndRxTxTransaction>
 80115dc:	4603      	mov	r3, r0
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d002      	beq.n	80115e8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	2220      	movs	r2, #32
 80115e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	689b      	ldr	r3, [r3, #8]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d10a      	bne.n	8011606 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80115f0:	2300      	movs	r3, #0
 80115f2:	613b      	str	r3, [r7, #16]
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	68db      	ldr	r3, [r3, #12]
 80115fa:	613b      	str	r3, [r7, #16]
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	689b      	ldr	r3, [r3, #8]
 8011602:	613b      	str	r3, [r7, #16]
 8011604:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801160a:	2b00      	cmp	r3, #0
 801160c:	d002      	beq.n	8011614 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 801160e:	2301      	movs	r3, #1
 8011610:	77fb      	strb	r3, [r7, #31]
 8011612:	e000      	b.n	8011616 <HAL_SPI_Transmit+0x24e>
  }

error:
 8011614:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	2201      	movs	r2, #1
 801161a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	2200      	movs	r2, #0
 8011622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011626:	7ffb      	ldrb	r3, [r7, #31]
}
 8011628:	4618      	mov	r0, r3
 801162a:	3720      	adds	r7, #32
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}

08011630 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b088      	sub	sp, #32
 8011634:	af02      	add	r7, sp, #8
 8011636:	60f8      	str	r0, [r7, #12]
 8011638:	60b9      	str	r1, [r7, #8]
 801163a:	603b      	str	r3, [r7, #0]
 801163c:	4613      	mov	r3, r2
 801163e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011640:	2300      	movs	r3, #0
 8011642:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	685b      	ldr	r3, [r3, #4]
 8011648:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801164c:	d112      	bne.n	8011674 <HAL_SPI_Receive+0x44>
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	689b      	ldr	r3, [r3, #8]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d10e      	bne.n	8011674 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	2204      	movs	r2, #4
 801165a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801165e:	88fa      	ldrh	r2, [r7, #6]
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	9300      	str	r3, [sp, #0]
 8011664:	4613      	mov	r3, r2
 8011666:	68ba      	ldr	r2, [r7, #8]
 8011668:	68b9      	ldr	r1, [r7, #8]
 801166a:	68f8      	ldr	r0, [r7, #12]
 801166c:	f000 f8e9 	bl	8011842 <HAL_SPI_TransmitReceive>
 8011670:	4603      	mov	r3, r0
 8011672:	e0e2      	b.n	801183a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801167a:	2b01      	cmp	r3, #1
 801167c:	d101      	bne.n	8011682 <HAL_SPI_Receive+0x52>
 801167e:	2302      	movs	r3, #2
 8011680:	e0db      	b.n	801183a <HAL_SPI_Receive+0x20a>
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	2201      	movs	r2, #1
 8011686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801168a:	f7fd f861 	bl	800e750 <HAL_GetTick>
 801168e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011696:	b2db      	uxtb	r3, r3
 8011698:	2b01      	cmp	r3, #1
 801169a:	d002      	beq.n	80116a2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801169c:	2302      	movs	r3, #2
 801169e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80116a0:	e0c2      	b.n	8011828 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d002      	beq.n	80116ae <HAL_SPI_Receive+0x7e>
 80116a8:	88fb      	ldrh	r3, [r7, #6]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d102      	bne.n	80116b4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80116ae:	2301      	movs	r3, #1
 80116b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80116b2:	e0b9      	b.n	8011828 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	2204      	movs	r2, #4
 80116b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	2200      	movs	r2, #0
 80116c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	68ba      	ldr	r2, [r7, #8]
 80116c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	88fa      	ldrh	r2, [r7, #6]
 80116cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	88fa      	ldrh	r2, [r7, #6]
 80116d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	2200      	movs	r2, #0
 80116d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	2200      	movs	r2, #0
 80116de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	2200      	movs	r2, #0
 80116e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	2200      	movs	r2, #0
 80116ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	2200      	movs	r2, #0
 80116f0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	689b      	ldr	r3, [r3, #8]
 80116f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80116fa:	d107      	bne.n	801170c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801170a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011716:	2b40      	cmp	r3, #64	; 0x40
 8011718:	d007      	beq.n	801172a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	681a      	ldr	r2, [r3, #0]
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011728:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	68db      	ldr	r3, [r3, #12]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d162      	bne.n	80117f8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8011732:	e02e      	b.n	8011792 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	689b      	ldr	r3, [r3, #8]
 801173a:	f003 0301 	and.w	r3, r3, #1
 801173e:	2b01      	cmp	r3, #1
 8011740:	d115      	bne.n	801176e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	f103 020c 	add.w	r2, r3, #12
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801174e:	7812      	ldrb	r2, [r2, #0]
 8011750:	b2d2      	uxtb	r2, r2
 8011752:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011758:	1c5a      	adds	r2, r3, #1
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011762:	b29b      	uxth	r3, r3
 8011764:	3b01      	subs	r3, #1
 8011766:	b29a      	uxth	r2, r3
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801176c:	e011      	b.n	8011792 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801176e:	f7fc ffef 	bl	800e750 <HAL_GetTick>
 8011772:	4602      	mov	r2, r0
 8011774:	693b      	ldr	r3, [r7, #16]
 8011776:	1ad3      	subs	r3, r2, r3
 8011778:	683a      	ldr	r2, [r7, #0]
 801177a:	429a      	cmp	r2, r3
 801177c:	d803      	bhi.n	8011786 <HAL_SPI_Receive+0x156>
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011784:	d102      	bne.n	801178c <HAL_SPI_Receive+0x15c>
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d102      	bne.n	8011792 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 801178c:	2303      	movs	r3, #3
 801178e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8011790:	e04a      	b.n	8011828 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011796:	b29b      	uxth	r3, r3
 8011798:	2b00      	cmp	r3, #0
 801179a:	d1cb      	bne.n	8011734 <HAL_SPI_Receive+0x104>
 801179c:	e031      	b.n	8011802 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	689b      	ldr	r3, [r3, #8]
 80117a4:	f003 0301 	and.w	r3, r3, #1
 80117a8:	2b01      	cmp	r3, #1
 80117aa:	d113      	bne.n	80117d4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	68da      	ldr	r2, [r3, #12]
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117b6:	b292      	uxth	r2, r2
 80117b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117be:	1c9a      	adds	r2, r3, #2
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	3b01      	subs	r3, #1
 80117cc:	b29a      	uxth	r2, r3
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80117d2:	e011      	b.n	80117f8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80117d4:	f7fc ffbc 	bl	800e750 <HAL_GetTick>
 80117d8:	4602      	mov	r2, r0
 80117da:	693b      	ldr	r3, [r7, #16]
 80117dc:	1ad3      	subs	r3, r2, r3
 80117de:	683a      	ldr	r2, [r7, #0]
 80117e0:	429a      	cmp	r2, r3
 80117e2:	d803      	bhi.n	80117ec <HAL_SPI_Receive+0x1bc>
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117ea:	d102      	bne.n	80117f2 <HAL_SPI_Receive+0x1c2>
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d102      	bne.n	80117f8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80117f2:	2303      	movs	r3, #3
 80117f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80117f6:	e017      	b.n	8011828 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80117fc:	b29b      	uxth	r3, r3
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d1cd      	bne.n	801179e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011802:	693a      	ldr	r2, [r7, #16]
 8011804:	6839      	ldr	r1, [r7, #0]
 8011806:	68f8      	ldr	r0, [r7, #12]
 8011808:	f000 fa27 	bl	8011c5a <SPI_EndRxTransaction>
 801180c:	4603      	mov	r3, r0
 801180e:	2b00      	cmp	r3, #0
 8011810:	d002      	beq.n	8011818 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	2220      	movs	r2, #32
 8011816:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801181c:	2b00      	cmp	r3, #0
 801181e:	d002      	beq.n	8011826 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8011820:	2301      	movs	r3, #1
 8011822:	75fb      	strb	r3, [r7, #23]
 8011824:	e000      	b.n	8011828 <HAL_SPI_Receive+0x1f8>
  }

error :
 8011826:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	2201      	movs	r2, #1
 801182c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	2200      	movs	r2, #0
 8011834:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011838:	7dfb      	ldrb	r3, [r7, #23]
}
 801183a:	4618      	mov	r0, r3
 801183c:	3718      	adds	r7, #24
 801183e:	46bd      	mov	sp, r7
 8011840:	bd80      	pop	{r7, pc}

08011842 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8011842:	b580      	push	{r7, lr}
 8011844:	b08c      	sub	sp, #48	; 0x30
 8011846:	af00      	add	r7, sp, #0
 8011848:	60f8      	str	r0, [r7, #12]
 801184a:	60b9      	str	r1, [r7, #8]
 801184c:	607a      	str	r2, [r7, #4]
 801184e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8011850:	2301      	movs	r3, #1
 8011852:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8011854:	2300      	movs	r3, #0
 8011856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011860:	2b01      	cmp	r3, #1
 8011862:	d101      	bne.n	8011868 <HAL_SPI_TransmitReceive+0x26>
 8011864:	2302      	movs	r3, #2
 8011866:	e18a      	b.n	8011b7e <HAL_SPI_TransmitReceive+0x33c>
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	2201      	movs	r2, #1
 801186c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011870:	f7fc ff6e 	bl	800e750 <HAL_GetTick>
 8011874:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801187c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	685b      	ldr	r3, [r3, #4]
 8011884:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8011886:	887b      	ldrh	r3, [r7, #2]
 8011888:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801188a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801188e:	2b01      	cmp	r3, #1
 8011890:	d00f      	beq.n	80118b2 <HAL_SPI_TransmitReceive+0x70>
 8011892:	69fb      	ldr	r3, [r7, #28]
 8011894:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011898:	d107      	bne.n	80118aa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	689b      	ldr	r3, [r3, #8]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d103      	bne.n	80118aa <HAL_SPI_TransmitReceive+0x68>
 80118a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80118a6:	2b04      	cmp	r3, #4
 80118a8:	d003      	beq.n	80118b2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80118aa:	2302      	movs	r3, #2
 80118ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80118b0:	e15b      	b.n	8011b6a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80118b2:	68bb      	ldr	r3, [r7, #8]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d005      	beq.n	80118c4 <HAL_SPI_TransmitReceive+0x82>
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d002      	beq.n	80118c4 <HAL_SPI_TransmitReceive+0x82>
 80118be:	887b      	ldrh	r3, [r7, #2]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d103      	bne.n	80118cc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80118c4:	2301      	movs	r3, #1
 80118c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80118ca:	e14e      	b.n	8011b6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80118d2:	b2db      	uxtb	r3, r3
 80118d4:	2b04      	cmp	r3, #4
 80118d6:	d003      	beq.n	80118e0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	2205      	movs	r2, #5
 80118dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	2200      	movs	r2, #0
 80118e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	687a      	ldr	r2, [r7, #4]
 80118ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	887a      	ldrh	r2, [r7, #2]
 80118f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	887a      	ldrh	r2, [r7, #2]
 80118f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	68ba      	ldr	r2, [r7, #8]
 80118fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	887a      	ldrh	r2, [r7, #2]
 8011902:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	887a      	ldrh	r2, [r7, #2]
 8011908:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	2200      	movs	r2, #0
 801190e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	2200      	movs	r2, #0
 8011914:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011920:	2b40      	cmp	r3, #64	; 0x40
 8011922:	d007      	beq.n	8011934 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	681a      	ldr	r2, [r3, #0]
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011932:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	68db      	ldr	r3, [r3, #12]
 8011938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801193c:	d178      	bne.n	8011a30 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	685b      	ldr	r3, [r3, #4]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d002      	beq.n	801194c <HAL_SPI_TransmitReceive+0x10a>
 8011946:	8b7b      	ldrh	r3, [r7, #26]
 8011948:	2b01      	cmp	r3, #1
 801194a:	d166      	bne.n	8011a1a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011950:	881a      	ldrh	r2, [r3, #0]
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801195c:	1c9a      	adds	r2, r3, #2
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011966:	b29b      	uxth	r3, r3
 8011968:	3b01      	subs	r3, #1
 801196a:	b29a      	uxth	r2, r3
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011970:	e053      	b.n	8011a1a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	689b      	ldr	r3, [r3, #8]
 8011978:	f003 0302 	and.w	r3, r3, #2
 801197c:	2b02      	cmp	r3, #2
 801197e:	d11b      	bne.n	80119b8 <HAL_SPI_TransmitReceive+0x176>
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011984:	b29b      	uxth	r3, r3
 8011986:	2b00      	cmp	r3, #0
 8011988:	d016      	beq.n	80119b8 <HAL_SPI_TransmitReceive+0x176>
 801198a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801198c:	2b01      	cmp	r3, #1
 801198e:	d113      	bne.n	80119b8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011994:	881a      	ldrh	r2, [r3, #0]
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119a0:	1c9a      	adds	r2, r3, #2
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80119aa:	b29b      	uxth	r3, r3
 80119ac:	3b01      	subs	r3, #1
 80119ae:	b29a      	uxth	r2, r3
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80119b4:	2300      	movs	r3, #0
 80119b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	689b      	ldr	r3, [r3, #8]
 80119be:	f003 0301 	and.w	r3, r3, #1
 80119c2:	2b01      	cmp	r3, #1
 80119c4:	d119      	bne.n	80119fa <HAL_SPI_TransmitReceive+0x1b8>
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80119ca:	b29b      	uxth	r3, r3
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d014      	beq.n	80119fa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	68da      	ldr	r2, [r3, #12]
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119da:	b292      	uxth	r2, r2
 80119dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119e2:	1c9a      	adds	r2, r3, #2
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80119ec:	b29b      	uxth	r3, r3
 80119ee:	3b01      	subs	r3, #1
 80119f0:	b29a      	uxth	r2, r3
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80119f6:	2301      	movs	r3, #1
 80119f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80119fa:	f7fc fea9 	bl	800e750 <HAL_GetTick>
 80119fe:	4602      	mov	r2, r0
 8011a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a02:	1ad3      	subs	r3, r2, r3
 8011a04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d807      	bhi.n	8011a1a <HAL_SPI_TransmitReceive+0x1d8>
 8011a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a10:	d003      	beq.n	8011a1a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8011a12:	2303      	movs	r3, #3
 8011a14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8011a18:	e0a7      	b.n	8011b6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011a1e:	b29b      	uxth	r3, r3
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d1a6      	bne.n	8011972 <HAL_SPI_TransmitReceive+0x130>
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011a28:	b29b      	uxth	r3, r3
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d1a1      	bne.n	8011972 <HAL_SPI_TransmitReceive+0x130>
 8011a2e:	e07c      	b.n	8011b2a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	685b      	ldr	r3, [r3, #4]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d002      	beq.n	8011a3e <HAL_SPI_TransmitReceive+0x1fc>
 8011a38:	8b7b      	ldrh	r3, [r7, #26]
 8011a3a:	2b01      	cmp	r3, #1
 8011a3c:	d16b      	bne.n	8011b16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	330c      	adds	r3, #12
 8011a48:	7812      	ldrb	r2, [r2, #0]
 8011a4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a50:	1c5a      	adds	r2, r3, #1
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011a5a:	b29b      	uxth	r3, r3
 8011a5c:	3b01      	subs	r3, #1
 8011a5e:	b29a      	uxth	r2, r3
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011a64:	e057      	b.n	8011b16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	689b      	ldr	r3, [r3, #8]
 8011a6c:	f003 0302 	and.w	r3, r3, #2
 8011a70:	2b02      	cmp	r3, #2
 8011a72:	d11c      	bne.n	8011aae <HAL_SPI_TransmitReceive+0x26c>
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011a78:	b29b      	uxth	r3, r3
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d017      	beq.n	8011aae <HAL_SPI_TransmitReceive+0x26c>
 8011a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a80:	2b01      	cmp	r3, #1
 8011a82:	d114      	bne.n	8011aae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	330c      	adds	r3, #12
 8011a8e:	7812      	ldrb	r2, [r2, #0]
 8011a90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a96:	1c5a      	adds	r2, r3, #1
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	3b01      	subs	r3, #1
 8011aa4:	b29a      	uxth	r2, r3
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	689b      	ldr	r3, [r3, #8]
 8011ab4:	f003 0301 	and.w	r3, r3, #1
 8011ab8:	2b01      	cmp	r3, #1
 8011aba:	d119      	bne.n	8011af0 <HAL_SPI_TransmitReceive+0x2ae>
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011ac0:	b29b      	uxth	r3, r3
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d014      	beq.n	8011af0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	68da      	ldr	r2, [r3, #12]
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ad0:	b2d2      	uxtb	r2, r2
 8011ad2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ad8:	1c5a      	adds	r2, r3, #1
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011ae2:	b29b      	uxth	r3, r3
 8011ae4:	3b01      	subs	r3, #1
 8011ae6:	b29a      	uxth	r2, r3
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011aec:	2301      	movs	r3, #1
 8011aee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011af0:	f7fc fe2e 	bl	800e750 <HAL_GetTick>
 8011af4:	4602      	mov	r2, r0
 8011af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af8:	1ad3      	subs	r3, r2, r3
 8011afa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011afc:	429a      	cmp	r2, r3
 8011afe:	d803      	bhi.n	8011b08 <HAL_SPI_TransmitReceive+0x2c6>
 8011b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b06:	d102      	bne.n	8011b0e <HAL_SPI_TransmitReceive+0x2cc>
 8011b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d103      	bne.n	8011b16 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8011b0e:	2303      	movs	r3, #3
 8011b10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8011b14:	e029      	b.n	8011b6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011b1a:	b29b      	uxth	r3, r3
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d1a2      	bne.n	8011a66 <HAL_SPI_TransmitReceive+0x224>
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011b24:	b29b      	uxth	r3, r3
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d19d      	bne.n	8011a66 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011b2e:	68f8      	ldr	r0, [r7, #12]
 8011b30:	f000 f8f8 	bl	8011d24 <SPI_EndRxTxTransaction>
 8011b34:	4603      	mov	r3, r0
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d006      	beq.n	8011b48 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	2220      	movs	r2, #32
 8011b44:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8011b46:	e010      	b.n	8011b6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	689b      	ldr	r3, [r3, #8]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d10b      	bne.n	8011b68 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011b50:	2300      	movs	r3, #0
 8011b52:	617b      	str	r3, [r7, #20]
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	68db      	ldr	r3, [r3, #12]
 8011b5a:	617b      	str	r3, [r7, #20]
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	689b      	ldr	r3, [r3, #8]
 8011b62:	617b      	str	r3, [r7, #20]
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	e000      	b.n	8011b6a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8011b68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	2201      	movs	r2, #1
 8011b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2200      	movs	r2, #0
 8011b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011b7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3730      	adds	r7, #48	; 0x30
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}

08011b86 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011b86:	b580      	push	{r7, lr}
 8011b88:	b084      	sub	sp, #16
 8011b8a:	af00      	add	r7, sp, #0
 8011b8c:	60f8      	str	r0, [r7, #12]
 8011b8e:	60b9      	str	r1, [r7, #8]
 8011b90:	603b      	str	r3, [r7, #0]
 8011b92:	4613      	mov	r3, r2
 8011b94:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011b96:	e04c      	b.n	8011c32 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011b98:	683b      	ldr	r3, [r7, #0]
 8011b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b9e:	d048      	beq.n	8011c32 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8011ba0:	f7fc fdd6 	bl	800e750 <HAL_GetTick>
 8011ba4:	4602      	mov	r2, r0
 8011ba6:	69bb      	ldr	r3, [r7, #24]
 8011ba8:	1ad3      	subs	r3, r2, r3
 8011baa:	683a      	ldr	r2, [r7, #0]
 8011bac:	429a      	cmp	r2, r3
 8011bae:	d902      	bls.n	8011bb6 <SPI_WaitFlagStateUntilTimeout+0x30>
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d13d      	bne.n	8011c32 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	685a      	ldr	r2, [r3, #4]
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8011bc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	685b      	ldr	r3, [r3, #4]
 8011bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011bce:	d111      	bne.n	8011bf4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	689b      	ldr	r3, [r3, #8]
 8011bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011bd8:	d004      	beq.n	8011be4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	689b      	ldr	r3, [r3, #8]
 8011bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011be2:	d107      	bne.n	8011bf4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	681a      	ldr	r2, [r3, #0]
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011bf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011bfc:	d10f      	bne.n	8011c1e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	681a      	ldr	r2, [r3, #0]
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011c0c:	601a      	str	r2, [r3, #0]
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	681a      	ldr	r2, [r3, #0]
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011c1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	2201      	movs	r2, #1
 8011c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	2200      	movs	r2, #0
 8011c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8011c2e:	2303      	movs	r3, #3
 8011c30:	e00f      	b.n	8011c52 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	689a      	ldr	r2, [r3, #8]
 8011c38:	68bb      	ldr	r3, [r7, #8]
 8011c3a:	4013      	ands	r3, r2
 8011c3c:	68ba      	ldr	r2, [r7, #8]
 8011c3e:	429a      	cmp	r2, r3
 8011c40:	bf0c      	ite	eq
 8011c42:	2301      	moveq	r3, #1
 8011c44:	2300      	movne	r3, #0
 8011c46:	b2db      	uxtb	r3, r3
 8011c48:	461a      	mov	r2, r3
 8011c4a:	79fb      	ldrb	r3, [r7, #7]
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	d1a3      	bne.n	8011b98 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8011c50:	2300      	movs	r3, #0
}
 8011c52:	4618      	mov	r0, r3
 8011c54:	3710      	adds	r7, #16
 8011c56:	46bd      	mov	sp, r7
 8011c58:	bd80      	pop	{r7, pc}

08011c5a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8011c5a:	b580      	push	{r7, lr}
 8011c5c:	b086      	sub	sp, #24
 8011c5e:	af02      	add	r7, sp, #8
 8011c60:	60f8      	str	r0, [r7, #12]
 8011c62:	60b9      	str	r1, [r7, #8]
 8011c64:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	685b      	ldr	r3, [r3, #4]
 8011c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011c6e:	d111      	bne.n	8011c94 <SPI_EndRxTransaction+0x3a>
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	689b      	ldr	r3, [r3, #8]
 8011c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011c78:	d004      	beq.n	8011c84 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	689b      	ldr	r3, [r3, #8]
 8011c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011c82:	d107      	bne.n	8011c94 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	681a      	ldr	r2, [r3, #0]
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011c92:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	685b      	ldr	r3, [r3, #4]
 8011c98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011c9c:	d12a      	bne.n	8011cf4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	689b      	ldr	r3, [r3, #8]
 8011ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011ca6:	d012      	beq.n	8011cce <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	9300      	str	r3, [sp, #0]
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	2200      	movs	r2, #0
 8011cb0:	2180      	movs	r1, #128	; 0x80
 8011cb2:	68f8      	ldr	r0, [r7, #12]
 8011cb4:	f7ff ff67 	bl	8011b86 <SPI_WaitFlagStateUntilTimeout>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d02d      	beq.n	8011d1a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cc2:	f043 0220 	orr.w	r2, r3, #32
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8011cca:	2303      	movs	r3, #3
 8011ccc:	e026      	b.n	8011d1c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	9300      	str	r3, [sp, #0]
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	2101      	movs	r1, #1
 8011cd8:	68f8      	ldr	r0, [r7, #12]
 8011cda:	f7ff ff54 	bl	8011b86 <SPI_WaitFlagStateUntilTimeout>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d01a      	beq.n	8011d1a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ce8:	f043 0220 	orr.w	r2, r3, #32
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8011cf0:	2303      	movs	r3, #3
 8011cf2:	e013      	b.n	8011d1c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	9300      	str	r3, [sp, #0]
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	2101      	movs	r1, #1
 8011cfe:	68f8      	ldr	r0, [r7, #12]
 8011d00:	f7ff ff41 	bl	8011b86 <SPI_WaitFlagStateUntilTimeout>
 8011d04:	4603      	mov	r3, r0
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d007      	beq.n	8011d1a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d0e:	f043 0220 	orr.w	r2, r3, #32
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8011d16:	2303      	movs	r3, #3
 8011d18:	e000      	b.n	8011d1c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8011d1a:	2300      	movs	r3, #0
}
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	3710      	adds	r7, #16
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bd80      	pop	{r7, pc}

08011d24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b088      	sub	sp, #32
 8011d28:	af02      	add	r7, sp, #8
 8011d2a:	60f8      	str	r0, [r7, #12]
 8011d2c:	60b9      	str	r1, [r7, #8]
 8011d2e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8011d30:	4b1b      	ldr	r3, [pc, #108]	; (8011da0 <SPI_EndRxTxTransaction+0x7c>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	4a1b      	ldr	r2, [pc, #108]	; (8011da4 <SPI_EndRxTxTransaction+0x80>)
 8011d36:	fba2 2303 	umull	r2, r3, r2, r3
 8011d3a:	0d5b      	lsrs	r3, r3, #21
 8011d3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011d40:	fb02 f303 	mul.w	r3, r2, r3
 8011d44:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	685b      	ldr	r3, [r3, #4]
 8011d4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011d4e:	d112      	bne.n	8011d76 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	9300      	str	r3, [sp, #0]
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	2200      	movs	r2, #0
 8011d58:	2180      	movs	r1, #128	; 0x80
 8011d5a:	68f8      	ldr	r0, [r7, #12]
 8011d5c:	f7ff ff13 	bl	8011b86 <SPI_WaitFlagStateUntilTimeout>
 8011d60:	4603      	mov	r3, r0
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d016      	beq.n	8011d94 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d6a:	f043 0220 	orr.w	r2, r3, #32
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8011d72:	2303      	movs	r3, #3
 8011d74:	e00f      	b.n	8011d96 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8011d76:	697b      	ldr	r3, [r7, #20]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d00a      	beq.n	8011d92 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8011d7c:	697b      	ldr	r3, [r7, #20]
 8011d7e:	3b01      	subs	r3, #1
 8011d80:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	689b      	ldr	r3, [r3, #8]
 8011d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d8c:	2b80      	cmp	r3, #128	; 0x80
 8011d8e:	d0f2      	beq.n	8011d76 <SPI_EndRxTxTransaction+0x52>
 8011d90:	e000      	b.n	8011d94 <SPI_EndRxTxTransaction+0x70>
        break;
 8011d92:	bf00      	nop
  }

  return HAL_OK;
 8011d94:	2300      	movs	r3, #0
}
 8011d96:	4618      	mov	r0, r3
 8011d98:	3718      	adds	r7, #24
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}
 8011d9e:	bf00      	nop
 8011da0:	2000000c 	.word	0x2000000c
 8011da4:	165e9f81 	.word	0x165e9f81

08011da8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b082      	sub	sp, #8
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d101      	bne.n	8011dba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011db6:	2301      	movs	r3, #1
 8011db8:	e01d      	b.n	8011df6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011dc0:	b2db      	uxtb	r3, r3
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d106      	bne.n	8011dd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2200      	movs	r2, #0
 8011dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	f7fc fa2a 	bl	800e228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	2202      	movs	r2, #2
 8011dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	681a      	ldr	r2, [r3, #0]
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	3304      	adds	r3, #4
 8011de4:	4619      	mov	r1, r3
 8011de6:	4610      	mov	r0, r2
 8011de8:	f000 fb82 	bl	80124f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2201      	movs	r2, #1
 8011df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011df4:	2300      	movs	r3, #0
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3708      	adds	r7, #8
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}

08011dfe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011dfe:	b480      	push	{r7}
 8011e00:	b085      	sub	sp, #20
 8011e02:	af00      	add	r7, sp, #0
 8011e04:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	68da      	ldr	r2, [r3, #12]
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	f042 0201 	orr.w	r2, r2, #1
 8011e14:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	689b      	ldr	r3, [r3, #8]
 8011e1c:	f003 0307 	and.w	r3, r3, #7
 8011e20:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	2b06      	cmp	r3, #6
 8011e26:	d007      	beq.n	8011e38 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	681a      	ldr	r2, [r3, #0]
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	f042 0201 	orr.w	r2, r2, #1
 8011e36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011e38:	2300      	movs	r3, #0
}
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	3714      	adds	r7, #20
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e44:	4770      	bx	lr

08011e46 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8011e46:	b480      	push	{r7}
 8011e48:	b083      	sub	sp, #12
 8011e4a:	af00      	add	r7, sp, #0
 8011e4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	68da      	ldr	r2, [r3, #12]
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	f022 0201 	bic.w	r2, r2, #1
 8011e5c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	6a1a      	ldr	r2, [r3, #32]
 8011e64:	f241 1311 	movw	r3, #4369	; 0x1111
 8011e68:	4013      	ands	r3, r2
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d10f      	bne.n	8011e8e <HAL_TIM_Base_Stop_IT+0x48>
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	6a1a      	ldr	r2, [r3, #32]
 8011e74:	f240 4344 	movw	r3, #1092	; 0x444
 8011e78:	4013      	ands	r3, r2
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d107      	bne.n	8011e8e <HAL_TIM_Base_Stop_IT+0x48>
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	681a      	ldr	r2, [r3, #0]
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	f022 0201 	bic.w	r2, r2, #1
 8011e8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011e8e:	2300      	movs	r3, #0
}
 8011e90:	4618      	mov	r0, r3
 8011e92:	370c      	adds	r7, #12
 8011e94:	46bd      	mov	sp, r7
 8011e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9a:	4770      	bx	lr

08011e9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b082      	sub	sp, #8
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d101      	bne.n	8011eae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011eaa:	2301      	movs	r3, #1
 8011eac:	e01d      	b.n	8011eea <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011eb4:	b2db      	uxtb	r3, r3
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d106      	bne.n	8011ec8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	f7fc f8e6 	bl	800e094 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2202      	movs	r2, #2
 8011ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	681a      	ldr	r2, [r3, #0]
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	3304      	adds	r3, #4
 8011ed8:	4619      	mov	r1, r3
 8011eda:	4610      	mov	r0, r2
 8011edc:	f000 fb08 	bl	80124f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2201      	movs	r2, #1
 8011ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011ee8:	2300      	movs	r3, #0
}
 8011eea:	4618      	mov	r0, r3
 8011eec:	3708      	adds	r7, #8
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	bd80      	pop	{r7, pc}
	...

08011ef4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b084      	sub	sp, #16
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
 8011efc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	2201      	movs	r2, #1
 8011f04:	6839      	ldr	r1, [r7, #0]
 8011f06:	4618      	mov	r0, r3
 8011f08:	f000 fd42 	bl	8012990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	4a15      	ldr	r2, [pc, #84]	; (8011f68 <HAL_TIM_PWM_Start+0x74>)
 8011f12:	4293      	cmp	r3, r2
 8011f14:	d004      	beq.n	8011f20 <HAL_TIM_PWM_Start+0x2c>
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	4a14      	ldr	r2, [pc, #80]	; (8011f6c <HAL_TIM_PWM_Start+0x78>)
 8011f1c:	4293      	cmp	r3, r2
 8011f1e:	d101      	bne.n	8011f24 <HAL_TIM_PWM_Start+0x30>
 8011f20:	2301      	movs	r3, #1
 8011f22:	e000      	b.n	8011f26 <HAL_TIM_PWM_Start+0x32>
 8011f24:	2300      	movs	r3, #0
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d007      	beq.n	8011f3a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011f38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	689b      	ldr	r3, [r3, #8]
 8011f40:	f003 0307 	and.w	r3, r3, #7
 8011f44:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	2b06      	cmp	r3, #6
 8011f4a:	d007      	beq.n	8011f5c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	681a      	ldr	r2, [r3, #0]
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	f042 0201 	orr.w	r2, r2, #1
 8011f5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011f5c:	2300      	movs	r3, #0
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3710      	adds	r7, #16
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	bf00      	nop
 8011f68:	40010000 	.word	0x40010000
 8011f6c:	40010400 	.word	0x40010400

08011f70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b086      	sub	sp, #24
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
 8011f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d101      	bne.n	8011f84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8011f80:	2301      	movs	r3, #1
 8011f82:	e083      	b.n	801208c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011f8a:	b2db      	uxtb	r3, r3
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d106      	bne.n	8011f9e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2200      	movs	r2, #0
 8011f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f7fc f8c7 	bl	800e12c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2202      	movs	r2, #2
 8011fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	689b      	ldr	r3, [r3, #8]
 8011fac:	687a      	ldr	r2, [r7, #4]
 8011fae:	6812      	ldr	r2, [r2, #0]
 8011fb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011fb4:	f023 0307 	bic.w	r3, r3, #7
 8011fb8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681a      	ldr	r2, [r3, #0]
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	3304      	adds	r3, #4
 8011fc2:	4619      	mov	r1, r3
 8011fc4:	4610      	mov	r0, r2
 8011fc6:	f000 fa93 	bl	80124f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	689b      	ldr	r3, [r3, #8]
 8011fd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	699b      	ldr	r3, [r3, #24]
 8011fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	6a1b      	ldr	r3, [r3, #32]
 8011fe0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	697a      	ldr	r2, [r7, #20]
 8011fe8:	4313      	orrs	r3, r2
 8011fea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8011fec:	693b      	ldr	r3, [r7, #16]
 8011fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011ff2:	f023 0303 	bic.w	r3, r3, #3
 8011ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	689a      	ldr	r2, [r3, #8]
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	699b      	ldr	r3, [r3, #24]
 8012000:	021b      	lsls	r3, r3, #8
 8012002:	4313      	orrs	r3, r2
 8012004:	693a      	ldr	r2, [r7, #16]
 8012006:	4313      	orrs	r3, r2
 8012008:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801200a:	693b      	ldr	r3, [r7, #16]
 801200c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8012010:	f023 030c 	bic.w	r3, r3, #12
 8012014:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8012016:	693b      	ldr	r3, [r7, #16]
 8012018:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801201c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012020:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	68da      	ldr	r2, [r3, #12]
 8012026:	683b      	ldr	r3, [r7, #0]
 8012028:	69db      	ldr	r3, [r3, #28]
 801202a:	021b      	lsls	r3, r3, #8
 801202c:	4313      	orrs	r3, r2
 801202e:	693a      	ldr	r2, [r7, #16]
 8012030:	4313      	orrs	r3, r2
 8012032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8012034:	683b      	ldr	r3, [r7, #0]
 8012036:	691b      	ldr	r3, [r3, #16]
 8012038:	011a      	lsls	r2, r3, #4
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	6a1b      	ldr	r3, [r3, #32]
 801203e:	031b      	lsls	r3, r3, #12
 8012040:	4313      	orrs	r3, r2
 8012042:	693a      	ldr	r2, [r7, #16]
 8012044:	4313      	orrs	r3, r2
 8012046:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801204e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8012056:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	685a      	ldr	r2, [r3, #4]
 801205c:	683b      	ldr	r3, [r7, #0]
 801205e:	695b      	ldr	r3, [r3, #20]
 8012060:	011b      	lsls	r3, r3, #4
 8012062:	4313      	orrs	r3, r2
 8012064:	68fa      	ldr	r2, [r7, #12]
 8012066:	4313      	orrs	r3, r2
 8012068:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	697a      	ldr	r2, [r7, #20]
 8012070:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	693a      	ldr	r2, [r7, #16]
 8012078:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	68fa      	ldr	r2, [r7, #12]
 8012080:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	2201      	movs	r2, #1
 8012086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801208a:	2300      	movs	r3, #0
}
 801208c:	4618      	mov	r0, r3
 801208e:	3718      	adds	r7, #24
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}

08012094 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b082      	sub	sp, #8
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d002      	beq.n	80120aa <HAL_TIM_Encoder_Start+0x16>
 80120a4:	2b04      	cmp	r3, #4
 80120a6:	d008      	beq.n	80120ba <HAL_TIM_Encoder_Start+0x26>
 80120a8:	e00f      	b.n	80120ca <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	2201      	movs	r2, #1
 80120b0:	2100      	movs	r1, #0
 80120b2:	4618      	mov	r0, r3
 80120b4:	f000 fc6c 	bl	8012990 <TIM_CCxChannelCmd>
      break;
 80120b8:	e016      	b.n	80120e8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	2201      	movs	r2, #1
 80120c0:	2104      	movs	r1, #4
 80120c2:	4618      	mov	r0, r3
 80120c4:	f000 fc64 	bl	8012990 <TIM_CCxChannelCmd>
      break;
 80120c8:	e00e      	b.n	80120e8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	2201      	movs	r2, #1
 80120d0:	2100      	movs	r1, #0
 80120d2:	4618      	mov	r0, r3
 80120d4:	f000 fc5c 	bl	8012990 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	2201      	movs	r2, #1
 80120de:	2104      	movs	r1, #4
 80120e0:	4618      	mov	r0, r3
 80120e2:	f000 fc55 	bl	8012990 <TIM_CCxChannelCmd>
      break;
 80120e6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	681a      	ldr	r2, [r3, #0]
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	f042 0201 	orr.w	r2, r2, #1
 80120f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80120f8:	2300      	movs	r3, #0
}
 80120fa:	4618      	mov	r0, r3
 80120fc:	3708      	adds	r7, #8
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}

08012102 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012102:	b580      	push	{r7, lr}
 8012104:	b082      	sub	sp, #8
 8012106:	af00      	add	r7, sp, #0
 8012108:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	691b      	ldr	r3, [r3, #16]
 8012110:	f003 0302 	and.w	r3, r3, #2
 8012114:	2b02      	cmp	r3, #2
 8012116:	d122      	bne.n	801215e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	68db      	ldr	r3, [r3, #12]
 801211e:	f003 0302 	and.w	r3, r3, #2
 8012122:	2b02      	cmp	r3, #2
 8012124:	d11b      	bne.n	801215e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	f06f 0202 	mvn.w	r2, #2
 801212e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2201      	movs	r2, #1
 8012134:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	699b      	ldr	r3, [r3, #24]
 801213c:	f003 0303 	and.w	r3, r3, #3
 8012140:	2b00      	cmp	r3, #0
 8012142:	d003      	beq.n	801214c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012144:	6878      	ldr	r0, [r7, #4]
 8012146:	f000 f9b5 	bl	80124b4 <HAL_TIM_IC_CaptureCallback>
 801214a:	e005      	b.n	8012158 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f000 f9a7 	bl	80124a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012152:	6878      	ldr	r0, [r7, #4]
 8012154:	f000 f9b8 	bl	80124c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	2200      	movs	r2, #0
 801215c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	691b      	ldr	r3, [r3, #16]
 8012164:	f003 0304 	and.w	r3, r3, #4
 8012168:	2b04      	cmp	r3, #4
 801216a:	d122      	bne.n	80121b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	68db      	ldr	r3, [r3, #12]
 8012172:	f003 0304 	and.w	r3, r3, #4
 8012176:	2b04      	cmp	r3, #4
 8012178:	d11b      	bne.n	80121b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	f06f 0204 	mvn.w	r2, #4
 8012182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	2202      	movs	r2, #2
 8012188:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	699b      	ldr	r3, [r3, #24]
 8012190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012194:	2b00      	cmp	r3, #0
 8012196:	d003      	beq.n	80121a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f000 f98b 	bl	80124b4 <HAL_TIM_IC_CaptureCallback>
 801219e:	e005      	b.n	80121ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f000 f97d 	bl	80124a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80121a6:	6878      	ldr	r0, [r7, #4]
 80121a8:	f000 f98e 	bl	80124c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2200      	movs	r2, #0
 80121b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	691b      	ldr	r3, [r3, #16]
 80121b8:	f003 0308 	and.w	r3, r3, #8
 80121bc:	2b08      	cmp	r3, #8
 80121be:	d122      	bne.n	8012206 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	68db      	ldr	r3, [r3, #12]
 80121c6:	f003 0308 	and.w	r3, r3, #8
 80121ca:	2b08      	cmp	r3, #8
 80121cc:	d11b      	bne.n	8012206 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	f06f 0208 	mvn.w	r2, #8
 80121d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2204      	movs	r2, #4
 80121dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	69db      	ldr	r3, [r3, #28]
 80121e4:	f003 0303 	and.w	r3, r3, #3
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d003      	beq.n	80121f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f000 f961 	bl	80124b4 <HAL_TIM_IC_CaptureCallback>
 80121f2:	e005      	b.n	8012200 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f000 f953 	bl	80124a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80121fa:	6878      	ldr	r0, [r7, #4]
 80121fc:	f000 f964 	bl	80124c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	2200      	movs	r2, #0
 8012204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	691b      	ldr	r3, [r3, #16]
 801220c:	f003 0310 	and.w	r3, r3, #16
 8012210:	2b10      	cmp	r3, #16
 8012212:	d122      	bne.n	801225a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	68db      	ldr	r3, [r3, #12]
 801221a:	f003 0310 	and.w	r3, r3, #16
 801221e:	2b10      	cmp	r3, #16
 8012220:	d11b      	bne.n	801225a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	f06f 0210 	mvn.w	r2, #16
 801222a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2208      	movs	r2, #8
 8012230:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	69db      	ldr	r3, [r3, #28]
 8012238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801223c:	2b00      	cmp	r3, #0
 801223e:	d003      	beq.n	8012248 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f000 f937 	bl	80124b4 <HAL_TIM_IC_CaptureCallback>
 8012246:	e005      	b.n	8012254 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012248:	6878      	ldr	r0, [r7, #4]
 801224a:	f000 f929 	bl	80124a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f000 f93a 	bl	80124c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2200      	movs	r2, #0
 8012258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	691b      	ldr	r3, [r3, #16]
 8012260:	f003 0301 	and.w	r3, r3, #1
 8012264:	2b01      	cmp	r3, #1
 8012266:	d10e      	bne.n	8012286 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	68db      	ldr	r3, [r3, #12]
 801226e:	f003 0301 	and.w	r3, r3, #1
 8012272:	2b01      	cmp	r3, #1
 8012274:	d107      	bne.n	8012286 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	f06f 0201 	mvn.w	r2, #1
 801227e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	f7fa fabd 	bl	800c800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	691b      	ldr	r3, [r3, #16]
 801228c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012290:	2b80      	cmp	r3, #128	; 0x80
 8012292:	d10e      	bne.n	80122b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	68db      	ldr	r3, [r3, #12]
 801229a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801229e:	2b80      	cmp	r3, #128	; 0x80
 80122a0:	d107      	bne.n	80122b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80122aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f000 fc6d 	bl	8012b8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	691b      	ldr	r3, [r3, #16]
 80122b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122bc:	2b40      	cmp	r3, #64	; 0x40
 80122be:	d10e      	bne.n	80122de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	68db      	ldr	r3, [r3, #12]
 80122c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122ca:	2b40      	cmp	r3, #64	; 0x40
 80122cc:	d107      	bne.n	80122de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80122d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80122d8:	6878      	ldr	r0, [r7, #4]
 80122da:	f000 f8ff 	bl	80124dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	691b      	ldr	r3, [r3, #16]
 80122e4:	f003 0320 	and.w	r3, r3, #32
 80122e8:	2b20      	cmp	r3, #32
 80122ea:	d10e      	bne.n	801230a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	68db      	ldr	r3, [r3, #12]
 80122f2:	f003 0320 	and.w	r3, r3, #32
 80122f6:	2b20      	cmp	r3, #32
 80122f8:	d107      	bne.n	801230a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	f06f 0220 	mvn.w	r2, #32
 8012302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f000 fc37 	bl	8012b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801230a:	bf00      	nop
 801230c:	3708      	adds	r7, #8
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}
	...

08012314 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b084      	sub	sp, #16
 8012318:	af00      	add	r7, sp, #0
 801231a:	60f8      	str	r0, [r7, #12]
 801231c:	60b9      	str	r1, [r7, #8]
 801231e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012326:	2b01      	cmp	r3, #1
 8012328:	d101      	bne.n	801232e <HAL_TIM_PWM_ConfigChannel+0x1a>
 801232a:	2302      	movs	r3, #2
 801232c:	e0b4      	b.n	8012498 <HAL_TIM_PWM_ConfigChannel+0x184>
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	2201      	movs	r2, #1
 8012332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	2202      	movs	r2, #2
 801233a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2b0c      	cmp	r3, #12
 8012342:	f200 809f 	bhi.w	8012484 <HAL_TIM_PWM_ConfigChannel+0x170>
 8012346:	a201      	add	r2, pc, #4	; (adr r2, 801234c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8012348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801234c:	08012381 	.word	0x08012381
 8012350:	08012485 	.word	0x08012485
 8012354:	08012485 	.word	0x08012485
 8012358:	08012485 	.word	0x08012485
 801235c:	080123c1 	.word	0x080123c1
 8012360:	08012485 	.word	0x08012485
 8012364:	08012485 	.word	0x08012485
 8012368:	08012485 	.word	0x08012485
 801236c:	08012403 	.word	0x08012403
 8012370:	08012485 	.word	0x08012485
 8012374:	08012485 	.word	0x08012485
 8012378:	08012485 	.word	0x08012485
 801237c:	08012443 	.word	0x08012443
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	68b9      	ldr	r1, [r7, #8]
 8012386:	4618      	mov	r0, r3
 8012388:	f000 f952 	bl	8012630 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	699a      	ldr	r2, [r3, #24]
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	f042 0208 	orr.w	r2, r2, #8
 801239a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	699a      	ldr	r2, [r3, #24]
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	f022 0204 	bic.w	r2, r2, #4
 80123aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	6999      	ldr	r1, [r3, #24]
 80123b2:	68bb      	ldr	r3, [r7, #8]
 80123b4:	691a      	ldr	r2, [r3, #16]
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	430a      	orrs	r2, r1
 80123bc:	619a      	str	r2, [r3, #24]
      break;
 80123be:	e062      	b.n	8012486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	68b9      	ldr	r1, [r7, #8]
 80123c6:	4618      	mov	r0, r3
 80123c8:	f000 f9a2 	bl	8012710 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	699a      	ldr	r2, [r3, #24]
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80123da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	699a      	ldr	r2, [r3, #24]
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80123ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	6999      	ldr	r1, [r3, #24]
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	691b      	ldr	r3, [r3, #16]
 80123f6:	021a      	lsls	r2, r3, #8
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	430a      	orrs	r2, r1
 80123fe:	619a      	str	r2, [r3, #24]
      break;
 8012400:	e041      	b.n	8012486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	68b9      	ldr	r1, [r7, #8]
 8012408:	4618      	mov	r0, r3
 801240a:	f000 f9f7 	bl	80127fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	69da      	ldr	r2, [r3, #28]
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	f042 0208 	orr.w	r2, r2, #8
 801241c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	69da      	ldr	r2, [r3, #28]
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	f022 0204 	bic.w	r2, r2, #4
 801242c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	69d9      	ldr	r1, [r3, #28]
 8012434:	68bb      	ldr	r3, [r7, #8]
 8012436:	691a      	ldr	r2, [r3, #16]
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	430a      	orrs	r2, r1
 801243e:	61da      	str	r2, [r3, #28]
      break;
 8012440:	e021      	b.n	8012486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	68b9      	ldr	r1, [r7, #8]
 8012448:	4618      	mov	r0, r3
 801244a:	f000 fa4b 	bl	80128e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	69da      	ldr	r2, [r3, #28]
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801245c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	69da      	ldr	r2, [r3, #28]
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801246c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	69d9      	ldr	r1, [r3, #28]
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	691b      	ldr	r3, [r3, #16]
 8012478:	021a      	lsls	r2, r3, #8
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	430a      	orrs	r2, r1
 8012480:	61da      	str	r2, [r3, #28]
      break;
 8012482:	e000      	b.n	8012486 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8012484:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	2201      	movs	r2, #1
 801248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	2200      	movs	r2, #0
 8012492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012496:	2300      	movs	r3, #0
}
 8012498:	4618      	mov	r0, r3
 801249a:	3710      	adds	r7, #16
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}

080124a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80124a0:	b480      	push	{r7}
 80124a2:	b083      	sub	sp, #12
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80124a8:	bf00      	nop
 80124aa:	370c      	adds	r7, #12
 80124ac:	46bd      	mov	sp, r7
 80124ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b2:	4770      	bx	lr

080124b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80124b4:	b480      	push	{r7}
 80124b6:	b083      	sub	sp, #12
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80124bc:	bf00      	nop
 80124be:	370c      	adds	r7, #12
 80124c0:	46bd      	mov	sp, r7
 80124c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c6:	4770      	bx	lr

080124c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80124c8:	b480      	push	{r7}
 80124ca:	b083      	sub	sp, #12
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80124d0:	bf00      	nop
 80124d2:	370c      	adds	r7, #12
 80124d4:	46bd      	mov	sp, r7
 80124d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124da:	4770      	bx	lr

080124dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80124dc:	b480      	push	{r7}
 80124de:	b083      	sub	sp, #12
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80124e4:	bf00      	nop
 80124e6:	370c      	adds	r7, #12
 80124e8:	46bd      	mov	sp, r7
 80124ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ee:	4770      	bx	lr

080124f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80124f0:	b480      	push	{r7}
 80124f2:	b085      	sub	sp, #20
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
 80124f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	4a40      	ldr	r2, [pc, #256]	; (8012604 <TIM_Base_SetConfig+0x114>)
 8012504:	4293      	cmp	r3, r2
 8012506:	d013      	beq.n	8012530 <TIM_Base_SetConfig+0x40>
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801250e:	d00f      	beq.n	8012530 <TIM_Base_SetConfig+0x40>
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	4a3d      	ldr	r2, [pc, #244]	; (8012608 <TIM_Base_SetConfig+0x118>)
 8012514:	4293      	cmp	r3, r2
 8012516:	d00b      	beq.n	8012530 <TIM_Base_SetConfig+0x40>
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	4a3c      	ldr	r2, [pc, #240]	; (801260c <TIM_Base_SetConfig+0x11c>)
 801251c:	4293      	cmp	r3, r2
 801251e:	d007      	beq.n	8012530 <TIM_Base_SetConfig+0x40>
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	4a3b      	ldr	r2, [pc, #236]	; (8012610 <TIM_Base_SetConfig+0x120>)
 8012524:	4293      	cmp	r3, r2
 8012526:	d003      	beq.n	8012530 <TIM_Base_SetConfig+0x40>
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	4a3a      	ldr	r2, [pc, #232]	; (8012614 <TIM_Base_SetConfig+0x124>)
 801252c:	4293      	cmp	r3, r2
 801252e:	d108      	bne.n	8012542 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	685b      	ldr	r3, [r3, #4]
 801253c:	68fa      	ldr	r2, [r7, #12]
 801253e:	4313      	orrs	r3, r2
 8012540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	4a2f      	ldr	r2, [pc, #188]	; (8012604 <TIM_Base_SetConfig+0x114>)
 8012546:	4293      	cmp	r3, r2
 8012548:	d02b      	beq.n	80125a2 <TIM_Base_SetConfig+0xb2>
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012550:	d027      	beq.n	80125a2 <TIM_Base_SetConfig+0xb2>
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	4a2c      	ldr	r2, [pc, #176]	; (8012608 <TIM_Base_SetConfig+0x118>)
 8012556:	4293      	cmp	r3, r2
 8012558:	d023      	beq.n	80125a2 <TIM_Base_SetConfig+0xb2>
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	4a2b      	ldr	r2, [pc, #172]	; (801260c <TIM_Base_SetConfig+0x11c>)
 801255e:	4293      	cmp	r3, r2
 8012560:	d01f      	beq.n	80125a2 <TIM_Base_SetConfig+0xb2>
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	4a2a      	ldr	r2, [pc, #168]	; (8012610 <TIM_Base_SetConfig+0x120>)
 8012566:	4293      	cmp	r3, r2
 8012568:	d01b      	beq.n	80125a2 <TIM_Base_SetConfig+0xb2>
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	4a29      	ldr	r2, [pc, #164]	; (8012614 <TIM_Base_SetConfig+0x124>)
 801256e:	4293      	cmp	r3, r2
 8012570:	d017      	beq.n	80125a2 <TIM_Base_SetConfig+0xb2>
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	4a28      	ldr	r2, [pc, #160]	; (8012618 <TIM_Base_SetConfig+0x128>)
 8012576:	4293      	cmp	r3, r2
 8012578:	d013      	beq.n	80125a2 <TIM_Base_SetConfig+0xb2>
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	4a27      	ldr	r2, [pc, #156]	; (801261c <TIM_Base_SetConfig+0x12c>)
 801257e:	4293      	cmp	r3, r2
 8012580:	d00f      	beq.n	80125a2 <TIM_Base_SetConfig+0xb2>
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	4a26      	ldr	r2, [pc, #152]	; (8012620 <TIM_Base_SetConfig+0x130>)
 8012586:	4293      	cmp	r3, r2
 8012588:	d00b      	beq.n	80125a2 <TIM_Base_SetConfig+0xb2>
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	4a25      	ldr	r2, [pc, #148]	; (8012624 <TIM_Base_SetConfig+0x134>)
 801258e:	4293      	cmp	r3, r2
 8012590:	d007      	beq.n	80125a2 <TIM_Base_SetConfig+0xb2>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	4a24      	ldr	r2, [pc, #144]	; (8012628 <TIM_Base_SetConfig+0x138>)
 8012596:	4293      	cmp	r3, r2
 8012598:	d003      	beq.n	80125a2 <TIM_Base_SetConfig+0xb2>
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	4a23      	ldr	r2, [pc, #140]	; (801262c <TIM_Base_SetConfig+0x13c>)
 801259e:	4293      	cmp	r3, r2
 80125a0:	d108      	bne.n	80125b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80125a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	68db      	ldr	r3, [r3, #12]
 80125ae:	68fa      	ldr	r2, [r7, #12]
 80125b0:	4313      	orrs	r3, r2
 80125b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80125ba:	683b      	ldr	r3, [r7, #0]
 80125bc:	695b      	ldr	r3, [r3, #20]
 80125be:	4313      	orrs	r3, r2
 80125c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	68fa      	ldr	r2, [r7, #12]
 80125c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	689a      	ldr	r2, [r3, #8]
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	681a      	ldr	r2, [r3, #0]
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	4a0a      	ldr	r2, [pc, #40]	; (8012604 <TIM_Base_SetConfig+0x114>)
 80125dc:	4293      	cmp	r3, r2
 80125de:	d003      	beq.n	80125e8 <TIM_Base_SetConfig+0xf8>
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	4a0c      	ldr	r2, [pc, #48]	; (8012614 <TIM_Base_SetConfig+0x124>)
 80125e4:	4293      	cmp	r3, r2
 80125e6:	d103      	bne.n	80125f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80125e8:	683b      	ldr	r3, [r7, #0]
 80125ea:	691a      	ldr	r2, [r3, #16]
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	2201      	movs	r2, #1
 80125f4:	615a      	str	r2, [r3, #20]
}
 80125f6:	bf00      	nop
 80125f8:	3714      	adds	r7, #20
 80125fa:	46bd      	mov	sp, r7
 80125fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012600:	4770      	bx	lr
 8012602:	bf00      	nop
 8012604:	40010000 	.word	0x40010000
 8012608:	40000400 	.word	0x40000400
 801260c:	40000800 	.word	0x40000800
 8012610:	40000c00 	.word	0x40000c00
 8012614:	40010400 	.word	0x40010400
 8012618:	40014000 	.word	0x40014000
 801261c:	40014400 	.word	0x40014400
 8012620:	40014800 	.word	0x40014800
 8012624:	40001800 	.word	0x40001800
 8012628:	40001c00 	.word	0x40001c00
 801262c:	40002000 	.word	0x40002000

08012630 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012630:	b480      	push	{r7}
 8012632:	b087      	sub	sp, #28
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
 8012638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	6a1b      	ldr	r3, [r3, #32]
 801263e:	f023 0201 	bic.w	r2, r3, #1
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	6a1b      	ldr	r3, [r3, #32]
 801264a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	685b      	ldr	r3, [r3, #4]
 8012650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	699b      	ldr	r3, [r3, #24]
 8012656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801265e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	f023 0303 	bic.w	r3, r3, #3
 8012666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012668:	683b      	ldr	r3, [r7, #0]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	68fa      	ldr	r2, [r7, #12]
 801266e:	4313      	orrs	r3, r2
 8012670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012672:	697b      	ldr	r3, [r7, #20]
 8012674:	f023 0302 	bic.w	r3, r3, #2
 8012678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	689b      	ldr	r3, [r3, #8]
 801267e:	697a      	ldr	r2, [r7, #20]
 8012680:	4313      	orrs	r3, r2
 8012682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	4a20      	ldr	r2, [pc, #128]	; (8012708 <TIM_OC1_SetConfig+0xd8>)
 8012688:	4293      	cmp	r3, r2
 801268a:	d003      	beq.n	8012694 <TIM_OC1_SetConfig+0x64>
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	4a1f      	ldr	r2, [pc, #124]	; (801270c <TIM_OC1_SetConfig+0xdc>)
 8012690:	4293      	cmp	r3, r2
 8012692:	d10c      	bne.n	80126ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012694:	697b      	ldr	r3, [r7, #20]
 8012696:	f023 0308 	bic.w	r3, r3, #8
 801269a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	68db      	ldr	r3, [r3, #12]
 80126a0:	697a      	ldr	r2, [r7, #20]
 80126a2:	4313      	orrs	r3, r2
 80126a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	f023 0304 	bic.w	r3, r3, #4
 80126ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	4a15      	ldr	r2, [pc, #84]	; (8012708 <TIM_OC1_SetConfig+0xd8>)
 80126b2:	4293      	cmp	r3, r2
 80126b4:	d003      	beq.n	80126be <TIM_OC1_SetConfig+0x8e>
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	4a14      	ldr	r2, [pc, #80]	; (801270c <TIM_OC1_SetConfig+0xdc>)
 80126ba:	4293      	cmp	r3, r2
 80126bc:	d111      	bne.n	80126e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80126be:	693b      	ldr	r3, [r7, #16]
 80126c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80126c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80126c6:	693b      	ldr	r3, [r7, #16]
 80126c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80126cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	695b      	ldr	r3, [r3, #20]
 80126d2:	693a      	ldr	r2, [r7, #16]
 80126d4:	4313      	orrs	r3, r2
 80126d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80126d8:	683b      	ldr	r3, [r7, #0]
 80126da:	699b      	ldr	r3, [r3, #24]
 80126dc:	693a      	ldr	r2, [r7, #16]
 80126de:	4313      	orrs	r3, r2
 80126e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	693a      	ldr	r2, [r7, #16]
 80126e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	68fa      	ldr	r2, [r7, #12]
 80126ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	685a      	ldr	r2, [r3, #4]
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	697a      	ldr	r2, [r7, #20]
 80126fa:	621a      	str	r2, [r3, #32]
}
 80126fc:	bf00      	nop
 80126fe:	371c      	adds	r7, #28
 8012700:	46bd      	mov	sp, r7
 8012702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012706:	4770      	bx	lr
 8012708:	40010000 	.word	0x40010000
 801270c:	40010400 	.word	0x40010400

08012710 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012710:	b480      	push	{r7}
 8012712:	b087      	sub	sp, #28
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
 8012718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	6a1b      	ldr	r3, [r3, #32]
 801271e:	f023 0210 	bic.w	r2, r3, #16
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	6a1b      	ldr	r3, [r3, #32]
 801272a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	699b      	ldr	r3, [r3, #24]
 8012736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801273e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	021b      	lsls	r3, r3, #8
 801274e:	68fa      	ldr	r2, [r7, #12]
 8012750:	4313      	orrs	r3, r2
 8012752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012754:	697b      	ldr	r3, [r7, #20]
 8012756:	f023 0320 	bic.w	r3, r3, #32
 801275a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	689b      	ldr	r3, [r3, #8]
 8012760:	011b      	lsls	r3, r3, #4
 8012762:	697a      	ldr	r2, [r7, #20]
 8012764:	4313      	orrs	r3, r2
 8012766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	4a22      	ldr	r2, [pc, #136]	; (80127f4 <TIM_OC2_SetConfig+0xe4>)
 801276c:	4293      	cmp	r3, r2
 801276e:	d003      	beq.n	8012778 <TIM_OC2_SetConfig+0x68>
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	4a21      	ldr	r2, [pc, #132]	; (80127f8 <TIM_OC2_SetConfig+0xe8>)
 8012774:	4293      	cmp	r3, r2
 8012776:	d10d      	bne.n	8012794 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012778:	697b      	ldr	r3, [r7, #20]
 801277a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801277e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	68db      	ldr	r3, [r3, #12]
 8012784:	011b      	lsls	r3, r3, #4
 8012786:	697a      	ldr	r2, [r7, #20]
 8012788:	4313      	orrs	r3, r2
 801278a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801278c:	697b      	ldr	r3, [r7, #20]
 801278e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012792:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	4a17      	ldr	r2, [pc, #92]	; (80127f4 <TIM_OC2_SetConfig+0xe4>)
 8012798:	4293      	cmp	r3, r2
 801279a:	d003      	beq.n	80127a4 <TIM_OC2_SetConfig+0x94>
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	4a16      	ldr	r2, [pc, #88]	; (80127f8 <TIM_OC2_SetConfig+0xe8>)
 80127a0:	4293      	cmp	r3, r2
 80127a2:	d113      	bne.n	80127cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80127a4:	693b      	ldr	r3, [r7, #16]
 80127a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80127aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80127ac:	693b      	ldr	r3, [r7, #16]
 80127ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80127b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	695b      	ldr	r3, [r3, #20]
 80127b8:	009b      	lsls	r3, r3, #2
 80127ba:	693a      	ldr	r2, [r7, #16]
 80127bc:	4313      	orrs	r3, r2
 80127be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	699b      	ldr	r3, [r3, #24]
 80127c4:	009b      	lsls	r3, r3, #2
 80127c6:	693a      	ldr	r2, [r7, #16]
 80127c8:	4313      	orrs	r3, r2
 80127ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	693a      	ldr	r2, [r7, #16]
 80127d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	68fa      	ldr	r2, [r7, #12]
 80127d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80127d8:	683b      	ldr	r3, [r7, #0]
 80127da:	685a      	ldr	r2, [r3, #4]
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	697a      	ldr	r2, [r7, #20]
 80127e4:	621a      	str	r2, [r3, #32]
}
 80127e6:	bf00      	nop
 80127e8:	371c      	adds	r7, #28
 80127ea:	46bd      	mov	sp, r7
 80127ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f0:	4770      	bx	lr
 80127f2:	bf00      	nop
 80127f4:	40010000 	.word	0x40010000
 80127f8:	40010400 	.word	0x40010400

080127fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80127fc:	b480      	push	{r7}
 80127fe:	b087      	sub	sp, #28
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
 8012804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	6a1b      	ldr	r3, [r3, #32]
 801280a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	6a1b      	ldr	r3, [r3, #32]
 8012816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	685b      	ldr	r3, [r3, #4]
 801281c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	69db      	ldr	r3, [r3, #28]
 8012822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801282a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	f023 0303 	bic.w	r3, r3, #3
 8012832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	68fa      	ldr	r2, [r7, #12]
 801283a:	4313      	orrs	r3, r2
 801283c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801283e:	697b      	ldr	r3, [r7, #20]
 8012840:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	689b      	ldr	r3, [r3, #8]
 801284a:	021b      	lsls	r3, r3, #8
 801284c:	697a      	ldr	r2, [r7, #20]
 801284e:	4313      	orrs	r3, r2
 8012850:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	4a21      	ldr	r2, [pc, #132]	; (80128dc <TIM_OC3_SetConfig+0xe0>)
 8012856:	4293      	cmp	r3, r2
 8012858:	d003      	beq.n	8012862 <TIM_OC3_SetConfig+0x66>
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	4a20      	ldr	r2, [pc, #128]	; (80128e0 <TIM_OC3_SetConfig+0xe4>)
 801285e:	4293      	cmp	r3, r2
 8012860:	d10d      	bne.n	801287e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012868:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801286a:	683b      	ldr	r3, [r7, #0]
 801286c:	68db      	ldr	r3, [r3, #12]
 801286e:	021b      	lsls	r3, r3, #8
 8012870:	697a      	ldr	r2, [r7, #20]
 8012872:	4313      	orrs	r3, r2
 8012874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012876:	697b      	ldr	r3, [r7, #20]
 8012878:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801287c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	4a16      	ldr	r2, [pc, #88]	; (80128dc <TIM_OC3_SetConfig+0xe0>)
 8012882:	4293      	cmp	r3, r2
 8012884:	d003      	beq.n	801288e <TIM_OC3_SetConfig+0x92>
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	4a15      	ldr	r2, [pc, #84]	; (80128e0 <TIM_OC3_SetConfig+0xe4>)
 801288a:	4293      	cmp	r3, r2
 801288c:	d113      	bne.n	80128b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012896:	693b      	ldr	r3, [r7, #16]
 8012898:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801289c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	695b      	ldr	r3, [r3, #20]
 80128a2:	011b      	lsls	r3, r3, #4
 80128a4:	693a      	ldr	r2, [r7, #16]
 80128a6:	4313      	orrs	r3, r2
 80128a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80128aa:	683b      	ldr	r3, [r7, #0]
 80128ac:	699b      	ldr	r3, [r3, #24]
 80128ae:	011b      	lsls	r3, r3, #4
 80128b0:	693a      	ldr	r2, [r7, #16]
 80128b2:	4313      	orrs	r3, r2
 80128b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	693a      	ldr	r2, [r7, #16]
 80128ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	68fa      	ldr	r2, [r7, #12]
 80128c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80128c2:	683b      	ldr	r3, [r7, #0]
 80128c4:	685a      	ldr	r2, [r3, #4]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	697a      	ldr	r2, [r7, #20]
 80128ce:	621a      	str	r2, [r3, #32]
}
 80128d0:	bf00      	nop
 80128d2:	371c      	adds	r7, #28
 80128d4:	46bd      	mov	sp, r7
 80128d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128da:	4770      	bx	lr
 80128dc:	40010000 	.word	0x40010000
 80128e0:	40010400 	.word	0x40010400

080128e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80128e4:	b480      	push	{r7}
 80128e6:	b087      	sub	sp, #28
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
 80128ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	6a1b      	ldr	r3, [r3, #32]
 80128f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	6a1b      	ldr	r3, [r3, #32]
 80128fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	685b      	ldr	r3, [r3, #4]
 8012904:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	69db      	ldr	r3, [r3, #28]
 801290a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801291a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	021b      	lsls	r3, r3, #8
 8012922:	68fa      	ldr	r2, [r7, #12]
 8012924:	4313      	orrs	r3, r2
 8012926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012928:	693b      	ldr	r3, [r7, #16]
 801292a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801292e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012930:	683b      	ldr	r3, [r7, #0]
 8012932:	689b      	ldr	r3, [r3, #8]
 8012934:	031b      	lsls	r3, r3, #12
 8012936:	693a      	ldr	r2, [r7, #16]
 8012938:	4313      	orrs	r3, r2
 801293a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	4a12      	ldr	r2, [pc, #72]	; (8012988 <TIM_OC4_SetConfig+0xa4>)
 8012940:	4293      	cmp	r3, r2
 8012942:	d003      	beq.n	801294c <TIM_OC4_SetConfig+0x68>
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	4a11      	ldr	r2, [pc, #68]	; (801298c <TIM_OC4_SetConfig+0xa8>)
 8012948:	4293      	cmp	r3, r2
 801294a:	d109      	bne.n	8012960 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012952:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012954:	683b      	ldr	r3, [r7, #0]
 8012956:	695b      	ldr	r3, [r3, #20]
 8012958:	019b      	lsls	r3, r3, #6
 801295a:	697a      	ldr	r2, [r7, #20]
 801295c:	4313      	orrs	r3, r2
 801295e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	697a      	ldr	r2, [r7, #20]
 8012964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	68fa      	ldr	r2, [r7, #12]
 801296a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	685a      	ldr	r2, [r3, #4]
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	693a      	ldr	r2, [r7, #16]
 8012978:	621a      	str	r2, [r3, #32]
}
 801297a:	bf00      	nop
 801297c:	371c      	adds	r7, #28
 801297e:	46bd      	mov	sp, r7
 8012980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012984:	4770      	bx	lr
 8012986:	bf00      	nop
 8012988:	40010000 	.word	0x40010000
 801298c:	40010400 	.word	0x40010400

08012990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012990:	b480      	push	{r7}
 8012992:	b087      	sub	sp, #28
 8012994:	af00      	add	r7, sp, #0
 8012996:	60f8      	str	r0, [r7, #12]
 8012998:	60b9      	str	r1, [r7, #8]
 801299a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	f003 031f 	and.w	r3, r3, #31
 80129a2:	2201      	movs	r2, #1
 80129a4:	fa02 f303 	lsl.w	r3, r2, r3
 80129a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	6a1a      	ldr	r2, [r3, #32]
 80129ae:	697b      	ldr	r3, [r7, #20]
 80129b0:	43db      	mvns	r3, r3
 80129b2:	401a      	ands	r2, r3
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	6a1a      	ldr	r2, [r3, #32]
 80129bc:	68bb      	ldr	r3, [r7, #8]
 80129be:	f003 031f 	and.w	r3, r3, #31
 80129c2:	6879      	ldr	r1, [r7, #4]
 80129c4:	fa01 f303 	lsl.w	r3, r1, r3
 80129c8:	431a      	orrs	r2, r3
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	621a      	str	r2, [r3, #32]
}
 80129ce:	bf00      	nop
 80129d0:	371c      	adds	r7, #28
 80129d2:	46bd      	mov	sp, r7
 80129d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d8:	4770      	bx	lr
	...

080129dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80129dc:	b480      	push	{r7}
 80129de:	b085      	sub	sp, #20
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
 80129e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80129ec:	2b01      	cmp	r3, #1
 80129ee:	d101      	bne.n	80129f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80129f0:	2302      	movs	r3, #2
 80129f2:	e05a      	b.n	8012aaa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	2201      	movs	r2, #1
 80129f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	2202      	movs	r2, #2
 8012a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	685b      	ldr	r3, [r3, #4]
 8012a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	689b      	ldr	r3, [r3, #8]
 8012a12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012a1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	68fa      	ldr	r2, [r7, #12]
 8012a22:	4313      	orrs	r3, r2
 8012a24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	68fa      	ldr	r2, [r7, #12]
 8012a2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	4a21      	ldr	r2, [pc, #132]	; (8012ab8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8012a34:	4293      	cmp	r3, r2
 8012a36:	d022      	beq.n	8012a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012a40:	d01d      	beq.n	8012a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	4a1d      	ldr	r2, [pc, #116]	; (8012abc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8012a48:	4293      	cmp	r3, r2
 8012a4a:	d018      	beq.n	8012a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	4a1b      	ldr	r2, [pc, #108]	; (8012ac0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8012a52:	4293      	cmp	r3, r2
 8012a54:	d013      	beq.n	8012a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	4a1a      	ldr	r2, [pc, #104]	; (8012ac4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8012a5c:	4293      	cmp	r3, r2
 8012a5e:	d00e      	beq.n	8012a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	4a18      	ldr	r2, [pc, #96]	; (8012ac8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8012a66:	4293      	cmp	r3, r2
 8012a68:	d009      	beq.n	8012a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	4a17      	ldr	r2, [pc, #92]	; (8012acc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8012a70:	4293      	cmp	r3, r2
 8012a72:	d004      	beq.n	8012a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	4a15      	ldr	r2, [pc, #84]	; (8012ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8012a7a:	4293      	cmp	r3, r2
 8012a7c:	d10c      	bne.n	8012a98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012a84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	685b      	ldr	r3, [r3, #4]
 8012a8a:	68ba      	ldr	r2, [r7, #8]
 8012a8c:	4313      	orrs	r3, r2
 8012a8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	68ba      	ldr	r2, [r7, #8]
 8012a96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	2201      	movs	r2, #1
 8012a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012aa8:	2300      	movs	r3, #0
}
 8012aaa:	4618      	mov	r0, r3
 8012aac:	3714      	adds	r7, #20
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab4:	4770      	bx	lr
 8012ab6:	bf00      	nop
 8012ab8:	40010000 	.word	0x40010000
 8012abc:	40000400 	.word	0x40000400
 8012ac0:	40000800 	.word	0x40000800
 8012ac4:	40000c00 	.word	0x40000c00
 8012ac8:	40010400 	.word	0x40010400
 8012acc:	40014000 	.word	0x40014000
 8012ad0:	40001800 	.word	0x40001800

08012ad4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012ad4:	b480      	push	{r7}
 8012ad6:	b085      	sub	sp, #20
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
 8012adc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012ae8:	2b01      	cmp	r3, #1
 8012aea:	d101      	bne.n	8012af0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012aec:	2302      	movs	r3, #2
 8012aee:	e03d      	b.n	8012b6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2201      	movs	r2, #1
 8012af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012afe:	683b      	ldr	r3, [r7, #0]
 8012b00:	68db      	ldr	r3, [r3, #12]
 8012b02:	4313      	orrs	r3, r2
 8012b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	689b      	ldr	r3, [r3, #8]
 8012b10:	4313      	orrs	r3, r2
 8012b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	685b      	ldr	r3, [r3, #4]
 8012b1e:	4313      	orrs	r3, r2
 8012b20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	4313      	orrs	r3, r2
 8012b2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012b36:	683b      	ldr	r3, [r7, #0]
 8012b38:	691b      	ldr	r3, [r3, #16]
 8012b3a:	4313      	orrs	r3, r2
 8012b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012b44:	683b      	ldr	r3, [r7, #0]
 8012b46:	695b      	ldr	r3, [r3, #20]
 8012b48:	4313      	orrs	r3, r2
 8012b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012b52:	683b      	ldr	r3, [r7, #0]
 8012b54:	69db      	ldr	r3, [r3, #28]
 8012b56:	4313      	orrs	r3, r2
 8012b58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	68fa      	ldr	r2, [r7, #12]
 8012b60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	2200      	movs	r2, #0
 8012b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012b6a:	2300      	movs	r3, #0
}
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	3714      	adds	r7, #20
 8012b70:	46bd      	mov	sp, r7
 8012b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b76:	4770      	bx	lr

08012b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012b78:	b480      	push	{r7}
 8012b7a:	b083      	sub	sp, #12
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012b80:	bf00      	nop
 8012b82:	370c      	adds	r7, #12
 8012b84:	46bd      	mov	sp, r7
 8012b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8a:	4770      	bx	lr

08012b8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012b8c:	b480      	push	{r7}
 8012b8e:	b083      	sub	sp, #12
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012b94:	bf00      	nop
 8012b96:	370c      	adds	r7, #12
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9e:	4770      	bx	lr

08012ba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b082      	sub	sp, #8
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d101      	bne.n	8012bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012bae:	2301      	movs	r3, #1
 8012bb0:	e03f      	b.n	8012c32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012bb8:	b2db      	uxtb	r3, r3
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d106      	bne.n	8012bcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012bc6:	6878      	ldr	r0, [r7, #4]
 8012bc8:	f7fb fbe0 	bl	800e38c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2224      	movs	r2, #36	; 0x24
 8012bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	68da      	ldr	r2, [r3, #12]
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012be2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8012be4:	6878      	ldr	r0, [r7, #4]
 8012be6:	f000 fb4b 	bl	8013280 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	691a      	ldr	r2, [r3, #16]
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012bf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	695a      	ldr	r2, [r3, #20]
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012c08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	68da      	ldr	r2, [r3, #12]
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012c18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2220      	movs	r2, #32
 8012c24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	2220      	movs	r2, #32
 8012c2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8012c30:	2300      	movs	r3, #0
}
 8012c32:	4618      	mov	r0, r3
 8012c34:	3708      	adds	r7, #8
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}

08012c3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012c3a:	b580      	push	{r7, lr}
 8012c3c:	b088      	sub	sp, #32
 8012c3e:	af02      	add	r7, sp, #8
 8012c40:	60f8      	str	r0, [r7, #12]
 8012c42:	60b9      	str	r1, [r7, #8]
 8012c44:	603b      	str	r3, [r7, #0]
 8012c46:	4613      	mov	r3, r2
 8012c48:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012c54:	b2db      	uxtb	r3, r3
 8012c56:	2b20      	cmp	r3, #32
 8012c58:	f040 8083 	bne.w	8012d62 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8012c5c:	68bb      	ldr	r3, [r7, #8]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d002      	beq.n	8012c68 <HAL_UART_Transmit+0x2e>
 8012c62:	88fb      	ldrh	r3, [r7, #6]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d101      	bne.n	8012c6c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8012c68:	2301      	movs	r3, #1
 8012c6a:	e07b      	b.n	8012d64 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012c72:	2b01      	cmp	r3, #1
 8012c74:	d101      	bne.n	8012c7a <HAL_UART_Transmit+0x40>
 8012c76:	2302      	movs	r3, #2
 8012c78:	e074      	b.n	8012d64 <HAL_UART_Transmit+0x12a>
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	2201      	movs	r2, #1
 8012c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	2200      	movs	r2, #0
 8012c86:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	2221      	movs	r2, #33	; 0x21
 8012c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8012c90:	f7fb fd5e 	bl	800e750 <HAL_GetTick>
 8012c94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	88fa      	ldrh	r2, [r7, #6]
 8012c9a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	88fa      	ldrh	r2, [r7, #6]
 8012ca0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8012caa:	e042      	b.n	8012d32 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012cb0:	b29b      	uxth	r3, r3
 8012cb2:	3b01      	subs	r3, #1
 8012cb4:	b29a      	uxth	r2, r3
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	689b      	ldr	r3, [r3, #8]
 8012cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012cc2:	d122      	bne.n	8012d0a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012cc4:	683b      	ldr	r3, [r7, #0]
 8012cc6:	9300      	str	r3, [sp, #0]
 8012cc8:	697b      	ldr	r3, [r7, #20]
 8012cca:	2200      	movs	r2, #0
 8012ccc:	2180      	movs	r1, #128	; 0x80
 8012cce:	68f8      	ldr	r0, [r7, #12]
 8012cd0:	f000 f96a 	bl	8012fa8 <UART_WaitOnFlagUntilTimeout>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d001      	beq.n	8012cde <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8012cda:	2303      	movs	r3, #3
 8012cdc:	e042      	b.n	8012d64 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8012cde:	68bb      	ldr	r3, [r7, #8]
 8012ce0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8012ce2:	693b      	ldr	r3, [r7, #16]
 8012ce4:	881b      	ldrh	r3, [r3, #0]
 8012ce6:	461a      	mov	r2, r3
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012cf0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	691b      	ldr	r3, [r3, #16]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d103      	bne.n	8012d02 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8012cfa:	68bb      	ldr	r3, [r7, #8]
 8012cfc:	3302      	adds	r3, #2
 8012cfe:	60bb      	str	r3, [r7, #8]
 8012d00:	e017      	b.n	8012d32 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8012d02:	68bb      	ldr	r3, [r7, #8]
 8012d04:	3301      	adds	r3, #1
 8012d06:	60bb      	str	r3, [r7, #8]
 8012d08:	e013      	b.n	8012d32 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	9300      	str	r3, [sp, #0]
 8012d0e:	697b      	ldr	r3, [r7, #20]
 8012d10:	2200      	movs	r2, #0
 8012d12:	2180      	movs	r1, #128	; 0x80
 8012d14:	68f8      	ldr	r0, [r7, #12]
 8012d16:	f000 f947 	bl	8012fa8 <UART_WaitOnFlagUntilTimeout>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d001      	beq.n	8012d24 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8012d20:	2303      	movs	r3, #3
 8012d22:	e01f      	b.n	8012d64 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8012d24:	68bb      	ldr	r3, [r7, #8]
 8012d26:	1c5a      	adds	r2, r3, #1
 8012d28:	60ba      	str	r2, [r7, #8]
 8012d2a:	781a      	ldrb	r2, [r3, #0]
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012d36:	b29b      	uxth	r3, r3
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d1b7      	bne.n	8012cac <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012d3c:	683b      	ldr	r3, [r7, #0]
 8012d3e:	9300      	str	r3, [sp, #0]
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	2200      	movs	r2, #0
 8012d44:	2140      	movs	r1, #64	; 0x40
 8012d46:	68f8      	ldr	r0, [r7, #12]
 8012d48:	f000 f92e 	bl	8012fa8 <UART_WaitOnFlagUntilTimeout>
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d001      	beq.n	8012d56 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8012d52:	2303      	movs	r3, #3
 8012d54:	e006      	b.n	8012d64 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	2220      	movs	r2, #32
 8012d5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8012d5e:	2300      	movs	r3, #0
 8012d60:	e000      	b.n	8012d64 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8012d62:	2302      	movs	r3, #2
  }
}
 8012d64:	4618      	mov	r0, r3
 8012d66:	3718      	adds	r7, #24
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd80      	pop	{r7, pc}

08012d6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b088      	sub	sp, #32
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	68db      	ldr	r3, [r3, #12]
 8012d82:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	695b      	ldr	r3, [r3, #20]
 8012d8a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8012d90:	2300      	movs	r3, #0
 8012d92:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8012d94:	69fb      	ldr	r3, [r7, #28]
 8012d96:	f003 030f 	and.w	r3, r3, #15
 8012d9a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d10d      	bne.n	8012dbe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012da2:	69fb      	ldr	r3, [r7, #28]
 8012da4:	f003 0320 	and.w	r3, r3, #32
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d008      	beq.n	8012dbe <HAL_UART_IRQHandler+0x52>
 8012dac:	69bb      	ldr	r3, [r7, #24]
 8012dae:	f003 0320 	and.w	r3, r3, #32
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d003      	beq.n	8012dbe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8012db6:	6878      	ldr	r0, [r7, #4]
 8012db8:	f000 f9e0 	bl	801317c <UART_Receive_IT>
      return;
 8012dbc:	e0d1      	b.n	8012f62 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8012dbe:	693b      	ldr	r3, [r7, #16]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	f000 80b0 	beq.w	8012f26 <HAL_UART_IRQHandler+0x1ba>
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	f003 0301 	and.w	r3, r3, #1
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d105      	bne.n	8012ddc <HAL_UART_IRQHandler+0x70>
 8012dd0:	69bb      	ldr	r3, [r7, #24]
 8012dd2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	f000 80a5 	beq.w	8012f26 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8012ddc:	69fb      	ldr	r3, [r7, #28]
 8012dde:	f003 0301 	and.w	r3, r3, #1
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d00a      	beq.n	8012dfc <HAL_UART_IRQHandler+0x90>
 8012de6:	69bb      	ldr	r3, [r7, #24]
 8012de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d005      	beq.n	8012dfc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012df4:	f043 0201 	orr.w	r2, r3, #1
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012dfc:	69fb      	ldr	r3, [r7, #28]
 8012dfe:	f003 0304 	and.w	r3, r3, #4
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d00a      	beq.n	8012e1c <HAL_UART_IRQHandler+0xb0>
 8012e06:	697b      	ldr	r3, [r7, #20]
 8012e08:	f003 0301 	and.w	r3, r3, #1
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d005      	beq.n	8012e1c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e14:	f043 0202 	orr.w	r2, r3, #2
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012e1c:	69fb      	ldr	r3, [r7, #28]
 8012e1e:	f003 0302 	and.w	r3, r3, #2
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d00a      	beq.n	8012e3c <HAL_UART_IRQHandler+0xd0>
 8012e26:	697b      	ldr	r3, [r7, #20]
 8012e28:	f003 0301 	and.w	r3, r3, #1
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d005      	beq.n	8012e3c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e34:	f043 0204 	orr.w	r2, r3, #4
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8012e3c:	69fb      	ldr	r3, [r7, #28]
 8012e3e:	f003 0308 	and.w	r3, r3, #8
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d00f      	beq.n	8012e66 <HAL_UART_IRQHandler+0xfa>
 8012e46:	69bb      	ldr	r3, [r7, #24]
 8012e48:	f003 0320 	and.w	r3, r3, #32
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d104      	bne.n	8012e5a <HAL_UART_IRQHandler+0xee>
 8012e50:	697b      	ldr	r3, [r7, #20]
 8012e52:	f003 0301 	and.w	r3, r3, #1
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d005      	beq.n	8012e66 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e5e:	f043 0208 	orr.w	r2, r3, #8
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d078      	beq.n	8012f60 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012e6e:	69fb      	ldr	r3, [r7, #28]
 8012e70:	f003 0320 	and.w	r3, r3, #32
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d007      	beq.n	8012e88 <HAL_UART_IRQHandler+0x11c>
 8012e78:	69bb      	ldr	r3, [r7, #24]
 8012e7a:	f003 0320 	and.w	r3, r3, #32
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d002      	beq.n	8012e88 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8012e82:	6878      	ldr	r0, [r7, #4]
 8012e84:	f000 f97a 	bl	801317c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	695b      	ldr	r3, [r3, #20]
 8012e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e92:	2b40      	cmp	r3, #64	; 0x40
 8012e94:	bf0c      	ite	eq
 8012e96:	2301      	moveq	r3, #1
 8012e98:	2300      	movne	r3, #0
 8012e9a:	b2db      	uxtb	r3, r3
 8012e9c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ea2:	f003 0308 	and.w	r3, r3, #8
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d102      	bne.n	8012eb0 <HAL_UART_IRQHandler+0x144>
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d031      	beq.n	8012f14 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012eb0:	6878      	ldr	r0, [r7, #4]
 8012eb2:	f000 f8c3 	bl	801303c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	695b      	ldr	r3, [r3, #20]
 8012ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ec0:	2b40      	cmp	r3, #64	; 0x40
 8012ec2:	d123      	bne.n	8012f0c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	695a      	ldr	r2, [r3, #20]
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012ed2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d013      	beq.n	8012f04 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ee0:	4a21      	ldr	r2, [pc, #132]	; (8012f68 <HAL_UART_IRQHandler+0x1fc>)
 8012ee2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7fc fa61 	bl	800f3b0 <HAL_DMA_Abort_IT>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d016      	beq.n	8012f22 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012efa:	687a      	ldr	r2, [r7, #4]
 8012efc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8012efe:	4610      	mov	r0, r2
 8012f00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012f02:	e00e      	b.n	8012f22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	f000 f845 	bl	8012f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012f0a:	e00a      	b.n	8012f22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012f0c:	6878      	ldr	r0, [r7, #4]
 8012f0e:	f000 f841 	bl	8012f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012f12:	e006      	b.n	8012f22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f000 f83d 	bl	8012f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8012f20:	e01e      	b.n	8012f60 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012f22:	bf00      	nop
    return;
 8012f24:	e01c      	b.n	8012f60 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8012f26:	69fb      	ldr	r3, [r7, #28]
 8012f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d008      	beq.n	8012f42 <HAL_UART_IRQHandler+0x1d6>
 8012f30:	69bb      	ldr	r3, [r7, #24]
 8012f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d003      	beq.n	8012f42 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8012f3a:	6878      	ldr	r0, [r7, #4]
 8012f3c:	f000 f8b0 	bl	80130a0 <UART_Transmit_IT>
    return;
 8012f40:	e00f      	b.n	8012f62 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8012f42:	69fb      	ldr	r3, [r7, #28]
 8012f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d00a      	beq.n	8012f62 <HAL_UART_IRQHandler+0x1f6>
 8012f4c:	69bb      	ldr	r3, [r7, #24]
 8012f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d005      	beq.n	8012f62 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f000 f8f8 	bl	801314c <UART_EndTransmit_IT>
    return;
 8012f5c:	bf00      	nop
 8012f5e:	e000      	b.n	8012f62 <HAL_UART_IRQHandler+0x1f6>
    return;
 8012f60:	bf00      	nop
  }
}
 8012f62:	3720      	adds	r7, #32
 8012f64:	46bd      	mov	sp, r7
 8012f66:	bd80      	pop	{r7, pc}
 8012f68:	08013079 	.word	0x08013079

08012f6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012f6c:	b480      	push	{r7}
 8012f6e:	b083      	sub	sp, #12
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8012f74:	bf00      	nop
 8012f76:	370c      	adds	r7, #12
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7e:	4770      	bx	lr

08012f80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8012f80:	b480      	push	{r7}
 8012f82:	b083      	sub	sp, #12
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8012f88:	bf00      	nop
 8012f8a:	370c      	adds	r7, #12
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f92:	4770      	bx	lr

08012f94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012f94:	b480      	push	{r7}
 8012f96:	b083      	sub	sp, #12
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8012f9c:	bf00      	nop
 8012f9e:	370c      	adds	r7, #12
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa6:	4770      	bx	lr

08012fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b084      	sub	sp, #16
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	60f8      	str	r0, [r7, #12]
 8012fb0:	60b9      	str	r1, [r7, #8]
 8012fb2:	603b      	str	r3, [r7, #0]
 8012fb4:	4613      	mov	r3, r2
 8012fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012fb8:	e02c      	b.n	8013014 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012fba:	69bb      	ldr	r3, [r7, #24]
 8012fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fc0:	d028      	beq.n	8013014 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8012fc2:	69bb      	ldr	r3, [r7, #24]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d007      	beq.n	8012fd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8012fc8:	f7fb fbc2 	bl	800e750 <HAL_GetTick>
 8012fcc:	4602      	mov	r2, r0
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	1ad3      	subs	r3, r2, r3
 8012fd2:	69ba      	ldr	r2, [r7, #24]
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d21d      	bcs.n	8013014 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	68da      	ldr	r2, [r3, #12]
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8012fe6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	695a      	ldr	r2, [r3, #20]
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	f022 0201 	bic.w	r2, r2, #1
 8012ff6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	2220      	movs	r2, #32
 8012ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	2220      	movs	r2, #32
 8013004:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	2200      	movs	r2, #0
 801300c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8013010:	2303      	movs	r3, #3
 8013012:	e00f      	b.n	8013034 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	681a      	ldr	r2, [r3, #0]
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	4013      	ands	r3, r2
 801301e:	68ba      	ldr	r2, [r7, #8]
 8013020:	429a      	cmp	r2, r3
 8013022:	bf0c      	ite	eq
 8013024:	2301      	moveq	r3, #1
 8013026:	2300      	movne	r3, #0
 8013028:	b2db      	uxtb	r3, r3
 801302a:	461a      	mov	r2, r3
 801302c:	79fb      	ldrb	r3, [r7, #7]
 801302e:	429a      	cmp	r2, r3
 8013030:	d0c3      	beq.n	8012fba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013032:	2300      	movs	r3, #0
}
 8013034:	4618      	mov	r0, r3
 8013036:	3710      	adds	r7, #16
 8013038:	46bd      	mov	sp, r7
 801303a:	bd80      	pop	{r7, pc}

0801303c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801303c:	b480      	push	{r7}
 801303e:	b083      	sub	sp, #12
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	68da      	ldr	r2, [r3, #12]
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8013052:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	695a      	ldr	r2, [r3, #20]
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	f022 0201 	bic.w	r2, r2, #1
 8013062:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	2220      	movs	r2, #32
 8013068:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 801306c:	bf00      	nop
 801306e:	370c      	adds	r7, #12
 8013070:	46bd      	mov	sp, r7
 8013072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013076:	4770      	bx	lr

08013078 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013078:	b580      	push	{r7, lr}
 801307a:	b084      	sub	sp, #16
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013084:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	2200      	movs	r2, #0
 801308a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	2200      	movs	r2, #0
 8013090:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013092:	68f8      	ldr	r0, [r7, #12]
 8013094:	f7ff ff7e 	bl	8012f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013098:	bf00      	nop
 801309a:	3710      	adds	r7, #16
 801309c:	46bd      	mov	sp, r7
 801309e:	bd80      	pop	{r7, pc}

080130a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80130a0:	b480      	push	{r7}
 80130a2:	b085      	sub	sp, #20
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80130ae:	b2db      	uxtb	r3, r3
 80130b0:	2b21      	cmp	r3, #33	; 0x21
 80130b2:	d144      	bne.n	801313e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	689b      	ldr	r3, [r3, #8]
 80130b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80130bc:	d11a      	bne.n	80130f4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	6a1b      	ldr	r3, [r3, #32]
 80130c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	881b      	ldrh	r3, [r3, #0]
 80130c8:	461a      	mov	r2, r3
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80130d2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	691b      	ldr	r3, [r3, #16]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d105      	bne.n	80130e8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	6a1b      	ldr	r3, [r3, #32]
 80130e0:	1c9a      	adds	r2, r3, #2
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	621a      	str	r2, [r3, #32]
 80130e6:	e00e      	b.n	8013106 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	6a1b      	ldr	r3, [r3, #32]
 80130ec:	1c5a      	adds	r2, r3, #1
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	621a      	str	r2, [r3, #32]
 80130f2:	e008      	b.n	8013106 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	6a1b      	ldr	r3, [r3, #32]
 80130f8:	1c59      	adds	r1, r3, #1
 80130fa:	687a      	ldr	r2, [r7, #4]
 80130fc:	6211      	str	r1, [r2, #32]
 80130fe:	781a      	ldrb	r2, [r3, #0]
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801310a:	b29b      	uxth	r3, r3
 801310c:	3b01      	subs	r3, #1
 801310e:	b29b      	uxth	r3, r3
 8013110:	687a      	ldr	r2, [r7, #4]
 8013112:	4619      	mov	r1, r3
 8013114:	84d1      	strh	r1, [r2, #38]	; 0x26
 8013116:	2b00      	cmp	r3, #0
 8013118:	d10f      	bne.n	801313a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	68da      	ldr	r2, [r3, #12]
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013128:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	68da      	ldr	r2, [r3, #12]
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013138:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801313a:	2300      	movs	r3, #0
 801313c:	e000      	b.n	8013140 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801313e:	2302      	movs	r3, #2
  }
}
 8013140:	4618      	mov	r0, r3
 8013142:	3714      	adds	r7, #20
 8013144:	46bd      	mov	sp, r7
 8013146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314a:	4770      	bx	lr

0801314c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b082      	sub	sp, #8
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	68da      	ldr	r2, [r3, #12]
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013162:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	2220      	movs	r2, #32
 8013168:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801316c:	6878      	ldr	r0, [r7, #4]
 801316e:	f7ff fefd 	bl	8012f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8013172:	2300      	movs	r3, #0
}
 8013174:	4618      	mov	r0, r3
 8013176:	3708      	adds	r7, #8
 8013178:	46bd      	mov	sp, r7
 801317a:	bd80      	pop	{r7, pc}

0801317c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b084      	sub	sp, #16
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801318a:	b2db      	uxtb	r3, r3
 801318c:	2b22      	cmp	r3, #34	; 0x22
 801318e:	d171      	bne.n	8013274 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	689b      	ldr	r3, [r3, #8]
 8013194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013198:	d123      	bne.n	80131e2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801319e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	691b      	ldr	r3, [r3, #16]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d10e      	bne.n	80131c6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	685b      	ldr	r3, [r3, #4]
 80131ae:	b29b      	uxth	r3, r3
 80131b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131b4:	b29a      	uxth	r2, r3
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131be:	1c9a      	adds	r2, r3, #2
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	629a      	str	r2, [r3, #40]	; 0x28
 80131c4:	e029      	b.n	801321a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	685b      	ldr	r3, [r3, #4]
 80131cc:	b29b      	uxth	r3, r3
 80131ce:	b2db      	uxtb	r3, r3
 80131d0:	b29a      	uxth	r2, r3
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131da:	1c5a      	adds	r2, r3, #1
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	629a      	str	r2, [r3, #40]	; 0x28
 80131e0:	e01b      	b.n	801321a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	691b      	ldr	r3, [r3, #16]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d10a      	bne.n	8013200 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	6858      	ldr	r0, [r3, #4]
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131f4:	1c59      	adds	r1, r3, #1
 80131f6:	687a      	ldr	r2, [r7, #4]
 80131f8:	6291      	str	r1, [r2, #40]	; 0x28
 80131fa:	b2c2      	uxtb	r2, r0
 80131fc:	701a      	strb	r2, [r3, #0]
 80131fe:	e00c      	b.n	801321a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	685b      	ldr	r3, [r3, #4]
 8013206:	b2da      	uxtb	r2, r3
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801320c:	1c58      	adds	r0, r3, #1
 801320e:	6879      	ldr	r1, [r7, #4]
 8013210:	6288      	str	r0, [r1, #40]	; 0x28
 8013212:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013216:	b2d2      	uxtb	r2, r2
 8013218:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801321e:	b29b      	uxth	r3, r3
 8013220:	3b01      	subs	r3, #1
 8013222:	b29b      	uxth	r3, r3
 8013224:	687a      	ldr	r2, [r7, #4]
 8013226:	4619      	mov	r1, r3
 8013228:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801322a:	2b00      	cmp	r3, #0
 801322c:	d120      	bne.n	8013270 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	68da      	ldr	r2, [r3, #12]
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	f022 0220 	bic.w	r2, r2, #32
 801323c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	68da      	ldr	r2, [r3, #12]
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801324c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	695a      	ldr	r2, [r3, #20]
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	f022 0201 	bic.w	r2, r2, #1
 801325c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	2220      	movs	r2, #32
 8013262:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8013266:	6878      	ldr	r0, [r7, #4]
 8013268:	f7ff fe8a 	bl	8012f80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 801326c:	2300      	movs	r3, #0
 801326e:	e002      	b.n	8013276 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8013270:	2300      	movs	r3, #0
 8013272:	e000      	b.n	8013276 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8013274:	2302      	movs	r3, #2
  }
}
 8013276:	4618      	mov	r0, r3
 8013278:	3710      	adds	r7, #16
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}
	...

08013280 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013284:	b085      	sub	sp, #20
 8013286:	af00      	add	r7, sp, #0
 8013288:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	691b      	ldr	r3, [r3, #16]
 8013290:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	68da      	ldr	r2, [r3, #12]
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	430a      	orrs	r2, r1
 801329e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	689a      	ldr	r2, [r3, #8]
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	691b      	ldr	r3, [r3, #16]
 80132a8:	431a      	orrs	r2, r3
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	695b      	ldr	r3, [r3, #20]
 80132ae:	431a      	orrs	r2, r3
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	69db      	ldr	r3, [r3, #28]
 80132b4:	4313      	orrs	r3, r2
 80132b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	68db      	ldr	r3, [r3, #12]
 80132be:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80132c2:	f023 030c 	bic.w	r3, r3, #12
 80132c6:	687a      	ldr	r2, [r7, #4]
 80132c8:	6812      	ldr	r2, [r2, #0]
 80132ca:	68f9      	ldr	r1, [r7, #12]
 80132cc:	430b      	orrs	r3, r1
 80132ce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	695b      	ldr	r3, [r3, #20]
 80132d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	699a      	ldr	r2, [r3, #24]
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	430a      	orrs	r2, r1
 80132e4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	69db      	ldr	r3, [r3, #28]
 80132ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80132ee:	f040 818b 	bne.w	8013608 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	4ac1      	ldr	r2, [pc, #772]	; (80135fc <UART_SetConfig+0x37c>)
 80132f8:	4293      	cmp	r3, r2
 80132fa:	d005      	beq.n	8013308 <UART_SetConfig+0x88>
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	4abf      	ldr	r2, [pc, #764]	; (8013600 <UART_SetConfig+0x380>)
 8013302:	4293      	cmp	r3, r2
 8013304:	f040 80bd 	bne.w	8013482 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8013308:	f7fd ffe6 	bl	80112d8 <HAL_RCC_GetPCLK2Freq>
 801330c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801330e:	68bb      	ldr	r3, [r7, #8]
 8013310:	461d      	mov	r5, r3
 8013312:	f04f 0600 	mov.w	r6, #0
 8013316:	46a8      	mov	r8, r5
 8013318:	46b1      	mov	r9, r6
 801331a:	eb18 0308 	adds.w	r3, r8, r8
 801331e:	eb49 0409 	adc.w	r4, r9, r9
 8013322:	4698      	mov	r8, r3
 8013324:	46a1      	mov	r9, r4
 8013326:	eb18 0805 	adds.w	r8, r8, r5
 801332a:	eb49 0906 	adc.w	r9, r9, r6
 801332e:	f04f 0100 	mov.w	r1, #0
 8013332:	f04f 0200 	mov.w	r2, #0
 8013336:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801333a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801333e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013342:	4688      	mov	r8, r1
 8013344:	4691      	mov	r9, r2
 8013346:	eb18 0005 	adds.w	r0, r8, r5
 801334a:	eb49 0106 	adc.w	r1, r9, r6
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	685b      	ldr	r3, [r3, #4]
 8013352:	461d      	mov	r5, r3
 8013354:	f04f 0600 	mov.w	r6, #0
 8013358:	196b      	adds	r3, r5, r5
 801335a:	eb46 0406 	adc.w	r4, r6, r6
 801335e:	461a      	mov	r2, r3
 8013360:	4623      	mov	r3, r4
 8013362:	f7f5 fba9 	bl	8008ab8 <__aeabi_uldivmod>
 8013366:	4603      	mov	r3, r0
 8013368:	460c      	mov	r4, r1
 801336a:	461a      	mov	r2, r3
 801336c:	4ba5      	ldr	r3, [pc, #660]	; (8013604 <UART_SetConfig+0x384>)
 801336e:	fba3 2302 	umull	r2, r3, r3, r2
 8013372:	095b      	lsrs	r3, r3, #5
 8013374:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013378:	68bb      	ldr	r3, [r7, #8]
 801337a:	461d      	mov	r5, r3
 801337c:	f04f 0600 	mov.w	r6, #0
 8013380:	46a9      	mov	r9, r5
 8013382:	46b2      	mov	sl, r6
 8013384:	eb19 0309 	adds.w	r3, r9, r9
 8013388:	eb4a 040a 	adc.w	r4, sl, sl
 801338c:	4699      	mov	r9, r3
 801338e:	46a2      	mov	sl, r4
 8013390:	eb19 0905 	adds.w	r9, r9, r5
 8013394:	eb4a 0a06 	adc.w	sl, sl, r6
 8013398:	f04f 0100 	mov.w	r1, #0
 801339c:	f04f 0200 	mov.w	r2, #0
 80133a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80133a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80133a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80133ac:	4689      	mov	r9, r1
 80133ae:	4692      	mov	sl, r2
 80133b0:	eb19 0005 	adds.w	r0, r9, r5
 80133b4:	eb4a 0106 	adc.w	r1, sl, r6
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	685b      	ldr	r3, [r3, #4]
 80133bc:	461d      	mov	r5, r3
 80133be:	f04f 0600 	mov.w	r6, #0
 80133c2:	196b      	adds	r3, r5, r5
 80133c4:	eb46 0406 	adc.w	r4, r6, r6
 80133c8:	461a      	mov	r2, r3
 80133ca:	4623      	mov	r3, r4
 80133cc:	f7f5 fb74 	bl	8008ab8 <__aeabi_uldivmod>
 80133d0:	4603      	mov	r3, r0
 80133d2:	460c      	mov	r4, r1
 80133d4:	461a      	mov	r2, r3
 80133d6:	4b8b      	ldr	r3, [pc, #556]	; (8013604 <UART_SetConfig+0x384>)
 80133d8:	fba3 1302 	umull	r1, r3, r3, r2
 80133dc:	095b      	lsrs	r3, r3, #5
 80133de:	2164      	movs	r1, #100	; 0x64
 80133e0:	fb01 f303 	mul.w	r3, r1, r3
 80133e4:	1ad3      	subs	r3, r2, r3
 80133e6:	00db      	lsls	r3, r3, #3
 80133e8:	3332      	adds	r3, #50	; 0x32
 80133ea:	4a86      	ldr	r2, [pc, #536]	; (8013604 <UART_SetConfig+0x384>)
 80133ec:	fba2 2303 	umull	r2, r3, r2, r3
 80133f0:	095b      	lsrs	r3, r3, #5
 80133f2:	005b      	lsls	r3, r3, #1
 80133f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80133f8:	4498      	add	r8, r3
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	461d      	mov	r5, r3
 80133fe:	f04f 0600 	mov.w	r6, #0
 8013402:	46a9      	mov	r9, r5
 8013404:	46b2      	mov	sl, r6
 8013406:	eb19 0309 	adds.w	r3, r9, r9
 801340a:	eb4a 040a 	adc.w	r4, sl, sl
 801340e:	4699      	mov	r9, r3
 8013410:	46a2      	mov	sl, r4
 8013412:	eb19 0905 	adds.w	r9, r9, r5
 8013416:	eb4a 0a06 	adc.w	sl, sl, r6
 801341a:	f04f 0100 	mov.w	r1, #0
 801341e:	f04f 0200 	mov.w	r2, #0
 8013422:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013426:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801342a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801342e:	4689      	mov	r9, r1
 8013430:	4692      	mov	sl, r2
 8013432:	eb19 0005 	adds.w	r0, r9, r5
 8013436:	eb4a 0106 	adc.w	r1, sl, r6
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	685b      	ldr	r3, [r3, #4]
 801343e:	461d      	mov	r5, r3
 8013440:	f04f 0600 	mov.w	r6, #0
 8013444:	196b      	adds	r3, r5, r5
 8013446:	eb46 0406 	adc.w	r4, r6, r6
 801344a:	461a      	mov	r2, r3
 801344c:	4623      	mov	r3, r4
 801344e:	f7f5 fb33 	bl	8008ab8 <__aeabi_uldivmod>
 8013452:	4603      	mov	r3, r0
 8013454:	460c      	mov	r4, r1
 8013456:	461a      	mov	r2, r3
 8013458:	4b6a      	ldr	r3, [pc, #424]	; (8013604 <UART_SetConfig+0x384>)
 801345a:	fba3 1302 	umull	r1, r3, r3, r2
 801345e:	095b      	lsrs	r3, r3, #5
 8013460:	2164      	movs	r1, #100	; 0x64
 8013462:	fb01 f303 	mul.w	r3, r1, r3
 8013466:	1ad3      	subs	r3, r2, r3
 8013468:	00db      	lsls	r3, r3, #3
 801346a:	3332      	adds	r3, #50	; 0x32
 801346c:	4a65      	ldr	r2, [pc, #404]	; (8013604 <UART_SetConfig+0x384>)
 801346e:	fba2 2303 	umull	r2, r3, r2, r3
 8013472:	095b      	lsrs	r3, r3, #5
 8013474:	f003 0207 	and.w	r2, r3, #7
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	4442      	add	r2, r8
 801347e:	609a      	str	r2, [r3, #8]
 8013480:	e26f      	b.n	8013962 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8013482:	f7fd ff15 	bl	80112b0 <HAL_RCC_GetPCLK1Freq>
 8013486:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	461d      	mov	r5, r3
 801348c:	f04f 0600 	mov.w	r6, #0
 8013490:	46a8      	mov	r8, r5
 8013492:	46b1      	mov	r9, r6
 8013494:	eb18 0308 	adds.w	r3, r8, r8
 8013498:	eb49 0409 	adc.w	r4, r9, r9
 801349c:	4698      	mov	r8, r3
 801349e:	46a1      	mov	r9, r4
 80134a0:	eb18 0805 	adds.w	r8, r8, r5
 80134a4:	eb49 0906 	adc.w	r9, r9, r6
 80134a8:	f04f 0100 	mov.w	r1, #0
 80134ac:	f04f 0200 	mov.w	r2, #0
 80134b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80134b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80134b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80134bc:	4688      	mov	r8, r1
 80134be:	4691      	mov	r9, r2
 80134c0:	eb18 0005 	adds.w	r0, r8, r5
 80134c4:	eb49 0106 	adc.w	r1, r9, r6
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	685b      	ldr	r3, [r3, #4]
 80134cc:	461d      	mov	r5, r3
 80134ce:	f04f 0600 	mov.w	r6, #0
 80134d2:	196b      	adds	r3, r5, r5
 80134d4:	eb46 0406 	adc.w	r4, r6, r6
 80134d8:	461a      	mov	r2, r3
 80134da:	4623      	mov	r3, r4
 80134dc:	f7f5 faec 	bl	8008ab8 <__aeabi_uldivmod>
 80134e0:	4603      	mov	r3, r0
 80134e2:	460c      	mov	r4, r1
 80134e4:	461a      	mov	r2, r3
 80134e6:	4b47      	ldr	r3, [pc, #284]	; (8013604 <UART_SetConfig+0x384>)
 80134e8:	fba3 2302 	umull	r2, r3, r3, r2
 80134ec:	095b      	lsrs	r3, r3, #5
 80134ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	461d      	mov	r5, r3
 80134f6:	f04f 0600 	mov.w	r6, #0
 80134fa:	46a9      	mov	r9, r5
 80134fc:	46b2      	mov	sl, r6
 80134fe:	eb19 0309 	adds.w	r3, r9, r9
 8013502:	eb4a 040a 	adc.w	r4, sl, sl
 8013506:	4699      	mov	r9, r3
 8013508:	46a2      	mov	sl, r4
 801350a:	eb19 0905 	adds.w	r9, r9, r5
 801350e:	eb4a 0a06 	adc.w	sl, sl, r6
 8013512:	f04f 0100 	mov.w	r1, #0
 8013516:	f04f 0200 	mov.w	r2, #0
 801351a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801351e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013522:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013526:	4689      	mov	r9, r1
 8013528:	4692      	mov	sl, r2
 801352a:	eb19 0005 	adds.w	r0, r9, r5
 801352e:	eb4a 0106 	adc.w	r1, sl, r6
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	685b      	ldr	r3, [r3, #4]
 8013536:	461d      	mov	r5, r3
 8013538:	f04f 0600 	mov.w	r6, #0
 801353c:	196b      	adds	r3, r5, r5
 801353e:	eb46 0406 	adc.w	r4, r6, r6
 8013542:	461a      	mov	r2, r3
 8013544:	4623      	mov	r3, r4
 8013546:	f7f5 fab7 	bl	8008ab8 <__aeabi_uldivmod>
 801354a:	4603      	mov	r3, r0
 801354c:	460c      	mov	r4, r1
 801354e:	461a      	mov	r2, r3
 8013550:	4b2c      	ldr	r3, [pc, #176]	; (8013604 <UART_SetConfig+0x384>)
 8013552:	fba3 1302 	umull	r1, r3, r3, r2
 8013556:	095b      	lsrs	r3, r3, #5
 8013558:	2164      	movs	r1, #100	; 0x64
 801355a:	fb01 f303 	mul.w	r3, r1, r3
 801355e:	1ad3      	subs	r3, r2, r3
 8013560:	00db      	lsls	r3, r3, #3
 8013562:	3332      	adds	r3, #50	; 0x32
 8013564:	4a27      	ldr	r2, [pc, #156]	; (8013604 <UART_SetConfig+0x384>)
 8013566:	fba2 2303 	umull	r2, r3, r2, r3
 801356a:	095b      	lsrs	r3, r3, #5
 801356c:	005b      	lsls	r3, r3, #1
 801356e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013572:	4498      	add	r8, r3
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	461d      	mov	r5, r3
 8013578:	f04f 0600 	mov.w	r6, #0
 801357c:	46a9      	mov	r9, r5
 801357e:	46b2      	mov	sl, r6
 8013580:	eb19 0309 	adds.w	r3, r9, r9
 8013584:	eb4a 040a 	adc.w	r4, sl, sl
 8013588:	4699      	mov	r9, r3
 801358a:	46a2      	mov	sl, r4
 801358c:	eb19 0905 	adds.w	r9, r9, r5
 8013590:	eb4a 0a06 	adc.w	sl, sl, r6
 8013594:	f04f 0100 	mov.w	r1, #0
 8013598:	f04f 0200 	mov.w	r2, #0
 801359c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80135a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80135a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80135a8:	4689      	mov	r9, r1
 80135aa:	4692      	mov	sl, r2
 80135ac:	eb19 0005 	adds.w	r0, r9, r5
 80135b0:	eb4a 0106 	adc.w	r1, sl, r6
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	685b      	ldr	r3, [r3, #4]
 80135b8:	461d      	mov	r5, r3
 80135ba:	f04f 0600 	mov.w	r6, #0
 80135be:	196b      	adds	r3, r5, r5
 80135c0:	eb46 0406 	adc.w	r4, r6, r6
 80135c4:	461a      	mov	r2, r3
 80135c6:	4623      	mov	r3, r4
 80135c8:	f7f5 fa76 	bl	8008ab8 <__aeabi_uldivmod>
 80135cc:	4603      	mov	r3, r0
 80135ce:	460c      	mov	r4, r1
 80135d0:	461a      	mov	r2, r3
 80135d2:	4b0c      	ldr	r3, [pc, #48]	; (8013604 <UART_SetConfig+0x384>)
 80135d4:	fba3 1302 	umull	r1, r3, r3, r2
 80135d8:	095b      	lsrs	r3, r3, #5
 80135da:	2164      	movs	r1, #100	; 0x64
 80135dc:	fb01 f303 	mul.w	r3, r1, r3
 80135e0:	1ad3      	subs	r3, r2, r3
 80135e2:	00db      	lsls	r3, r3, #3
 80135e4:	3332      	adds	r3, #50	; 0x32
 80135e6:	4a07      	ldr	r2, [pc, #28]	; (8013604 <UART_SetConfig+0x384>)
 80135e8:	fba2 2303 	umull	r2, r3, r2, r3
 80135ec:	095b      	lsrs	r3, r3, #5
 80135ee:	f003 0207 	and.w	r2, r3, #7
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	4442      	add	r2, r8
 80135f8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80135fa:	e1b2      	b.n	8013962 <UART_SetConfig+0x6e2>
 80135fc:	40011000 	.word	0x40011000
 8013600:	40011400 	.word	0x40011400
 8013604:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	4ad7      	ldr	r2, [pc, #860]	; (801396c <UART_SetConfig+0x6ec>)
 801360e:	4293      	cmp	r3, r2
 8013610:	d005      	beq.n	801361e <UART_SetConfig+0x39e>
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	4ad6      	ldr	r2, [pc, #856]	; (8013970 <UART_SetConfig+0x6f0>)
 8013618:	4293      	cmp	r3, r2
 801361a:	f040 80d1 	bne.w	80137c0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801361e:	f7fd fe5b 	bl	80112d8 <HAL_RCC_GetPCLK2Freq>
 8013622:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	469a      	mov	sl, r3
 8013628:	f04f 0b00 	mov.w	fp, #0
 801362c:	46d0      	mov	r8, sl
 801362e:	46d9      	mov	r9, fp
 8013630:	eb18 0308 	adds.w	r3, r8, r8
 8013634:	eb49 0409 	adc.w	r4, r9, r9
 8013638:	4698      	mov	r8, r3
 801363a:	46a1      	mov	r9, r4
 801363c:	eb18 080a 	adds.w	r8, r8, sl
 8013640:	eb49 090b 	adc.w	r9, r9, fp
 8013644:	f04f 0100 	mov.w	r1, #0
 8013648:	f04f 0200 	mov.w	r2, #0
 801364c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013650:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013654:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013658:	4688      	mov	r8, r1
 801365a:	4691      	mov	r9, r2
 801365c:	eb1a 0508 	adds.w	r5, sl, r8
 8013660:	eb4b 0609 	adc.w	r6, fp, r9
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	685b      	ldr	r3, [r3, #4]
 8013668:	4619      	mov	r1, r3
 801366a:	f04f 0200 	mov.w	r2, #0
 801366e:	f04f 0300 	mov.w	r3, #0
 8013672:	f04f 0400 	mov.w	r4, #0
 8013676:	0094      	lsls	r4, r2, #2
 8013678:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801367c:	008b      	lsls	r3, r1, #2
 801367e:	461a      	mov	r2, r3
 8013680:	4623      	mov	r3, r4
 8013682:	4628      	mov	r0, r5
 8013684:	4631      	mov	r1, r6
 8013686:	f7f5 fa17 	bl	8008ab8 <__aeabi_uldivmod>
 801368a:	4603      	mov	r3, r0
 801368c:	460c      	mov	r4, r1
 801368e:	461a      	mov	r2, r3
 8013690:	4bb8      	ldr	r3, [pc, #736]	; (8013974 <UART_SetConfig+0x6f4>)
 8013692:	fba3 2302 	umull	r2, r3, r3, r2
 8013696:	095b      	lsrs	r3, r3, #5
 8013698:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801369c:	68bb      	ldr	r3, [r7, #8]
 801369e:	469b      	mov	fp, r3
 80136a0:	f04f 0c00 	mov.w	ip, #0
 80136a4:	46d9      	mov	r9, fp
 80136a6:	46e2      	mov	sl, ip
 80136a8:	eb19 0309 	adds.w	r3, r9, r9
 80136ac:	eb4a 040a 	adc.w	r4, sl, sl
 80136b0:	4699      	mov	r9, r3
 80136b2:	46a2      	mov	sl, r4
 80136b4:	eb19 090b 	adds.w	r9, r9, fp
 80136b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80136bc:	f04f 0100 	mov.w	r1, #0
 80136c0:	f04f 0200 	mov.w	r2, #0
 80136c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80136c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80136cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80136d0:	4689      	mov	r9, r1
 80136d2:	4692      	mov	sl, r2
 80136d4:	eb1b 0509 	adds.w	r5, fp, r9
 80136d8:	eb4c 060a 	adc.w	r6, ip, sl
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	685b      	ldr	r3, [r3, #4]
 80136e0:	4619      	mov	r1, r3
 80136e2:	f04f 0200 	mov.w	r2, #0
 80136e6:	f04f 0300 	mov.w	r3, #0
 80136ea:	f04f 0400 	mov.w	r4, #0
 80136ee:	0094      	lsls	r4, r2, #2
 80136f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80136f4:	008b      	lsls	r3, r1, #2
 80136f6:	461a      	mov	r2, r3
 80136f8:	4623      	mov	r3, r4
 80136fa:	4628      	mov	r0, r5
 80136fc:	4631      	mov	r1, r6
 80136fe:	f7f5 f9db 	bl	8008ab8 <__aeabi_uldivmod>
 8013702:	4603      	mov	r3, r0
 8013704:	460c      	mov	r4, r1
 8013706:	461a      	mov	r2, r3
 8013708:	4b9a      	ldr	r3, [pc, #616]	; (8013974 <UART_SetConfig+0x6f4>)
 801370a:	fba3 1302 	umull	r1, r3, r3, r2
 801370e:	095b      	lsrs	r3, r3, #5
 8013710:	2164      	movs	r1, #100	; 0x64
 8013712:	fb01 f303 	mul.w	r3, r1, r3
 8013716:	1ad3      	subs	r3, r2, r3
 8013718:	011b      	lsls	r3, r3, #4
 801371a:	3332      	adds	r3, #50	; 0x32
 801371c:	4a95      	ldr	r2, [pc, #596]	; (8013974 <UART_SetConfig+0x6f4>)
 801371e:	fba2 2303 	umull	r2, r3, r2, r3
 8013722:	095b      	lsrs	r3, r3, #5
 8013724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013728:	4498      	add	r8, r3
 801372a:	68bb      	ldr	r3, [r7, #8]
 801372c:	469b      	mov	fp, r3
 801372e:	f04f 0c00 	mov.w	ip, #0
 8013732:	46d9      	mov	r9, fp
 8013734:	46e2      	mov	sl, ip
 8013736:	eb19 0309 	adds.w	r3, r9, r9
 801373a:	eb4a 040a 	adc.w	r4, sl, sl
 801373e:	4699      	mov	r9, r3
 8013740:	46a2      	mov	sl, r4
 8013742:	eb19 090b 	adds.w	r9, r9, fp
 8013746:	eb4a 0a0c 	adc.w	sl, sl, ip
 801374a:	f04f 0100 	mov.w	r1, #0
 801374e:	f04f 0200 	mov.w	r2, #0
 8013752:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013756:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801375a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801375e:	4689      	mov	r9, r1
 8013760:	4692      	mov	sl, r2
 8013762:	eb1b 0509 	adds.w	r5, fp, r9
 8013766:	eb4c 060a 	adc.w	r6, ip, sl
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	685b      	ldr	r3, [r3, #4]
 801376e:	4619      	mov	r1, r3
 8013770:	f04f 0200 	mov.w	r2, #0
 8013774:	f04f 0300 	mov.w	r3, #0
 8013778:	f04f 0400 	mov.w	r4, #0
 801377c:	0094      	lsls	r4, r2, #2
 801377e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013782:	008b      	lsls	r3, r1, #2
 8013784:	461a      	mov	r2, r3
 8013786:	4623      	mov	r3, r4
 8013788:	4628      	mov	r0, r5
 801378a:	4631      	mov	r1, r6
 801378c:	f7f5 f994 	bl	8008ab8 <__aeabi_uldivmod>
 8013790:	4603      	mov	r3, r0
 8013792:	460c      	mov	r4, r1
 8013794:	461a      	mov	r2, r3
 8013796:	4b77      	ldr	r3, [pc, #476]	; (8013974 <UART_SetConfig+0x6f4>)
 8013798:	fba3 1302 	umull	r1, r3, r3, r2
 801379c:	095b      	lsrs	r3, r3, #5
 801379e:	2164      	movs	r1, #100	; 0x64
 80137a0:	fb01 f303 	mul.w	r3, r1, r3
 80137a4:	1ad3      	subs	r3, r2, r3
 80137a6:	011b      	lsls	r3, r3, #4
 80137a8:	3332      	adds	r3, #50	; 0x32
 80137aa:	4a72      	ldr	r2, [pc, #456]	; (8013974 <UART_SetConfig+0x6f4>)
 80137ac:	fba2 2303 	umull	r2, r3, r2, r3
 80137b0:	095b      	lsrs	r3, r3, #5
 80137b2:	f003 020f 	and.w	r2, r3, #15
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	4442      	add	r2, r8
 80137bc:	609a      	str	r2, [r3, #8]
 80137be:	e0d0      	b.n	8013962 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80137c0:	f7fd fd76 	bl	80112b0 <HAL_RCC_GetPCLK1Freq>
 80137c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80137c6:	68bb      	ldr	r3, [r7, #8]
 80137c8:	469a      	mov	sl, r3
 80137ca:	f04f 0b00 	mov.w	fp, #0
 80137ce:	46d0      	mov	r8, sl
 80137d0:	46d9      	mov	r9, fp
 80137d2:	eb18 0308 	adds.w	r3, r8, r8
 80137d6:	eb49 0409 	adc.w	r4, r9, r9
 80137da:	4698      	mov	r8, r3
 80137dc:	46a1      	mov	r9, r4
 80137de:	eb18 080a 	adds.w	r8, r8, sl
 80137e2:	eb49 090b 	adc.w	r9, r9, fp
 80137e6:	f04f 0100 	mov.w	r1, #0
 80137ea:	f04f 0200 	mov.w	r2, #0
 80137ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80137f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80137f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80137fa:	4688      	mov	r8, r1
 80137fc:	4691      	mov	r9, r2
 80137fe:	eb1a 0508 	adds.w	r5, sl, r8
 8013802:	eb4b 0609 	adc.w	r6, fp, r9
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	685b      	ldr	r3, [r3, #4]
 801380a:	4619      	mov	r1, r3
 801380c:	f04f 0200 	mov.w	r2, #0
 8013810:	f04f 0300 	mov.w	r3, #0
 8013814:	f04f 0400 	mov.w	r4, #0
 8013818:	0094      	lsls	r4, r2, #2
 801381a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801381e:	008b      	lsls	r3, r1, #2
 8013820:	461a      	mov	r2, r3
 8013822:	4623      	mov	r3, r4
 8013824:	4628      	mov	r0, r5
 8013826:	4631      	mov	r1, r6
 8013828:	f7f5 f946 	bl	8008ab8 <__aeabi_uldivmod>
 801382c:	4603      	mov	r3, r0
 801382e:	460c      	mov	r4, r1
 8013830:	461a      	mov	r2, r3
 8013832:	4b50      	ldr	r3, [pc, #320]	; (8013974 <UART_SetConfig+0x6f4>)
 8013834:	fba3 2302 	umull	r2, r3, r3, r2
 8013838:	095b      	lsrs	r3, r3, #5
 801383a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801383e:	68bb      	ldr	r3, [r7, #8]
 8013840:	469b      	mov	fp, r3
 8013842:	f04f 0c00 	mov.w	ip, #0
 8013846:	46d9      	mov	r9, fp
 8013848:	46e2      	mov	sl, ip
 801384a:	eb19 0309 	adds.w	r3, r9, r9
 801384e:	eb4a 040a 	adc.w	r4, sl, sl
 8013852:	4699      	mov	r9, r3
 8013854:	46a2      	mov	sl, r4
 8013856:	eb19 090b 	adds.w	r9, r9, fp
 801385a:	eb4a 0a0c 	adc.w	sl, sl, ip
 801385e:	f04f 0100 	mov.w	r1, #0
 8013862:	f04f 0200 	mov.w	r2, #0
 8013866:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801386a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801386e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013872:	4689      	mov	r9, r1
 8013874:	4692      	mov	sl, r2
 8013876:	eb1b 0509 	adds.w	r5, fp, r9
 801387a:	eb4c 060a 	adc.w	r6, ip, sl
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	685b      	ldr	r3, [r3, #4]
 8013882:	4619      	mov	r1, r3
 8013884:	f04f 0200 	mov.w	r2, #0
 8013888:	f04f 0300 	mov.w	r3, #0
 801388c:	f04f 0400 	mov.w	r4, #0
 8013890:	0094      	lsls	r4, r2, #2
 8013892:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013896:	008b      	lsls	r3, r1, #2
 8013898:	461a      	mov	r2, r3
 801389a:	4623      	mov	r3, r4
 801389c:	4628      	mov	r0, r5
 801389e:	4631      	mov	r1, r6
 80138a0:	f7f5 f90a 	bl	8008ab8 <__aeabi_uldivmod>
 80138a4:	4603      	mov	r3, r0
 80138a6:	460c      	mov	r4, r1
 80138a8:	461a      	mov	r2, r3
 80138aa:	4b32      	ldr	r3, [pc, #200]	; (8013974 <UART_SetConfig+0x6f4>)
 80138ac:	fba3 1302 	umull	r1, r3, r3, r2
 80138b0:	095b      	lsrs	r3, r3, #5
 80138b2:	2164      	movs	r1, #100	; 0x64
 80138b4:	fb01 f303 	mul.w	r3, r1, r3
 80138b8:	1ad3      	subs	r3, r2, r3
 80138ba:	011b      	lsls	r3, r3, #4
 80138bc:	3332      	adds	r3, #50	; 0x32
 80138be:	4a2d      	ldr	r2, [pc, #180]	; (8013974 <UART_SetConfig+0x6f4>)
 80138c0:	fba2 2303 	umull	r2, r3, r2, r3
 80138c4:	095b      	lsrs	r3, r3, #5
 80138c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80138ca:	4498      	add	r8, r3
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	469b      	mov	fp, r3
 80138d0:	f04f 0c00 	mov.w	ip, #0
 80138d4:	46d9      	mov	r9, fp
 80138d6:	46e2      	mov	sl, ip
 80138d8:	eb19 0309 	adds.w	r3, r9, r9
 80138dc:	eb4a 040a 	adc.w	r4, sl, sl
 80138e0:	4699      	mov	r9, r3
 80138e2:	46a2      	mov	sl, r4
 80138e4:	eb19 090b 	adds.w	r9, r9, fp
 80138e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80138ec:	f04f 0100 	mov.w	r1, #0
 80138f0:	f04f 0200 	mov.w	r2, #0
 80138f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80138f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80138fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013900:	4689      	mov	r9, r1
 8013902:	4692      	mov	sl, r2
 8013904:	eb1b 0509 	adds.w	r5, fp, r9
 8013908:	eb4c 060a 	adc.w	r6, ip, sl
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	685b      	ldr	r3, [r3, #4]
 8013910:	4619      	mov	r1, r3
 8013912:	f04f 0200 	mov.w	r2, #0
 8013916:	f04f 0300 	mov.w	r3, #0
 801391a:	f04f 0400 	mov.w	r4, #0
 801391e:	0094      	lsls	r4, r2, #2
 8013920:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013924:	008b      	lsls	r3, r1, #2
 8013926:	461a      	mov	r2, r3
 8013928:	4623      	mov	r3, r4
 801392a:	4628      	mov	r0, r5
 801392c:	4631      	mov	r1, r6
 801392e:	f7f5 f8c3 	bl	8008ab8 <__aeabi_uldivmod>
 8013932:	4603      	mov	r3, r0
 8013934:	460c      	mov	r4, r1
 8013936:	461a      	mov	r2, r3
 8013938:	4b0e      	ldr	r3, [pc, #56]	; (8013974 <UART_SetConfig+0x6f4>)
 801393a:	fba3 1302 	umull	r1, r3, r3, r2
 801393e:	095b      	lsrs	r3, r3, #5
 8013940:	2164      	movs	r1, #100	; 0x64
 8013942:	fb01 f303 	mul.w	r3, r1, r3
 8013946:	1ad3      	subs	r3, r2, r3
 8013948:	011b      	lsls	r3, r3, #4
 801394a:	3332      	adds	r3, #50	; 0x32
 801394c:	4a09      	ldr	r2, [pc, #36]	; (8013974 <UART_SetConfig+0x6f4>)
 801394e:	fba2 2303 	umull	r2, r3, r2, r3
 8013952:	095b      	lsrs	r3, r3, #5
 8013954:	f003 020f 	and.w	r2, r3, #15
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	4442      	add	r2, r8
 801395e:	609a      	str	r2, [r3, #8]
}
 8013960:	e7ff      	b.n	8013962 <UART_SetConfig+0x6e2>
 8013962:	bf00      	nop
 8013964:	3714      	adds	r7, #20
 8013966:	46bd      	mov	sp, r7
 8013968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801396c:	40011000 	.word	0x40011000
 8013970:	40011400 	.word	0x40011400
 8013974:	51eb851f 	.word	0x51eb851f

08013978 <__errno>:
 8013978:	4b01      	ldr	r3, [pc, #4]	; (8013980 <__errno+0x8>)
 801397a:	6818      	ldr	r0, [r3, #0]
 801397c:	4770      	bx	lr
 801397e:	bf00      	nop
 8013980:	20000018 	.word	0x20000018

08013984 <__libc_init_array>:
 8013984:	b570      	push	{r4, r5, r6, lr}
 8013986:	4e0d      	ldr	r6, [pc, #52]	; (80139bc <__libc_init_array+0x38>)
 8013988:	4c0d      	ldr	r4, [pc, #52]	; (80139c0 <__libc_init_array+0x3c>)
 801398a:	1ba4      	subs	r4, r4, r6
 801398c:	10a4      	asrs	r4, r4, #2
 801398e:	2500      	movs	r5, #0
 8013990:	42a5      	cmp	r5, r4
 8013992:	d109      	bne.n	80139a8 <__libc_init_array+0x24>
 8013994:	4e0b      	ldr	r6, [pc, #44]	; (80139c4 <__libc_init_array+0x40>)
 8013996:	4c0c      	ldr	r4, [pc, #48]	; (80139c8 <__libc_init_array+0x44>)
 8013998:	f002 fd2a 	bl	80163f0 <_init>
 801399c:	1ba4      	subs	r4, r4, r6
 801399e:	10a4      	asrs	r4, r4, #2
 80139a0:	2500      	movs	r5, #0
 80139a2:	42a5      	cmp	r5, r4
 80139a4:	d105      	bne.n	80139b2 <__libc_init_array+0x2e>
 80139a6:	bd70      	pop	{r4, r5, r6, pc}
 80139a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80139ac:	4798      	blx	r3
 80139ae:	3501      	adds	r5, #1
 80139b0:	e7ee      	b.n	8013990 <__libc_init_array+0xc>
 80139b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80139b6:	4798      	blx	r3
 80139b8:	3501      	adds	r5, #1
 80139ba:	e7f2      	b.n	80139a2 <__libc_init_array+0x1e>
 80139bc:	080167a0 	.word	0x080167a0
 80139c0:	080167a0 	.word	0x080167a0
 80139c4:	080167a0 	.word	0x080167a0
 80139c8:	080167a4 	.word	0x080167a4

080139cc <memcpy>:
 80139cc:	b510      	push	{r4, lr}
 80139ce:	1e43      	subs	r3, r0, #1
 80139d0:	440a      	add	r2, r1
 80139d2:	4291      	cmp	r1, r2
 80139d4:	d100      	bne.n	80139d8 <memcpy+0xc>
 80139d6:	bd10      	pop	{r4, pc}
 80139d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80139dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80139e0:	e7f7      	b.n	80139d2 <memcpy+0x6>

080139e2 <memset>:
 80139e2:	4402      	add	r2, r0
 80139e4:	4603      	mov	r3, r0
 80139e6:	4293      	cmp	r3, r2
 80139e8:	d100      	bne.n	80139ec <memset+0xa>
 80139ea:	4770      	bx	lr
 80139ec:	f803 1b01 	strb.w	r1, [r3], #1
 80139f0:	e7f9      	b.n	80139e6 <memset+0x4>

080139f2 <__cvt>:
 80139f2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80139f6:	ec55 4b10 	vmov	r4, r5, d0
 80139fa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80139fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013a00:	2d00      	cmp	r5, #0
 8013a02:	460e      	mov	r6, r1
 8013a04:	4691      	mov	r9, r2
 8013a06:	4619      	mov	r1, r3
 8013a08:	bfb8      	it	lt
 8013a0a:	4622      	movlt	r2, r4
 8013a0c:	462b      	mov	r3, r5
 8013a0e:	f027 0720 	bic.w	r7, r7, #32
 8013a12:	bfbb      	ittet	lt
 8013a14:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013a18:	461d      	movlt	r5, r3
 8013a1a:	2300      	movge	r3, #0
 8013a1c:	232d      	movlt	r3, #45	; 0x2d
 8013a1e:	bfb8      	it	lt
 8013a20:	4614      	movlt	r4, r2
 8013a22:	2f46      	cmp	r7, #70	; 0x46
 8013a24:	700b      	strb	r3, [r1, #0]
 8013a26:	d004      	beq.n	8013a32 <__cvt+0x40>
 8013a28:	2f45      	cmp	r7, #69	; 0x45
 8013a2a:	d100      	bne.n	8013a2e <__cvt+0x3c>
 8013a2c:	3601      	adds	r6, #1
 8013a2e:	2102      	movs	r1, #2
 8013a30:	e000      	b.n	8013a34 <__cvt+0x42>
 8013a32:	2103      	movs	r1, #3
 8013a34:	ab03      	add	r3, sp, #12
 8013a36:	9301      	str	r3, [sp, #4]
 8013a38:	ab02      	add	r3, sp, #8
 8013a3a:	9300      	str	r3, [sp, #0]
 8013a3c:	4632      	mov	r2, r6
 8013a3e:	4653      	mov	r3, sl
 8013a40:	ec45 4b10 	vmov	d0, r4, r5
 8013a44:	f000 fcf8 	bl	8014438 <_dtoa_r>
 8013a48:	2f47      	cmp	r7, #71	; 0x47
 8013a4a:	4680      	mov	r8, r0
 8013a4c:	d102      	bne.n	8013a54 <__cvt+0x62>
 8013a4e:	f019 0f01 	tst.w	r9, #1
 8013a52:	d026      	beq.n	8013aa2 <__cvt+0xb0>
 8013a54:	2f46      	cmp	r7, #70	; 0x46
 8013a56:	eb08 0906 	add.w	r9, r8, r6
 8013a5a:	d111      	bne.n	8013a80 <__cvt+0x8e>
 8013a5c:	f898 3000 	ldrb.w	r3, [r8]
 8013a60:	2b30      	cmp	r3, #48	; 0x30
 8013a62:	d10a      	bne.n	8013a7a <__cvt+0x88>
 8013a64:	2200      	movs	r2, #0
 8013a66:	2300      	movs	r3, #0
 8013a68:	4620      	mov	r0, r4
 8013a6a:	4629      	mov	r1, r5
 8013a6c:	f7f4 ff64 	bl	8008938 <__aeabi_dcmpeq>
 8013a70:	b918      	cbnz	r0, 8013a7a <__cvt+0x88>
 8013a72:	f1c6 0601 	rsb	r6, r6, #1
 8013a76:	f8ca 6000 	str.w	r6, [sl]
 8013a7a:	f8da 3000 	ldr.w	r3, [sl]
 8013a7e:	4499      	add	r9, r3
 8013a80:	2200      	movs	r2, #0
 8013a82:	2300      	movs	r3, #0
 8013a84:	4620      	mov	r0, r4
 8013a86:	4629      	mov	r1, r5
 8013a88:	f7f4 ff56 	bl	8008938 <__aeabi_dcmpeq>
 8013a8c:	b938      	cbnz	r0, 8013a9e <__cvt+0xac>
 8013a8e:	2230      	movs	r2, #48	; 0x30
 8013a90:	9b03      	ldr	r3, [sp, #12]
 8013a92:	454b      	cmp	r3, r9
 8013a94:	d205      	bcs.n	8013aa2 <__cvt+0xb0>
 8013a96:	1c59      	adds	r1, r3, #1
 8013a98:	9103      	str	r1, [sp, #12]
 8013a9a:	701a      	strb	r2, [r3, #0]
 8013a9c:	e7f8      	b.n	8013a90 <__cvt+0x9e>
 8013a9e:	f8cd 900c 	str.w	r9, [sp, #12]
 8013aa2:	9b03      	ldr	r3, [sp, #12]
 8013aa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013aa6:	eba3 0308 	sub.w	r3, r3, r8
 8013aaa:	4640      	mov	r0, r8
 8013aac:	6013      	str	r3, [r2, #0]
 8013aae:	b004      	add	sp, #16
 8013ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013ab4 <__exponent>:
 8013ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013ab6:	2900      	cmp	r1, #0
 8013ab8:	4604      	mov	r4, r0
 8013aba:	bfba      	itte	lt
 8013abc:	4249      	neglt	r1, r1
 8013abe:	232d      	movlt	r3, #45	; 0x2d
 8013ac0:	232b      	movge	r3, #43	; 0x2b
 8013ac2:	2909      	cmp	r1, #9
 8013ac4:	f804 2b02 	strb.w	r2, [r4], #2
 8013ac8:	7043      	strb	r3, [r0, #1]
 8013aca:	dd20      	ble.n	8013b0e <__exponent+0x5a>
 8013acc:	f10d 0307 	add.w	r3, sp, #7
 8013ad0:	461f      	mov	r7, r3
 8013ad2:	260a      	movs	r6, #10
 8013ad4:	fb91 f5f6 	sdiv	r5, r1, r6
 8013ad8:	fb06 1115 	mls	r1, r6, r5, r1
 8013adc:	3130      	adds	r1, #48	; 0x30
 8013ade:	2d09      	cmp	r5, #9
 8013ae0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013ae4:	f103 32ff 	add.w	r2, r3, #4294967295
 8013ae8:	4629      	mov	r1, r5
 8013aea:	dc09      	bgt.n	8013b00 <__exponent+0x4c>
 8013aec:	3130      	adds	r1, #48	; 0x30
 8013aee:	3b02      	subs	r3, #2
 8013af0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013af4:	42bb      	cmp	r3, r7
 8013af6:	4622      	mov	r2, r4
 8013af8:	d304      	bcc.n	8013b04 <__exponent+0x50>
 8013afa:	1a10      	subs	r0, r2, r0
 8013afc:	b003      	add	sp, #12
 8013afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b00:	4613      	mov	r3, r2
 8013b02:	e7e7      	b.n	8013ad4 <__exponent+0x20>
 8013b04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b08:	f804 2b01 	strb.w	r2, [r4], #1
 8013b0c:	e7f2      	b.n	8013af4 <__exponent+0x40>
 8013b0e:	2330      	movs	r3, #48	; 0x30
 8013b10:	4419      	add	r1, r3
 8013b12:	7083      	strb	r3, [r0, #2]
 8013b14:	1d02      	adds	r2, r0, #4
 8013b16:	70c1      	strb	r1, [r0, #3]
 8013b18:	e7ef      	b.n	8013afa <__exponent+0x46>
	...

08013b1c <_printf_float>:
 8013b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b20:	b08d      	sub	sp, #52	; 0x34
 8013b22:	460c      	mov	r4, r1
 8013b24:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013b28:	4616      	mov	r6, r2
 8013b2a:	461f      	mov	r7, r3
 8013b2c:	4605      	mov	r5, r0
 8013b2e:	f001 fb05 	bl	801513c <_localeconv_r>
 8013b32:	6803      	ldr	r3, [r0, #0]
 8013b34:	9304      	str	r3, [sp, #16]
 8013b36:	4618      	mov	r0, r3
 8013b38:	f7f4 fa82 	bl	8008040 <strlen>
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	930a      	str	r3, [sp, #40]	; 0x28
 8013b40:	f8d8 3000 	ldr.w	r3, [r8]
 8013b44:	9005      	str	r0, [sp, #20]
 8013b46:	3307      	adds	r3, #7
 8013b48:	f023 0307 	bic.w	r3, r3, #7
 8013b4c:	f103 0208 	add.w	r2, r3, #8
 8013b50:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013b54:	f8d4 b000 	ldr.w	fp, [r4]
 8013b58:	f8c8 2000 	str.w	r2, [r8]
 8013b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b60:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013b64:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013b68:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013b6c:	9307      	str	r3, [sp, #28]
 8013b6e:	f8cd 8018 	str.w	r8, [sp, #24]
 8013b72:	f04f 32ff 	mov.w	r2, #4294967295
 8013b76:	4ba7      	ldr	r3, [pc, #668]	; (8013e14 <_printf_float+0x2f8>)
 8013b78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b7c:	f7f4 ff0e 	bl	800899c <__aeabi_dcmpun>
 8013b80:	bb70      	cbnz	r0, 8013be0 <_printf_float+0xc4>
 8013b82:	f04f 32ff 	mov.w	r2, #4294967295
 8013b86:	4ba3      	ldr	r3, [pc, #652]	; (8013e14 <_printf_float+0x2f8>)
 8013b88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b8c:	f7f4 fee8 	bl	8008960 <__aeabi_dcmple>
 8013b90:	bb30      	cbnz	r0, 8013be0 <_printf_float+0xc4>
 8013b92:	2200      	movs	r2, #0
 8013b94:	2300      	movs	r3, #0
 8013b96:	4640      	mov	r0, r8
 8013b98:	4649      	mov	r1, r9
 8013b9a:	f7f4 fed7 	bl	800894c <__aeabi_dcmplt>
 8013b9e:	b110      	cbz	r0, 8013ba6 <_printf_float+0x8a>
 8013ba0:	232d      	movs	r3, #45	; 0x2d
 8013ba2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ba6:	4a9c      	ldr	r2, [pc, #624]	; (8013e18 <_printf_float+0x2fc>)
 8013ba8:	4b9c      	ldr	r3, [pc, #624]	; (8013e1c <_printf_float+0x300>)
 8013baa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013bae:	bf8c      	ite	hi
 8013bb0:	4690      	movhi	r8, r2
 8013bb2:	4698      	movls	r8, r3
 8013bb4:	2303      	movs	r3, #3
 8013bb6:	f02b 0204 	bic.w	r2, fp, #4
 8013bba:	6123      	str	r3, [r4, #16]
 8013bbc:	6022      	str	r2, [r4, #0]
 8013bbe:	f04f 0900 	mov.w	r9, #0
 8013bc2:	9700      	str	r7, [sp, #0]
 8013bc4:	4633      	mov	r3, r6
 8013bc6:	aa0b      	add	r2, sp, #44	; 0x2c
 8013bc8:	4621      	mov	r1, r4
 8013bca:	4628      	mov	r0, r5
 8013bcc:	f000 f9e6 	bl	8013f9c <_printf_common>
 8013bd0:	3001      	adds	r0, #1
 8013bd2:	f040 808d 	bne.w	8013cf0 <_printf_float+0x1d4>
 8013bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8013bda:	b00d      	add	sp, #52	; 0x34
 8013bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013be0:	4642      	mov	r2, r8
 8013be2:	464b      	mov	r3, r9
 8013be4:	4640      	mov	r0, r8
 8013be6:	4649      	mov	r1, r9
 8013be8:	f7f4 fed8 	bl	800899c <__aeabi_dcmpun>
 8013bec:	b110      	cbz	r0, 8013bf4 <_printf_float+0xd8>
 8013bee:	4a8c      	ldr	r2, [pc, #560]	; (8013e20 <_printf_float+0x304>)
 8013bf0:	4b8c      	ldr	r3, [pc, #560]	; (8013e24 <_printf_float+0x308>)
 8013bf2:	e7da      	b.n	8013baa <_printf_float+0x8e>
 8013bf4:	6861      	ldr	r1, [r4, #4]
 8013bf6:	1c4b      	adds	r3, r1, #1
 8013bf8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8013bfc:	a80a      	add	r0, sp, #40	; 0x28
 8013bfe:	d13e      	bne.n	8013c7e <_printf_float+0x162>
 8013c00:	2306      	movs	r3, #6
 8013c02:	6063      	str	r3, [r4, #4]
 8013c04:	2300      	movs	r3, #0
 8013c06:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013c0a:	ab09      	add	r3, sp, #36	; 0x24
 8013c0c:	9300      	str	r3, [sp, #0]
 8013c0e:	ec49 8b10 	vmov	d0, r8, r9
 8013c12:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013c16:	6022      	str	r2, [r4, #0]
 8013c18:	f8cd a004 	str.w	sl, [sp, #4]
 8013c1c:	6861      	ldr	r1, [r4, #4]
 8013c1e:	4628      	mov	r0, r5
 8013c20:	f7ff fee7 	bl	80139f2 <__cvt>
 8013c24:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8013c28:	2b47      	cmp	r3, #71	; 0x47
 8013c2a:	4680      	mov	r8, r0
 8013c2c:	d109      	bne.n	8013c42 <_printf_float+0x126>
 8013c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c30:	1cd8      	adds	r0, r3, #3
 8013c32:	db02      	blt.n	8013c3a <_printf_float+0x11e>
 8013c34:	6862      	ldr	r2, [r4, #4]
 8013c36:	4293      	cmp	r3, r2
 8013c38:	dd47      	ble.n	8013cca <_printf_float+0x1ae>
 8013c3a:	f1aa 0a02 	sub.w	sl, sl, #2
 8013c3e:	fa5f fa8a 	uxtb.w	sl, sl
 8013c42:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013c46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013c48:	d824      	bhi.n	8013c94 <_printf_float+0x178>
 8013c4a:	3901      	subs	r1, #1
 8013c4c:	4652      	mov	r2, sl
 8013c4e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013c52:	9109      	str	r1, [sp, #36]	; 0x24
 8013c54:	f7ff ff2e 	bl	8013ab4 <__exponent>
 8013c58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c5a:	1813      	adds	r3, r2, r0
 8013c5c:	2a01      	cmp	r2, #1
 8013c5e:	4681      	mov	r9, r0
 8013c60:	6123      	str	r3, [r4, #16]
 8013c62:	dc02      	bgt.n	8013c6a <_printf_float+0x14e>
 8013c64:	6822      	ldr	r2, [r4, #0]
 8013c66:	07d1      	lsls	r1, r2, #31
 8013c68:	d501      	bpl.n	8013c6e <_printf_float+0x152>
 8013c6a:	3301      	adds	r3, #1
 8013c6c:	6123      	str	r3, [r4, #16]
 8013c6e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d0a5      	beq.n	8013bc2 <_printf_float+0xa6>
 8013c76:	232d      	movs	r3, #45	; 0x2d
 8013c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c7c:	e7a1      	b.n	8013bc2 <_printf_float+0xa6>
 8013c7e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8013c82:	f000 8177 	beq.w	8013f74 <_printf_float+0x458>
 8013c86:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013c8a:	d1bb      	bne.n	8013c04 <_printf_float+0xe8>
 8013c8c:	2900      	cmp	r1, #0
 8013c8e:	d1b9      	bne.n	8013c04 <_printf_float+0xe8>
 8013c90:	2301      	movs	r3, #1
 8013c92:	e7b6      	b.n	8013c02 <_printf_float+0xe6>
 8013c94:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8013c98:	d119      	bne.n	8013cce <_printf_float+0x1b2>
 8013c9a:	2900      	cmp	r1, #0
 8013c9c:	6863      	ldr	r3, [r4, #4]
 8013c9e:	dd0c      	ble.n	8013cba <_printf_float+0x19e>
 8013ca0:	6121      	str	r1, [r4, #16]
 8013ca2:	b913      	cbnz	r3, 8013caa <_printf_float+0x18e>
 8013ca4:	6822      	ldr	r2, [r4, #0]
 8013ca6:	07d2      	lsls	r2, r2, #31
 8013ca8:	d502      	bpl.n	8013cb0 <_printf_float+0x194>
 8013caa:	3301      	adds	r3, #1
 8013cac:	440b      	add	r3, r1
 8013cae:	6123      	str	r3, [r4, #16]
 8013cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cb2:	65a3      	str	r3, [r4, #88]	; 0x58
 8013cb4:	f04f 0900 	mov.w	r9, #0
 8013cb8:	e7d9      	b.n	8013c6e <_printf_float+0x152>
 8013cba:	b913      	cbnz	r3, 8013cc2 <_printf_float+0x1a6>
 8013cbc:	6822      	ldr	r2, [r4, #0]
 8013cbe:	07d0      	lsls	r0, r2, #31
 8013cc0:	d501      	bpl.n	8013cc6 <_printf_float+0x1aa>
 8013cc2:	3302      	adds	r3, #2
 8013cc4:	e7f3      	b.n	8013cae <_printf_float+0x192>
 8013cc6:	2301      	movs	r3, #1
 8013cc8:	e7f1      	b.n	8013cae <_printf_float+0x192>
 8013cca:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8013cce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013cd2:	4293      	cmp	r3, r2
 8013cd4:	db05      	blt.n	8013ce2 <_printf_float+0x1c6>
 8013cd6:	6822      	ldr	r2, [r4, #0]
 8013cd8:	6123      	str	r3, [r4, #16]
 8013cda:	07d1      	lsls	r1, r2, #31
 8013cdc:	d5e8      	bpl.n	8013cb0 <_printf_float+0x194>
 8013cde:	3301      	adds	r3, #1
 8013ce0:	e7e5      	b.n	8013cae <_printf_float+0x192>
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	bfd4      	ite	le
 8013ce6:	f1c3 0302 	rsble	r3, r3, #2
 8013cea:	2301      	movgt	r3, #1
 8013cec:	4413      	add	r3, r2
 8013cee:	e7de      	b.n	8013cae <_printf_float+0x192>
 8013cf0:	6823      	ldr	r3, [r4, #0]
 8013cf2:	055a      	lsls	r2, r3, #21
 8013cf4:	d407      	bmi.n	8013d06 <_printf_float+0x1ea>
 8013cf6:	6923      	ldr	r3, [r4, #16]
 8013cf8:	4642      	mov	r2, r8
 8013cfa:	4631      	mov	r1, r6
 8013cfc:	4628      	mov	r0, r5
 8013cfe:	47b8      	blx	r7
 8013d00:	3001      	adds	r0, #1
 8013d02:	d12b      	bne.n	8013d5c <_printf_float+0x240>
 8013d04:	e767      	b.n	8013bd6 <_printf_float+0xba>
 8013d06:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013d0a:	f240 80dc 	bls.w	8013ec6 <_printf_float+0x3aa>
 8013d0e:	2200      	movs	r2, #0
 8013d10:	2300      	movs	r3, #0
 8013d12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013d16:	f7f4 fe0f 	bl	8008938 <__aeabi_dcmpeq>
 8013d1a:	2800      	cmp	r0, #0
 8013d1c:	d033      	beq.n	8013d86 <_printf_float+0x26a>
 8013d1e:	2301      	movs	r3, #1
 8013d20:	4a41      	ldr	r2, [pc, #260]	; (8013e28 <_printf_float+0x30c>)
 8013d22:	4631      	mov	r1, r6
 8013d24:	4628      	mov	r0, r5
 8013d26:	47b8      	blx	r7
 8013d28:	3001      	adds	r0, #1
 8013d2a:	f43f af54 	beq.w	8013bd6 <_printf_float+0xba>
 8013d2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013d32:	429a      	cmp	r2, r3
 8013d34:	db02      	blt.n	8013d3c <_printf_float+0x220>
 8013d36:	6823      	ldr	r3, [r4, #0]
 8013d38:	07d8      	lsls	r0, r3, #31
 8013d3a:	d50f      	bpl.n	8013d5c <_printf_float+0x240>
 8013d3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013d40:	4631      	mov	r1, r6
 8013d42:	4628      	mov	r0, r5
 8013d44:	47b8      	blx	r7
 8013d46:	3001      	adds	r0, #1
 8013d48:	f43f af45 	beq.w	8013bd6 <_printf_float+0xba>
 8013d4c:	f04f 0800 	mov.w	r8, #0
 8013d50:	f104 091a 	add.w	r9, r4, #26
 8013d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d56:	3b01      	subs	r3, #1
 8013d58:	4543      	cmp	r3, r8
 8013d5a:	dc09      	bgt.n	8013d70 <_printf_float+0x254>
 8013d5c:	6823      	ldr	r3, [r4, #0]
 8013d5e:	079b      	lsls	r3, r3, #30
 8013d60:	f100 8103 	bmi.w	8013f6a <_printf_float+0x44e>
 8013d64:	68e0      	ldr	r0, [r4, #12]
 8013d66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d68:	4298      	cmp	r0, r3
 8013d6a:	bfb8      	it	lt
 8013d6c:	4618      	movlt	r0, r3
 8013d6e:	e734      	b.n	8013bda <_printf_float+0xbe>
 8013d70:	2301      	movs	r3, #1
 8013d72:	464a      	mov	r2, r9
 8013d74:	4631      	mov	r1, r6
 8013d76:	4628      	mov	r0, r5
 8013d78:	47b8      	blx	r7
 8013d7a:	3001      	adds	r0, #1
 8013d7c:	f43f af2b 	beq.w	8013bd6 <_printf_float+0xba>
 8013d80:	f108 0801 	add.w	r8, r8, #1
 8013d84:	e7e6      	b.n	8013d54 <_printf_float+0x238>
 8013d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	dc2b      	bgt.n	8013de4 <_printf_float+0x2c8>
 8013d8c:	2301      	movs	r3, #1
 8013d8e:	4a26      	ldr	r2, [pc, #152]	; (8013e28 <_printf_float+0x30c>)
 8013d90:	4631      	mov	r1, r6
 8013d92:	4628      	mov	r0, r5
 8013d94:	47b8      	blx	r7
 8013d96:	3001      	adds	r0, #1
 8013d98:	f43f af1d 	beq.w	8013bd6 <_printf_float+0xba>
 8013d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d9e:	b923      	cbnz	r3, 8013daa <_printf_float+0x28e>
 8013da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013da2:	b913      	cbnz	r3, 8013daa <_printf_float+0x28e>
 8013da4:	6823      	ldr	r3, [r4, #0]
 8013da6:	07d9      	lsls	r1, r3, #31
 8013da8:	d5d8      	bpl.n	8013d5c <_printf_float+0x240>
 8013daa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013dae:	4631      	mov	r1, r6
 8013db0:	4628      	mov	r0, r5
 8013db2:	47b8      	blx	r7
 8013db4:	3001      	adds	r0, #1
 8013db6:	f43f af0e 	beq.w	8013bd6 <_printf_float+0xba>
 8013dba:	f04f 0900 	mov.w	r9, #0
 8013dbe:	f104 0a1a 	add.w	sl, r4, #26
 8013dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dc4:	425b      	negs	r3, r3
 8013dc6:	454b      	cmp	r3, r9
 8013dc8:	dc01      	bgt.n	8013dce <_printf_float+0x2b2>
 8013dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013dcc:	e794      	b.n	8013cf8 <_printf_float+0x1dc>
 8013dce:	2301      	movs	r3, #1
 8013dd0:	4652      	mov	r2, sl
 8013dd2:	4631      	mov	r1, r6
 8013dd4:	4628      	mov	r0, r5
 8013dd6:	47b8      	blx	r7
 8013dd8:	3001      	adds	r0, #1
 8013dda:	f43f aefc 	beq.w	8013bd6 <_printf_float+0xba>
 8013dde:	f109 0901 	add.w	r9, r9, #1
 8013de2:	e7ee      	b.n	8013dc2 <_printf_float+0x2a6>
 8013de4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013de6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013de8:	429a      	cmp	r2, r3
 8013dea:	bfa8      	it	ge
 8013dec:	461a      	movge	r2, r3
 8013dee:	2a00      	cmp	r2, #0
 8013df0:	4691      	mov	r9, r2
 8013df2:	dd07      	ble.n	8013e04 <_printf_float+0x2e8>
 8013df4:	4613      	mov	r3, r2
 8013df6:	4631      	mov	r1, r6
 8013df8:	4642      	mov	r2, r8
 8013dfa:	4628      	mov	r0, r5
 8013dfc:	47b8      	blx	r7
 8013dfe:	3001      	adds	r0, #1
 8013e00:	f43f aee9 	beq.w	8013bd6 <_printf_float+0xba>
 8013e04:	f104 031a 	add.w	r3, r4, #26
 8013e08:	f04f 0b00 	mov.w	fp, #0
 8013e0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013e10:	9306      	str	r3, [sp, #24]
 8013e12:	e015      	b.n	8013e40 <_printf_float+0x324>
 8013e14:	7fefffff 	.word	0x7fefffff
 8013e18:	080164dc 	.word	0x080164dc
 8013e1c:	080164d8 	.word	0x080164d8
 8013e20:	080164e4 	.word	0x080164e4
 8013e24:	080164e0 	.word	0x080164e0
 8013e28:	080164e8 	.word	0x080164e8
 8013e2c:	2301      	movs	r3, #1
 8013e2e:	9a06      	ldr	r2, [sp, #24]
 8013e30:	4631      	mov	r1, r6
 8013e32:	4628      	mov	r0, r5
 8013e34:	47b8      	blx	r7
 8013e36:	3001      	adds	r0, #1
 8013e38:	f43f aecd 	beq.w	8013bd6 <_printf_float+0xba>
 8013e3c:	f10b 0b01 	add.w	fp, fp, #1
 8013e40:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013e44:	ebaa 0309 	sub.w	r3, sl, r9
 8013e48:	455b      	cmp	r3, fp
 8013e4a:	dcef      	bgt.n	8013e2c <_printf_float+0x310>
 8013e4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013e50:	429a      	cmp	r2, r3
 8013e52:	44d0      	add	r8, sl
 8013e54:	db15      	blt.n	8013e82 <_printf_float+0x366>
 8013e56:	6823      	ldr	r3, [r4, #0]
 8013e58:	07da      	lsls	r2, r3, #31
 8013e5a:	d412      	bmi.n	8013e82 <_printf_float+0x366>
 8013e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e60:	eba3 020a 	sub.w	r2, r3, sl
 8013e64:	eba3 0a01 	sub.w	sl, r3, r1
 8013e68:	4592      	cmp	sl, r2
 8013e6a:	bfa8      	it	ge
 8013e6c:	4692      	movge	sl, r2
 8013e6e:	f1ba 0f00 	cmp.w	sl, #0
 8013e72:	dc0e      	bgt.n	8013e92 <_printf_float+0x376>
 8013e74:	f04f 0800 	mov.w	r8, #0
 8013e78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013e7c:	f104 091a 	add.w	r9, r4, #26
 8013e80:	e019      	b.n	8013eb6 <_printf_float+0x39a>
 8013e82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e86:	4631      	mov	r1, r6
 8013e88:	4628      	mov	r0, r5
 8013e8a:	47b8      	blx	r7
 8013e8c:	3001      	adds	r0, #1
 8013e8e:	d1e5      	bne.n	8013e5c <_printf_float+0x340>
 8013e90:	e6a1      	b.n	8013bd6 <_printf_float+0xba>
 8013e92:	4653      	mov	r3, sl
 8013e94:	4642      	mov	r2, r8
 8013e96:	4631      	mov	r1, r6
 8013e98:	4628      	mov	r0, r5
 8013e9a:	47b8      	blx	r7
 8013e9c:	3001      	adds	r0, #1
 8013e9e:	d1e9      	bne.n	8013e74 <_printf_float+0x358>
 8013ea0:	e699      	b.n	8013bd6 <_printf_float+0xba>
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	464a      	mov	r2, r9
 8013ea6:	4631      	mov	r1, r6
 8013ea8:	4628      	mov	r0, r5
 8013eaa:	47b8      	blx	r7
 8013eac:	3001      	adds	r0, #1
 8013eae:	f43f ae92 	beq.w	8013bd6 <_printf_float+0xba>
 8013eb2:	f108 0801 	add.w	r8, r8, #1
 8013eb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013eba:	1a9b      	subs	r3, r3, r2
 8013ebc:	eba3 030a 	sub.w	r3, r3, sl
 8013ec0:	4543      	cmp	r3, r8
 8013ec2:	dcee      	bgt.n	8013ea2 <_printf_float+0x386>
 8013ec4:	e74a      	b.n	8013d5c <_printf_float+0x240>
 8013ec6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ec8:	2a01      	cmp	r2, #1
 8013eca:	dc01      	bgt.n	8013ed0 <_printf_float+0x3b4>
 8013ecc:	07db      	lsls	r3, r3, #31
 8013ece:	d53a      	bpl.n	8013f46 <_printf_float+0x42a>
 8013ed0:	2301      	movs	r3, #1
 8013ed2:	4642      	mov	r2, r8
 8013ed4:	4631      	mov	r1, r6
 8013ed6:	4628      	mov	r0, r5
 8013ed8:	47b8      	blx	r7
 8013eda:	3001      	adds	r0, #1
 8013edc:	f43f ae7b 	beq.w	8013bd6 <_printf_float+0xba>
 8013ee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ee4:	4631      	mov	r1, r6
 8013ee6:	4628      	mov	r0, r5
 8013ee8:	47b8      	blx	r7
 8013eea:	3001      	adds	r0, #1
 8013eec:	f108 0801 	add.w	r8, r8, #1
 8013ef0:	f43f ae71 	beq.w	8013bd6 <_printf_float+0xba>
 8013ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	f103 3aff 	add.w	sl, r3, #4294967295
 8013efc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013f00:	2300      	movs	r3, #0
 8013f02:	f7f4 fd19 	bl	8008938 <__aeabi_dcmpeq>
 8013f06:	b9c8      	cbnz	r0, 8013f3c <_printf_float+0x420>
 8013f08:	4653      	mov	r3, sl
 8013f0a:	4642      	mov	r2, r8
 8013f0c:	4631      	mov	r1, r6
 8013f0e:	4628      	mov	r0, r5
 8013f10:	47b8      	blx	r7
 8013f12:	3001      	adds	r0, #1
 8013f14:	d10e      	bne.n	8013f34 <_printf_float+0x418>
 8013f16:	e65e      	b.n	8013bd6 <_printf_float+0xba>
 8013f18:	2301      	movs	r3, #1
 8013f1a:	4652      	mov	r2, sl
 8013f1c:	4631      	mov	r1, r6
 8013f1e:	4628      	mov	r0, r5
 8013f20:	47b8      	blx	r7
 8013f22:	3001      	adds	r0, #1
 8013f24:	f43f ae57 	beq.w	8013bd6 <_printf_float+0xba>
 8013f28:	f108 0801 	add.w	r8, r8, #1
 8013f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f2e:	3b01      	subs	r3, #1
 8013f30:	4543      	cmp	r3, r8
 8013f32:	dcf1      	bgt.n	8013f18 <_printf_float+0x3fc>
 8013f34:	464b      	mov	r3, r9
 8013f36:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013f3a:	e6de      	b.n	8013cfa <_printf_float+0x1de>
 8013f3c:	f04f 0800 	mov.w	r8, #0
 8013f40:	f104 0a1a 	add.w	sl, r4, #26
 8013f44:	e7f2      	b.n	8013f2c <_printf_float+0x410>
 8013f46:	2301      	movs	r3, #1
 8013f48:	e7df      	b.n	8013f0a <_printf_float+0x3ee>
 8013f4a:	2301      	movs	r3, #1
 8013f4c:	464a      	mov	r2, r9
 8013f4e:	4631      	mov	r1, r6
 8013f50:	4628      	mov	r0, r5
 8013f52:	47b8      	blx	r7
 8013f54:	3001      	adds	r0, #1
 8013f56:	f43f ae3e 	beq.w	8013bd6 <_printf_float+0xba>
 8013f5a:	f108 0801 	add.w	r8, r8, #1
 8013f5e:	68e3      	ldr	r3, [r4, #12]
 8013f60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013f62:	1a9b      	subs	r3, r3, r2
 8013f64:	4543      	cmp	r3, r8
 8013f66:	dcf0      	bgt.n	8013f4a <_printf_float+0x42e>
 8013f68:	e6fc      	b.n	8013d64 <_printf_float+0x248>
 8013f6a:	f04f 0800 	mov.w	r8, #0
 8013f6e:	f104 0919 	add.w	r9, r4, #25
 8013f72:	e7f4      	b.n	8013f5e <_printf_float+0x442>
 8013f74:	2900      	cmp	r1, #0
 8013f76:	f43f ae8b 	beq.w	8013c90 <_printf_float+0x174>
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013f80:	ab09      	add	r3, sp, #36	; 0x24
 8013f82:	9300      	str	r3, [sp, #0]
 8013f84:	ec49 8b10 	vmov	d0, r8, r9
 8013f88:	6022      	str	r2, [r4, #0]
 8013f8a:	f8cd a004 	str.w	sl, [sp, #4]
 8013f8e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013f92:	4628      	mov	r0, r5
 8013f94:	f7ff fd2d 	bl	80139f2 <__cvt>
 8013f98:	4680      	mov	r8, r0
 8013f9a:	e648      	b.n	8013c2e <_printf_float+0x112>

08013f9c <_printf_common>:
 8013f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fa0:	4691      	mov	r9, r2
 8013fa2:	461f      	mov	r7, r3
 8013fa4:	688a      	ldr	r2, [r1, #8]
 8013fa6:	690b      	ldr	r3, [r1, #16]
 8013fa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013fac:	4293      	cmp	r3, r2
 8013fae:	bfb8      	it	lt
 8013fb0:	4613      	movlt	r3, r2
 8013fb2:	f8c9 3000 	str.w	r3, [r9]
 8013fb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013fba:	4606      	mov	r6, r0
 8013fbc:	460c      	mov	r4, r1
 8013fbe:	b112      	cbz	r2, 8013fc6 <_printf_common+0x2a>
 8013fc0:	3301      	adds	r3, #1
 8013fc2:	f8c9 3000 	str.w	r3, [r9]
 8013fc6:	6823      	ldr	r3, [r4, #0]
 8013fc8:	0699      	lsls	r1, r3, #26
 8013fca:	bf42      	ittt	mi
 8013fcc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013fd0:	3302      	addmi	r3, #2
 8013fd2:	f8c9 3000 	strmi.w	r3, [r9]
 8013fd6:	6825      	ldr	r5, [r4, #0]
 8013fd8:	f015 0506 	ands.w	r5, r5, #6
 8013fdc:	d107      	bne.n	8013fee <_printf_common+0x52>
 8013fde:	f104 0a19 	add.w	sl, r4, #25
 8013fe2:	68e3      	ldr	r3, [r4, #12]
 8013fe4:	f8d9 2000 	ldr.w	r2, [r9]
 8013fe8:	1a9b      	subs	r3, r3, r2
 8013fea:	42ab      	cmp	r3, r5
 8013fec:	dc28      	bgt.n	8014040 <_printf_common+0xa4>
 8013fee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013ff2:	6822      	ldr	r2, [r4, #0]
 8013ff4:	3300      	adds	r3, #0
 8013ff6:	bf18      	it	ne
 8013ff8:	2301      	movne	r3, #1
 8013ffa:	0692      	lsls	r2, r2, #26
 8013ffc:	d42d      	bmi.n	801405a <_printf_common+0xbe>
 8013ffe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014002:	4639      	mov	r1, r7
 8014004:	4630      	mov	r0, r6
 8014006:	47c0      	blx	r8
 8014008:	3001      	adds	r0, #1
 801400a:	d020      	beq.n	801404e <_printf_common+0xb2>
 801400c:	6823      	ldr	r3, [r4, #0]
 801400e:	68e5      	ldr	r5, [r4, #12]
 8014010:	f8d9 2000 	ldr.w	r2, [r9]
 8014014:	f003 0306 	and.w	r3, r3, #6
 8014018:	2b04      	cmp	r3, #4
 801401a:	bf08      	it	eq
 801401c:	1aad      	subeq	r5, r5, r2
 801401e:	68a3      	ldr	r3, [r4, #8]
 8014020:	6922      	ldr	r2, [r4, #16]
 8014022:	bf0c      	ite	eq
 8014024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014028:	2500      	movne	r5, #0
 801402a:	4293      	cmp	r3, r2
 801402c:	bfc4      	itt	gt
 801402e:	1a9b      	subgt	r3, r3, r2
 8014030:	18ed      	addgt	r5, r5, r3
 8014032:	f04f 0900 	mov.w	r9, #0
 8014036:	341a      	adds	r4, #26
 8014038:	454d      	cmp	r5, r9
 801403a:	d11a      	bne.n	8014072 <_printf_common+0xd6>
 801403c:	2000      	movs	r0, #0
 801403e:	e008      	b.n	8014052 <_printf_common+0xb6>
 8014040:	2301      	movs	r3, #1
 8014042:	4652      	mov	r2, sl
 8014044:	4639      	mov	r1, r7
 8014046:	4630      	mov	r0, r6
 8014048:	47c0      	blx	r8
 801404a:	3001      	adds	r0, #1
 801404c:	d103      	bne.n	8014056 <_printf_common+0xba>
 801404e:	f04f 30ff 	mov.w	r0, #4294967295
 8014052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014056:	3501      	adds	r5, #1
 8014058:	e7c3      	b.n	8013fe2 <_printf_common+0x46>
 801405a:	18e1      	adds	r1, r4, r3
 801405c:	1c5a      	adds	r2, r3, #1
 801405e:	2030      	movs	r0, #48	; 0x30
 8014060:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014064:	4422      	add	r2, r4
 8014066:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801406a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801406e:	3302      	adds	r3, #2
 8014070:	e7c5      	b.n	8013ffe <_printf_common+0x62>
 8014072:	2301      	movs	r3, #1
 8014074:	4622      	mov	r2, r4
 8014076:	4639      	mov	r1, r7
 8014078:	4630      	mov	r0, r6
 801407a:	47c0      	blx	r8
 801407c:	3001      	adds	r0, #1
 801407e:	d0e6      	beq.n	801404e <_printf_common+0xb2>
 8014080:	f109 0901 	add.w	r9, r9, #1
 8014084:	e7d8      	b.n	8014038 <_printf_common+0x9c>
	...

08014088 <_printf_i>:
 8014088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801408c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014090:	460c      	mov	r4, r1
 8014092:	7e09      	ldrb	r1, [r1, #24]
 8014094:	b085      	sub	sp, #20
 8014096:	296e      	cmp	r1, #110	; 0x6e
 8014098:	4617      	mov	r7, r2
 801409a:	4606      	mov	r6, r0
 801409c:	4698      	mov	r8, r3
 801409e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80140a0:	f000 80b3 	beq.w	801420a <_printf_i+0x182>
 80140a4:	d822      	bhi.n	80140ec <_printf_i+0x64>
 80140a6:	2963      	cmp	r1, #99	; 0x63
 80140a8:	d036      	beq.n	8014118 <_printf_i+0x90>
 80140aa:	d80a      	bhi.n	80140c2 <_printf_i+0x3a>
 80140ac:	2900      	cmp	r1, #0
 80140ae:	f000 80b9 	beq.w	8014224 <_printf_i+0x19c>
 80140b2:	2958      	cmp	r1, #88	; 0x58
 80140b4:	f000 8083 	beq.w	80141be <_printf_i+0x136>
 80140b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80140bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80140c0:	e032      	b.n	8014128 <_printf_i+0xa0>
 80140c2:	2964      	cmp	r1, #100	; 0x64
 80140c4:	d001      	beq.n	80140ca <_printf_i+0x42>
 80140c6:	2969      	cmp	r1, #105	; 0x69
 80140c8:	d1f6      	bne.n	80140b8 <_printf_i+0x30>
 80140ca:	6820      	ldr	r0, [r4, #0]
 80140cc:	6813      	ldr	r3, [r2, #0]
 80140ce:	0605      	lsls	r5, r0, #24
 80140d0:	f103 0104 	add.w	r1, r3, #4
 80140d4:	d52a      	bpl.n	801412c <_printf_i+0xa4>
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	6011      	str	r1, [r2, #0]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	da03      	bge.n	80140e6 <_printf_i+0x5e>
 80140de:	222d      	movs	r2, #45	; 0x2d
 80140e0:	425b      	negs	r3, r3
 80140e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80140e6:	486f      	ldr	r0, [pc, #444]	; (80142a4 <_printf_i+0x21c>)
 80140e8:	220a      	movs	r2, #10
 80140ea:	e039      	b.n	8014160 <_printf_i+0xd8>
 80140ec:	2973      	cmp	r1, #115	; 0x73
 80140ee:	f000 809d 	beq.w	801422c <_printf_i+0x1a4>
 80140f2:	d808      	bhi.n	8014106 <_printf_i+0x7e>
 80140f4:	296f      	cmp	r1, #111	; 0x6f
 80140f6:	d020      	beq.n	801413a <_printf_i+0xb2>
 80140f8:	2970      	cmp	r1, #112	; 0x70
 80140fa:	d1dd      	bne.n	80140b8 <_printf_i+0x30>
 80140fc:	6823      	ldr	r3, [r4, #0]
 80140fe:	f043 0320 	orr.w	r3, r3, #32
 8014102:	6023      	str	r3, [r4, #0]
 8014104:	e003      	b.n	801410e <_printf_i+0x86>
 8014106:	2975      	cmp	r1, #117	; 0x75
 8014108:	d017      	beq.n	801413a <_printf_i+0xb2>
 801410a:	2978      	cmp	r1, #120	; 0x78
 801410c:	d1d4      	bne.n	80140b8 <_printf_i+0x30>
 801410e:	2378      	movs	r3, #120	; 0x78
 8014110:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014114:	4864      	ldr	r0, [pc, #400]	; (80142a8 <_printf_i+0x220>)
 8014116:	e055      	b.n	80141c4 <_printf_i+0x13c>
 8014118:	6813      	ldr	r3, [r2, #0]
 801411a:	1d19      	adds	r1, r3, #4
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	6011      	str	r1, [r2, #0]
 8014120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014128:	2301      	movs	r3, #1
 801412a:	e08c      	b.n	8014246 <_printf_i+0x1be>
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	6011      	str	r1, [r2, #0]
 8014130:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014134:	bf18      	it	ne
 8014136:	b21b      	sxthne	r3, r3
 8014138:	e7cf      	b.n	80140da <_printf_i+0x52>
 801413a:	6813      	ldr	r3, [r2, #0]
 801413c:	6825      	ldr	r5, [r4, #0]
 801413e:	1d18      	adds	r0, r3, #4
 8014140:	6010      	str	r0, [r2, #0]
 8014142:	0628      	lsls	r0, r5, #24
 8014144:	d501      	bpl.n	801414a <_printf_i+0xc2>
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	e002      	b.n	8014150 <_printf_i+0xc8>
 801414a:	0668      	lsls	r0, r5, #25
 801414c:	d5fb      	bpl.n	8014146 <_printf_i+0xbe>
 801414e:	881b      	ldrh	r3, [r3, #0]
 8014150:	4854      	ldr	r0, [pc, #336]	; (80142a4 <_printf_i+0x21c>)
 8014152:	296f      	cmp	r1, #111	; 0x6f
 8014154:	bf14      	ite	ne
 8014156:	220a      	movne	r2, #10
 8014158:	2208      	moveq	r2, #8
 801415a:	2100      	movs	r1, #0
 801415c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014160:	6865      	ldr	r5, [r4, #4]
 8014162:	60a5      	str	r5, [r4, #8]
 8014164:	2d00      	cmp	r5, #0
 8014166:	f2c0 8095 	blt.w	8014294 <_printf_i+0x20c>
 801416a:	6821      	ldr	r1, [r4, #0]
 801416c:	f021 0104 	bic.w	r1, r1, #4
 8014170:	6021      	str	r1, [r4, #0]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d13d      	bne.n	80141f2 <_printf_i+0x16a>
 8014176:	2d00      	cmp	r5, #0
 8014178:	f040 808e 	bne.w	8014298 <_printf_i+0x210>
 801417c:	4665      	mov	r5, ip
 801417e:	2a08      	cmp	r2, #8
 8014180:	d10b      	bne.n	801419a <_printf_i+0x112>
 8014182:	6823      	ldr	r3, [r4, #0]
 8014184:	07db      	lsls	r3, r3, #31
 8014186:	d508      	bpl.n	801419a <_printf_i+0x112>
 8014188:	6923      	ldr	r3, [r4, #16]
 801418a:	6862      	ldr	r2, [r4, #4]
 801418c:	429a      	cmp	r2, r3
 801418e:	bfde      	ittt	le
 8014190:	2330      	movle	r3, #48	; 0x30
 8014192:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014196:	f105 35ff 	addle.w	r5, r5, #4294967295
 801419a:	ebac 0305 	sub.w	r3, ip, r5
 801419e:	6123      	str	r3, [r4, #16]
 80141a0:	f8cd 8000 	str.w	r8, [sp]
 80141a4:	463b      	mov	r3, r7
 80141a6:	aa03      	add	r2, sp, #12
 80141a8:	4621      	mov	r1, r4
 80141aa:	4630      	mov	r0, r6
 80141ac:	f7ff fef6 	bl	8013f9c <_printf_common>
 80141b0:	3001      	adds	r0, #1
 80141b2:	d14d      	bne.n	8014250 <_printf_i+0x1c8>
 80141b4:	f04f 30ff 	mov.w	r0, #4294967295
 80141b8:	b005      	add	sp, #20
 80141ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141be:	4839      	ldr	r0, [pc, #228]	; (80142a4 <_printf_i+0x21c>)
 80141c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80141c4:	6813      	ldr	r3, [r2, #0]
 80141c6:	6821      	ldr	r1, [r4, #0]
 80141c8:	1d1d      	adds	r5, r3, #4
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	6015      	str	r5, [r2, #0]
 80141ce:	060a      	lsls	r2, r1, #24
 80141d0:	d50b      	bpl.n	80141ea <_printf_i+0x162>
 80141d2:	07ca      	lsls	r2, r1, #31
 80141d4:	bf44      	itt	mi
 80141d6:	f041 0120 	orrmi.w	r1, r1, #32
 80141da:	6021      	strmi	r1, [r4, #0]
 80141dc:	b91b      	cbnz	r3, 80141e6 <_printf_i+0x15e>
 80141de:	6822      	ldr	r2, [r4, #0]
 80141e0:	f022 0220 	bic.w	r2, r2, #32
 80141e4:	6022      	str	r2, [r4, #0]
 80141e6:	2210      	movs	r2, #16
 80141e8:	e7b7      	b.n	801415a <_printf_i+0xd2>
 80141ea:	064d      	lsls	r5, r1, #25
 80141ec:	bf48      	it	mi
 80141ee:	b29b      	uxthmi	r3, r3
 80141f0:	e7ef      	b.n	80141d2 <_printf_i+0x14a>
 80141f2:	4665      	mov	r5, ip
 80141f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80141f8:	fb02 3311 	mls	r3, r2, r1, r3
 80141fc:	5cc3      	ldrb	r3, [r0, r3]
 80141fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014202:	460b      	mov	r3, r1
 8014204:	2900      	cmp	r1, #0
 8014206:	d1f5      	bne.n	80141f4 <_printf_i+0x16c>
 8014208:	e7b9      	b.n	801417e <_printf_i+0xf6>
 801420a:	6813      	ldr	r3, [r2, #0]
 801420c:	6825      	ldr	r5, [r4, #0]
 801420e:	6961      	ldr	r1, [r4, #20]
 8014210:	1d18      	adds	r0, r3, #4
 8014212:	6010      	str	r0, [r2, #0]
 8014214:	0628      	lsls	r0, r5, #24
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	d501      	bpl.n	801421e <_printf_i+0x196>
 801421a:	6019      	str	r1, [r3, #0]
 801421c:	e002      	b.n	8014224 <_printf_i+0x19c>
 801421e:	066a      	lsls	r2, r5, #25
 8014220:	d5fb      	bpl.n	801421a <_printf_i+0x192>
 8014222:	8019      	strh	r1, [r3, #0]
 8014224:	2300      	movs	r3, #0
 8014226:	6123      	str	r3, [r4, #16]
 8014228:	4665      	mov	r5, ip
 801422a:	e7b9      	b.n	80141a0 <_printf_i+0x118>
 801422c:	6813      	ldr	r3, [r2, #0]
 801422e:	1d19      	adds	r1, r3, #4
 8014230:	6011      	str	r1, [r2, #0]
 8014232:	681d      	ldr	r5, [r3, #0]
 8014234:	6862      	ldr	r2, [r4, #4]
 8014236:	2100      	movs	r1, #0
 8014238:	4628      	mov	r0, r5
 801423a:	f7f3 ff09 	bl	8008050 <memchr>
 801423e:	b108      	cbz	r0, 8014244 <_printf_i+0x1bc>
 8014240:	1b40      	subs	r0, r0, r5
 8014242:	6060      	str	r0, [r4, #4]
 8014244:	6863      	ldr	r3, [r4, #4]
 8014246:	6123      	str	r3, [r4, #16]
 8014248:	2300      	movs	r3, #0
 801424a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801424e:	e7a7      	b.n	80141a0 <_printf_i+0x118>
 8014250:	6923      	ldr	r3, [r4, #16]
 8014252:	462a      	mov	r2, r5
 8014254:	4639      	mov	r1, r7
 8014256:	4630      	mov	r0, r6
 8014258:	47c0      	blx	r8
 801425a:	3001      	adds	r0, #1
 801425c:	d0aa      	beq.n	80141b4 <_printf_i+0x12c>
 801425e:	6823      	ldr	r3, [r4, #0]
 8014260:	079b      	lsls	r3, r3, #30
 8014262:	d413      	bmi.n	801428c <_printf_i+0x204>
 8014264:	68e0      	ldr	r0, [r4, #12]
 8014266:	9b03      	ldr	r3, [sp, #12]
 8014268:	4298      	cmp	r0, r3
 801426a:	bfb8      	it	lt
 801426c:	4618      	movlt	r0, r3
 801426e:	e7a3      	b.n	80141b8 <_printf_i+0x130>
 8014270:	2301      	movs	r3, #1
 8014272:	464a      	mov	r2, r9
 8014274:	4639      	mov	r1, r7
 8014276:	4630      	mov	r0, r6
 8014278:	47c0      	blx	r8
 801427a:	3001      	adds	r0, #1
 801427c:	d09a      	beq.n	80141b4 <_printf_i+0x12c>
 801427e:	3501      	adds	r5, #1
 8014280:	68e3      	ldr	r3, [r4, #12]
 8014282:	9a03      	ldr	r2, [sp, #12]
 8014284:	1a9b      	subs	r3, r3, r2
 8014286:	42ab      	cmp	r3, r5
 8014288:	dcf2      	bgt.n	8014270 <_printf_i+0x1e8>
 801428a:	e7eb      	b.n	8014264 <_printf_i+0x1dc>
 801428c:	2500      	movs	r5, #0
 801428e:	f104 0919 	add.w	r9, r4, #25
 8014292:	e7f5      	b.n	8014280 <_printf_i+0x1f8>
 8014294:	2b00      	cmp	r3, #0
 8014296:	d1ac      	bne.n	80141f2 <_printf_i+0x16a>
 8014298:	7803      	ldrb	r3, [r0, #0]
 801429a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801429e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80142a2:	e76c      	b.n	801417e <_printf_i+0xf6>
 80142a4:	080164ea 	.word	0x080164ea
 80142a8:	080164fb 	.word	0x080164fb

080142ac <iprintf>:
 80142ac:	b40f      	push	{r0, r1, r2, r3}
 80142ae:	4b0a      	ldr	r3, [pc, #40]	; (80142d8 <iprintf+0x2c>)
 80142b0:	b513      	push	{r0, r1, r4, lr}
 80142b2:	681c      	ldr	r4, [r3, #0]
 80142b4:	b124      	cbz	r4, 80142c0 <iprintf+0x14>
 80142b6:	69a3      	ldr	r3, [r4, #24]
 80142b8:	b913      	cbnz	r3, 80142c0 <iprintf+0x14>
 80142ba:	4620      	mov	r0, r4
 80142bc:	f000 feb4 	bl	8015028 <__sinit>
 80142c0:	ab05      	add	r3, sp, #20
 80142c2:	9a04      	ldr	r2, [sp, #16]
 80142c4:	68a1      	ldr	r1, [r4, #8]
 80142c6:	9301      	str	r3, [sp, #4]
 80142c8:	4620      	mov	r0, r4
 80142ca:	f001 fc5b 	bl	8015b84 <_vfiprintf_r>
 80142ce:	b002      	add	sp, #8
 80142d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142d4:	b004      	add	sp, #16
 80142d6:	4770      	bx	lr
 80142d8:	20000018 	.word	0x20000018

080142dc <_vsiprintf_r>:
 80142dc:	b500      	push	{lr}
 80142de:	b09b      	sub	sp, #108	; 0x6c
 80142e0:	9100      	str	r1, [sp, #0]
 80142e2:	9104      	str	r1, [sp, #16]
 80142e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80142e8:	9105      	str	r1, [sp, #20]
 80142ea:	9102      	str	r1, [sp, #8]
 80142ec:	4905      	ldr	r1, [pc, #20]	; (8014304 <_vsiprintf_r+0x28>)
 80142ee:	9103      	str	r1, [sp, #12]
 80142f0:	4669      	mov	r1, sp
 80142f2:	f001 fb25 	bl	8015940 <_svfiprintf_r>
 80142f6:	9b00      	ldr	r3, [sp, #0]
 80142f8:	2200      	movs	r2, #0
 80142fa:	701a      	strb	r2, [r3, #0]
 80142fc:	b01b      	add	sp, #108	; 0x6c
 80142fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8014302:	bf00      	nop
 8014304:	ffff0208 	.word	0xffff0208

08014308 <vsiprintf>:
 8014308:	4613      	mov	r3, r2
 801430a:	460a      	mov	r2, r1
 801430c:	4601      	mov	r1, r0
 801430e:	4802      	ldr	r0, [pc, #8]	; (8014318 <vsiprintf+0x10>)
 8014310:	6800      	ldr	r0, [r0, #0]
 8014312:	f7ff bfe3 	b.w	80142dc <_vsiprintf_r>
 8014316:	bf00      	nop
 8014318:	20000018 	.word	0x20000018

0801431c <quorem>:
 801431c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014320:	6903      	ldr	r3, [r0, #16]
 8014322:	690c      	ldr	r4, [r1, #16]
 8014324:	42a3      	cmp	r3, r4
 8014326:	4680      	mov	r8, r0
 8014328:	f2c0 8082 	blt.w	8014430 <quorem+0x114>
 801432c:	3c01      	subs	r4, #1
 801432e:	f101 0714 	add.w	r7, r1, #20
 8014332:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014336:	f100 0614 	add.w	r6, r0, #20
 801433a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801433e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014342:	eb06 030c 	add.w	r3, r6, ip
 8014346:	3501      	adds	r5, #1
 8014348:	eb07 090c 	add.w	r9, r7, ip
 801434c:	9301      	str	r3, [sp, #4]
 801434e:	fbb0 f5f5 	udiv	r5, r0, r5
 8014352:	b395      	cbz	r5, 80143ba <quorem+0x9e>
 8014354:	f04f 0a00 	mov.w	sl, #0
 8014358:	4638      	mov	r0, r7
 801435a:	46b6      	mov	lr, r6
 801435c:	46d3      	mov	fp, sl
 801435e:	f850 2b04 	ldr.w	r2, [r0], #4
 8014362:	b293      	uxth	r3, r2
 8014364:	fb05 a303 	mla	r3, r5, r3, sl
 8014368:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801436c:	b29b      	uxth	r3, r3
 801436e:	ebab 0303 	sub.w	r3, fp, r3
 8014372:	0c12      	lsrs	r2, r2, #16
 8014374:	f8de b000 	ldr.w	fp, [lr]
 8014378:	fb05 a202 	mla	r2, r5, r2, sl
 801437c:	fa13 f38b 	uxtah	r3, r3, fp
 8014380:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014384:	fa1f fb82 	uxth.w	fp, r2
 8014388:	f8de 2000 	ldr.w	r2, [lr]
 801438c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014390:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014394:	b29b      	uxth	r3, r3
 8014396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801439a:	4581      	cmp	r9, r0
 801439c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80143a0:	f84e 3b04 	str.w	r3, [lr], #4
 80143a4:	d2db      	bcs.n	801435e <quorem+0x42>
 80143a6:	f856 300c 	ldr.w	r3, [r6, ip]
 80143aa:	b933      	cbnz	r3, 80143ba <quorem+0x9e>
 80143ac:	9b01      	ldr	r3, [sp, #4]
 80143ae:	3b04      	subs	r3, #4
 80143b0:	429e      	cmp	r6, r3
 80143b2:	461a      	mov	r2, r3
 80143b4:	d330      	bcc.n	8014418 <quorem+0xfc>
 80143b6:	f8c8 4010 	str.w	r4, [r8, #16]
 80143ba:	4640      	mov	r0, r8
 80143bc:	f001 f8ea 	bl	8015594 <__mcmp>
 80143c0:	2800      	cmp	r0, #0
 80143c2:	db25      	blt.n	8014410 <quorem+0xf4>
 80143c4:	3501      	adds	r5, #1
 80143c6:	4630      	mov	r0, r6
 80143c8:	f04f 0c00 	mov.w	ip, #0
 80143cc:	f857 2b04 	ldr.w	r2, [r7], #4
 80143d0:	f8d0 e000 	ldr.w	lr, [r0]
 80143d4:	b293      	uxth	r3, r2
 80143d6:	ebac 0303 	sub.w	r3, ip, r3
 80143da:	0c12      	lsrs	r2, r2, #16
 80143dc:	fa13 f38e 	uxtah	r3, r3, lr
 80143e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80143e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80143e8:	b29b      	uxth	r3, r3
 80143ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80143ee:	45b9      	cmp	r9, r7
 80143f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80143f4:	f840 3b04 	str.w	r3, [r0], #4
 80143f8:	d2e8      	bcs.n	80143cc <quorem+0xb0>
 80143fa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80143fe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014402:	b92a      	cbnz	r2, 8014410 <quorem+0xf4>
 8014404:	3b04      	subs	r3, #4
 8014406:	429e      	cmp	r6, r3
 8014408:	461a      	mov	r2, r3
 801440a:	d30b      	bcc.n	8014424 <quorem+0x108>
 801440c:	f8c8 4010 	str.w	r4, [r8, #16]
 8014410:	4628      	mov	r0, r5
 8014412:	b003      	add	sp, #12
 8014414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014418:	6812      	ldr	r2, [r2, #0]
 801441a:	3b04      	subs	r3, #4
 801441c:	2a00      	cmp	r2, #0
 801441e:	d1ca      	bne.n	80143b6 <quorem+0x9a>
 8014420:	3c01      	subs	r4, #1
 8014422:	e7c5      	b.n	80143b0 <quorem+0x94>
 8014424:	6812      	ldr	r2, [r2, #0]
 8014426:	3b04      	subs	r3, #4
 8014428:	2a00      	cmp	r2, #0
 801442a:	d1ef      	bne.n	801440c <quorem+0xf0>
 801442c:	3c01      	subs	r4, #1
 801442e:	e7ea      	b.n	8014406 <quorem+0xea>
 8014430:	2000      	movs	r0, #0
 8014432:	e7ee      	b.n	8014412 <quorem+0xf6>
 8014434:	0000      	movs	r0, r0
	...

08014438 <_dtoa_r>:
 8014438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801443c:	ec57 6b10 	vmov	r6, r7, d0
 8014440:	b097      	sub	sp, #92	; 0x5c
 8014442:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014444:	9106      	str	r1, [sp, #24]
 8014446:	4604      	mov	r4, r0
 8014448:	920b      	str	r2, [sp, #44]	; 0x2c
 801444a:	9312      	str	r3, [sp, #72]	; 0x48
 801444c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014450:	e9cd 6700 	strd	r6, r7, [sp]
 8014454:	b93d      	cbnz	r5, 8014466 <_dtoa_r+0x2e>
 8014456:	2010      	movs	r0, #16
 8014458:	f000 fe7e 	bl	8015158 <malloc>
 801445c:	6260      	str	r0, [r4, #36]	; 0x24
 801445e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014462:	6005      	str	r5, [r0, #0]
 8014464:	60c5      	str	r5, [r0, #12]
 8014466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014468:	6819      	ldr	r1, [r3, #0]
 801446a:	b151      	cbz	r1, 8014482 <_dtoa_r+0x4a>
 801446c:	685a      	ldr	r2, [r3, #4]
 801446e:	604a      	str	r2, [r1, #4]
 8014470:	2301      	movs	r3, #1
 8014472:	4093      	lsls	r3, r2
 8014474:	608b      	str	r3, [r1, #8]
 8014476:	4620      	mov	r0, r4
 8014478:	f000 feaa 	bl	80151d0 <_Bfree>
 801447c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801447e:	2200      	movs	r2, #0
 8014480:	601a      	str	r2, [r3, #0]
 8014482:	1e3b      	subs	r3, r7, #0
 8014484:	bfbb      	ittet	lt
 8014486:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801448a:	9301      	strlt	r3, [sp, #4]
 801448c:	2300      	movge	r3, #0
 801448e:	2201      	movlt	r2, #1
 8014490:	bfac      	ite	ge
 8014492:	f8c8 3000 	strge.w	r3, [r8]
 8014496:	f8c8 2000 	strlt.w	r2, [r8]
 801449a:	4baf      	ldr	r3, [pc, #700]	; (8014758 <_dtoa_r+0x320>)
 801449c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80144a0:	ea33 0308 	bics.w	r3, r3, r8
 80144a4:	d114      	bne.n	80144d0 <_dtoa_r+0x98>
 80144a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80144a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80144ac:	6013      	str	r3, [r2, #0]
 80144ae:	9b00      	ldr	r3, [sp, #0]
 80144b0:	b923      	cbnz	r3, 80144bc <_dtoa_r+0x84>
 80144b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80144b6:	2800      	cmp	r0, #0
 80144b8:	f000 8542 	beq.w	8014f40 <_dtoa_r+0xb08>
 80144bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801476c <_dtoa_r+0x334>
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	f000 8544 	beq.w	8014f50 <_dtoa_r+0xb18>
 80144c8:	f10b 0303 	add.w	r3, fp, #3
 80144cc:	f000 bd3e 	b.w	8014f4c <_dtoa_r+0xb14>
 80144d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80144d4:	2200      	movs	r2, #0
 80144d6:	2300      	movs	r3, #0
 80144d8:	4630      	mov	r0, r6
 80144da:	4639      	mov	r1, r7
 80144dc:	f7f4 fa2c 	bl	8008938 <__aeabi_dcmpeq>
 80144e0:	4681      	mov	r9, r0
 80144e2:	b168      	cbz	r0, 8014500 <_dtoa_r+0xc8>
 80144e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80144e6:	2301      	movs	r3, #1
 80144e8:	6013      	str	r3, [r2, #0]
 80144ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	f000 8524 	beq.w	8014f3a <_dtoa_r+0xb02>
 80144f2:	4b9a      	ldr	r3, [pc, #616]	; (801475c <_dtoa_r+0x324>)
 80144f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80144f6:	f103 3bff 	add.w	fp, r3, #4294967295
 80144fa:	6013      	str	r3, [r2, #0]
 80144fc:	f000 bd28 	b.w	8014f50 <_dtoa_r+0xb18>
 8014500:	aa14      	add	r2, sp, #80	; 0x50
 8014502:	a915      	add	r1, sp, #84	; 0x54
 8014504:	ec47 6b10 	vmov	d0, r6, r7
 8014508:	4620      	mov	r0, r4
 801450a:	f001 f8ba 	bl	8015682 <__d2b>
 801450e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014512:	9004      	str	r0, [sp, #16]
 8014514:	2d00      	cmp	r5, #0
 8014516:	d07c      	beq.n	8014612 <_dtoa_r+0x1da>
 8014518:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801451c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014520:	46b2      	mov	sl, r6
 8014522:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014526:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801452a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801452e:	2200      	movs	r2, #0
 8014530:	4b8b      	ldr	r3, [pc, #556]	; (8014760 <_dtoa_r+0x328>)
 8014532:	4650      	mov	r0, sl
 8014534:	4659      	mov	r1, fp
 8014536:	f7f3 fddf 	bl	80080f8 <__aeabi_dsub>
 801453a:	a381      	add	r3, pc, #516	; (adr r3, 8014740 <_dtoa_r+0x308>)
 801453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014540:	f7f3 ff92 	bl	8008468 <__aeabi_dmul>
 8014544:	a380      	add	r3, pc, #512	; (adr r3, 8014748 <_dtoa_r+0x310>)
 8014546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801454a:	f7f3 fdd7 	bl	80080fc <__adddf3>
 801454e:	4606      	mov	r6, r0
 8014550:	4628      	mov	r0, r5
 8014552:	460f      	mov	r7, r1
 8014554:	f7f3 ff1e 	bl	8008394 <__aeabi_i2d>
 8014558:	a37d      	add	r3, pc, #500	; (adr r3, 8014750 <_dtoa_r+0x318>)
 801455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801455e:	f7f3 ff83 	bl	8008468 <__aeabi_dmul>
 8014562:	4602      	mov	r2, r0
 8014564:	460b      	mov	r3, r1
 8014566:	4630      	mov	r0, r6
 8014568:	4639      	mov	r1, r7
 801456a:	f7f3 fdc7 	bl	80080fc <__adddf3>
 801456e:	4606      	mov	r6, r0
 8014570:	460f      	mov	r7, r1
 8014572:	f7f4 fa29 	bl	80089c8 <__aeabi_d2iz>
 8014576:	2200      	movs	r2, #0
 8014578:	4682      	mov	sl, r0
 801457a:	2300      	movs	r3, #0
 801457c:	4630      	mov	r0, r6
 801457e:	4639      	mov	r1, r7
 8014580:	f7f4 f9e4 	bl	800894c <__aeabi_dcmplt>
 8014584:	b148      	cbz	r0, 801459a <_dtoa_r+0x162>
 8014586:	4650      	mov	r0, sl
 8014588:	f7f3 ff04 	bl	8008394 <__aeabi_i2d>
 801458c:	4632      	mov	r2, r6
 801458e:	463b      	mov	r3, r7
 8014590:	f7f4 f9d2 	bl	8008938 <__aeabi_dcmpeq>
 8014594:	b908      	cbnz	r0, 801459a <_dtoa_r+0x162>
 8014596:	f10a 3aff 	add.w	sl, sl, #4294967295
 801459a:	f1ba 0f16 	cmp.w	sl, #22
 801459e:	d859      	bhi.n	8014654 <_dtoa_r+0x21c>
 80145a0:	4970      	ldr	r1, [pc, #448]	; (8014764 <_dtoa_r+0x32c>)
 80145a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80145a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80145aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80145ae:	f7f4 f9eb 	bl	8008988 <__aeabi_dcmpgt>
 80145b2:	2800      	cmp	r0, #0
 80145b4:	d050      	beq.n	8014658 <_dtoa_r+0x220>
 80145b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80145ba:	2300      	movs	r3, #0
 80145bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80145be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80145c0:	1b5d      	subs	r5, r3, r5
 80145c2:	f1b5 0801 	subs.w	r8, r5, #1
 80145c6:	bf49      	itett	mi
 80145c8:	f1c5 0301 	rsbmi	r3, r5, #1
 80145cc:	2300      	movpl	r3, #0
 80145ce:	9305      	strmi	r3, [sp, #20]
 80145d0:	f04f 0800 	movmi.w	r8, #0
 80145d4:	bf58      	it	pl
 80145d6:	9305      	strpl	r3, [sp, #20]
 80145d8:	f1ba 0f00 	cmp.w	sl, #0
 80145dc:	db3e      	blt.n	801465c <_dtoa_r+0x224>
 80145de:	2300      	movs	r3, #0
 80145e0:	44d0      	add	r8, sl
 80145e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80145e6:	9307      	str	r3, [sp, #28]
 80145e8:	9b06      	ldr	r3, [sp, #24]
 80145ea:	2b09      	cmp	r3, #9
 80145ec:	f200 8090 	bhi.w	8014710 <_dtoa_r+0x2d8>
 80145f0:	2b05      	cmp	r3, #5
 80145f2:	bfc4      	itt	gt
 80145f4:	3b04      	subgt	r3, #4
 80145f6:	9306      	strgt	r3, [sp, #24]
 80145f8:	9b06      	ldr	r3, [sp, #24]
 80145fa:	f1a3 0302 	sub.w	r3, r3, #2
 80145fe:	bfcc      	ite	gt
 8014600:	2500      	movgt	r5, #0
 8014602:	2501      	movle	r5, #1
 8014604:	2b03      	cmp	r3, #3
 8014606:	f200 808f 	bhi.w	8014728 <_dtoa_r+0x2f0>
 801460a:	e8df f003 	tbb	[pc, r3]
 801460e:	7f7d      	.short	0x7f7d
 8014610:	7131      	.short	0x7131
 8014612:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014616:	441d      	add	r5, r3
 8014618:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801461c:	2820      	cmp	r0, #32
 801461e:	dd13      	ble.n	8014648 <_dtoa_r+0x210>
 8014620:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014624:	9b00      	ldr	r3, [sp, #0]
 8014626:	fa08 f800 	lsl.w	r8, r8, r0
 801462a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801462e:	fa23 f000 	lsr.w	r0, r3, r0
 8014632:	ea48 0000 	orr.w	r0, r8, r0
 8014636:	f7f3 fe9d 	bl	8008374 <__aeabi_ui2d>
 801463a:	2301      	movs	r3, #1
 801463c:	4682      	mov	sl, r0
 801463e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014642:	3d01      	subs	r5, #1
 8014644:	9313      	str	r3, [sp, #76]	; 0x4c
 8014646:	e772      	b.n	801452e <_dtoa_r+0xf6>
 8014648:	9b00      	ldr	r3, [sp, #0]
 801464a:	f1c0 0020 	rsb	r0, r0, #32
 801464e:	fa03 f000 	lsl.w	r0, r3, r0
 8014652:	e7f0      	b.n	8014636 <_dtoa_r+0x1fe>
 8014654:	2301      	movs	r3, #1
 8014656:	e7b1      	b.n	80145bc <_dtoa_r+0x184>
 8014658:	900f      	str	r0, [sp, #60]	; 0x3c
 801465a:	e7b0      	b.n	80145be <_dtoa_r+0x186>
 801465c:	9b05      	ldr	r3, [sp, #20]
 801465e:	eba3 030a 	sub.w	r3, r3, sl
 8014662:	9305      	str	r3, [sp, #20]
 8014664:	f1ca 0300 	rsb	r3, sl, #0
 8014668:	9307      	str	r3, [sp, #28]
 801466a:	2300      	movs	r3, #0
 801466c:	930e      	str	r3, [sp, #56]	; 0x38
 801466e:	e7bb      	b.n	80145e8 <_dtoa_r+0x1b0>
 8014670:	2301      	movs	r3, #1
 8014672:	930a      	str	r3, [sp, #40]	; 0x28
 8014674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014676:	2b00      	cmp	r3, #0
 8014678:	dd59      	ble.n	801472e <_dtoa_r+0x2f6>
 801467a:	9302      	str	r3, [sp, #8]
 801467c:	4699      	mov	r9, r3
 801467e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014680:	2200      	movs	r2, #0
 8014682:	6072      	str	r2, [r6, #4]
 8014684:	2204      	movs	r2, #4
 8014686:	f102 0014 	add.w	r0, r2, #20
 801468a:	4298      	cmp	r0, r3
 801468c:	6871      	ldr	r1, [r6, #4]
 801468e:	d953      	bls.n	8014738 <_dtoa_r+0x300>
 8014690:	4620      	mov	r0, r4
 8014692:	f000 fd69 	bl	8015168 <_Balloc>
 8014696:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014698:	6030      	str	r0, [r6, #0]
 801469a:	f1b9 0f0e 	cmp.w	r9, #14
 801469e:	f8d3 b000 	ldr.w	fp, [r3]
 80146a2:	f200 80e6 	bhi.w	8014872 <_dtoa_r+0x43a>
 80146a6:	2d00      	cmp	r5, #0
 80146a8:	f000 80e3 	beq.w	8014872 <_dtoa_r+0x43a>
 80146ac:	ed9d 7b00 	vldr	d7, [sp]
 80146b0:	f1ba 0f00 	cmp.w	sl, #0
 80146b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80146b8:	dd74      	ble.n	80147a4 <_dtoa_r+0x36c>
 80146ba:	4a2a      	ldr	r2, [pc, #168]	; (8014764 <_dtoa_r+0x32c>)
 80146bc:	f00a 030f 	and.w	r3, sl, #15
 80146c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80146c4:	ed93 7b00 	vldr	d7, [r3]
 80146c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80146cc:	06f0      	lsls	r0, r6, #27
 80146ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 80146d2:	d565      	bpl.n	80147a0 <_dtoa_r+0x368>
 80146d4:	4b24      	ldr	r3, [pc, #144]	; (8014768 <_dtoa_r+0x330>)
 80146d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80146da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80146de:	f7f3 ffed 	bl	80086bc <__aeabi_ddiv>
 80146e2:	e9cd 0100 	strd	r0, r1, [sp]
 80146e6:	f006 060f 	and.w	r6, r6, #15
 80146ea:	2503      	movs	r5, #3
 80146ec:	4f1e      	ldr	r7, [pc, #120]	; (8014768 <_dtoa_r+0x330>)
 80146ee:	e04c      	b.n	801478a <_dtoa_r+0x352>
 80146f0:	2301      	movs	r3, #1
 80146f2:	930a      	str	r3, [sp, #40]	; 0x28
 80146f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146f6:	4453      	add	r3, sl
 80146f8:	f103 0901 	add.w	r9, r3, #1
 80146fc:	9302      	str	r3, [sp, #8]
 80146fe:	464b      	mov	r3, r9
 8014700:	2b01      	cmp	r3, #1
 8014702:	bfb8      	it	lt
 8014704:	2301      	movlt	r3, #1
 8014706:	e7ba      	b.n	801467e <_dtoa_r+0x246>
 8014708:	2300      	movs	r3, #0
 801470a:	e7b2      	b.n	8014672 <_dtoa_r+0x23a>
 801470c:	2300      	movs	r3, #0
 801470e:	e7f0      	b.n	80146f2 <_dtoa_r+0x2ba>
 8014710:	2501      	movs	r5, #1
 8014712:	2300      	movs	r3, #0
 8014714:	9306      	str	r3, [sp, #24]
 8014716:	950a      	str	r5, [sp, #40]	; 0x28
 8014718:	f04f 33ff 	mov.w	r3, #4294967295
 801471c:	9302      	str	r3, [sp, #8]
 801471e:	4699      	mov	r9, r3
 8014720:	2200      	movs	r2, #0
 8014722:	2312      	movs	r3, #18
 8014724:	920b      	str	r2, [sp, #44]	; 0x2c
 8014726:	e7aa      	b.n	801467e <_dtoa_r+0x246>
 8014728:	2301      	movs	r3, #1
 801472a:	930a      	str	r3, [sp, #40]	; 0x28
 801472c:	e7f4      	b.n	8014718 <_dtoa_r+0x2e0>
 801472e:	2301      	movs	r3, #1
 8014730:	9302      	str	r3, [sp, #8]
 8014732:	4699      	mov	r9, r3
 8014734:	461a      	mov	r2, r3
 8014736:	e7f5      	b.n	8014724 <_dtoa_r+0x2ec>
 8014738:	3101      	adds	r1, #1
 801473a:	6071      	str	r1, [r6, #4]
 801473c:	0052      	lsls	r2, r2, #1
 801473e:	e7a2      	b.n	8014686 <_dtoa_r+0x24e>
 8014740:	636f4361 	.word	0x636f4361
 8014744:	3fd287a7 	.word	0x3fd287a7
 8014748:	8b60c8b3 	.word	0x8b60c8b3
 801474c:	3fc68a28 	.word	0x3fc68a28
 8014750:	509f79fb 	.word	0x509f79fb
 8014754:	3fd34413 	.word	0x3fd34413
 8014758:	7ff00000 	.word	0x7ff00000
 801475c:	080164e9 	.word	0x080164e9
 8014760:	3ff80000 	.word	0x3ff80000
 8014764:	080165a8 	.word	0x080165a8
 8014768:	08016580 	.word	0x08016580
 801476c:	08016515 	.word	0x08016515
 8014770:	07f1      	lsls	r1, r6, #31
 8014772:	d508      	bpl.n	8014786 <_dtoa_r+0x34e>
 8014774:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014778:	e9d7 2300 	ldrd	r2, r3, [r7]
 801477c:	f7f3 fe74 	bl	8008468 <__aeabi_dmul>
 8014780:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014784:	3501      	adds	r5, #1
 8014786:	1076      	asrs	r6, r6, #1
 8014788:	3708      	adds	r7, #8
 801478a:	2e00      	cmp	r6, #0
 801478c:	d1f0      	bne.n	8014770 <_dtoa_r+0x338>
 801478e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014792:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014796:	f7f3 ff91 	bl	80086bc <__aeabi_ddiv>
 801479a:	e9cd 0100 	strd	r0, r1, [sp]
 801479e:	e01a      	b.n	80147d6 <_dtoa_r+0x39e>
 80147a0:	2502      	movs	r5, #2
 80147a2:	e7a3      	b.n	80146ec <_dtoa_r+0x2b4>
 80147a4:	f000 80a0 	beq.w	80148e8 <_dtoa_r+0x4b0>
 80147a8:	f1ca 0600 	rsb	r6, sl, #0
 80147ac:	4b9f      	ldr	r3, [pc, #636]	; (8014a2c <_dtoa_r+0x5f4>)
 80147ae:	4fa0      	ldr	r7, [pc, #640]	; (8014a30 <_dtoa_r+0x5f8>)
 80147b0:	f006 020f 	and.w	r2, r6, #15
 80147b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80147b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80147c0:	f7f3 fe52 	bl	8008468 <__aeabi_dmul>
 80147c4:	e9cd 0100 	strd	r0, r1, [sp]
 80147c8:	1136      	asrs	r6, r6, #4
 80147ca:	2300      	movs	r3, #0
 80147cc:	2502      	movs	r5, #2
 80147ce:	2e00      	cmp	r6, #0
 80147d0:	d17f      	bne.n	80148d2 <_dtoa_r+0x49a>
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d1e1      	bne.n	801479a <_dtoa_r+0x362>
 80147d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80147d8:	2b00      	cmp	r3, #0
 80147da:	f000 8087 	beq.w	80148ec <_dtoa_r+0x4b4>
 80147de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80147e2:	2200      	movs	r2, #0
 80147e4:	4b93      	ldr	r3, [pc, #588]	; (8014a34 <_dtoa_r+0x5fc>)
 80147e6:	4630      	mov	r0, r6
 80147e8:	4639      	mov	r1, r7
 80147ea:	f7f4 f8af 	bl	800894c <__aeabi_dcmplt>
 80147ee:	2800      	cmp	r0, #0
 80147f0:	d07c      	beq.n	80148ec <_dtoa_r+0x4b4>
 80147f2:	f1b9 0f00 	cmp.w	r9, #0
 80147f6:	d079      	beq.n	80148ec <_dtoa_r+0x4b4>
 80147f8:	9b02      	ldr	r3, [sp, #8]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	dd35      	ble.n	801486a <_dtoa_r+0x432>
 80147fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014802:	9308      	str	r3, [sp, #32]
 8014804:	4639      	mov	r1, r7
 8014806:	2200      	movs	r2, #0
 8014808:	4b8b      	ldr	r3, [pc, #556]	; (8014a38 <_dtoa_r+0x600>)
 801480a:	4630      	mov	r0, r6
 801480c:	f7f3 fe2c 	bl	8008468 <__aeabi_dmul>
 8014810:	e9cd 0100 	strd	r0, r1, [sp]
 8014814:	9f02      	ldr	r7, [sp, #8]
 8014816:	3501      	adds	r5, #1
 8014818:	4628      	mov	r0, r5
 801481a:	f7f3 fdbb 	bl	8008394 <__aeabi_i2d>
 801481e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014822:	f7f3 fe21 	bl	8008468 <__aeabi_dmul>
 8014826:	2200      	movs	r2, #0
 8014828:	4b84      	ldr	r3, [pc, #528]	; (8014a3c <_dtoa_r+0x604>)
 801482a:	f7f3 fc67 	bl	80080fc <__adddf3>
 801482e:	4605      	mov	r5, r0
 8014830:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014834:	2f00      	cmp	r7, #0
 8014836:	d15d      	bne.n	80148f4 <_dtoa_r+0x4bc>
 8014838:	2200      	movs	r2, #0
 801483a:	4b81      	ldr	r3, [pc, #516]	; (8014a40 <_dtoa_r+0x608>)
 801483c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014840:	f7f3 fc5a 	bl	80080f8 <__aeabi_dsub>
 8014844:	462a      	mov	r2, r5
 8014846:	4633      	mov	r3, r6
 8014848:	e9cd 0100 	strd	r0, r1, [sp]
 801484c:	f7f4 f89c 	bl	8008988 <__aeabi_dcmpgt>
 8014850:	2800      	cmp	r0, #0
 8014852:	f040 8288 	bne.w	8014d66 <_dtoa_r+0x92e>
 8014856:	462a      	mov	r2, r5
 8014858:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801485c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014860:	f7f4 f874 	bl	800894c <__aeabi_dcmplt>
 8014864:	2800      	cmp	r0, #0
 8014866:	f040 827c 	bne.w	8014d62 <_dtoa_r+0x92a>
 801486a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801486e:	e9cd 2300 	strd	r2, r3, [sp]
 8014872:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014874:	2b00      	cmp	r3, #0
 8014876:	f2c0 8150 	blt.w	8014b1a <_dtoa_r+0x6e2>
 801487a:	f1ba 0f0e 	cmp.w	sl, #14
 801487e:	f300 814c 	bgt.w	8014b1a <_dtoa_r+0x6e2>
 8014882:	4b6a      	ldr	r3, [pc, #424]	; (8014a2c <_dtoa_r+0x5f4>)
 8014884:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014888:	ed93 7b00 	vldr	d7, [r3]
 801488c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801488e:	2b00      	cmp	r3, #0
 8014890:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014894:	f280 80d8 	bge.w	8014a48 <_dtoa_r+0x610>
 8014898:	f1b9 0f00 	cmp.w	r9, #0
 801489c:	f300 80d4 	bgt.w	8014a48 <_dtoa_r+0x610>
 80148a0:	f040 825e 	bne.w	8014d60 <_dtoa_r+0x928>
 80148a4:	2200      	movs	r2, #0
 80148a6:	4b66      	ldr	r3, [pc, #408]	; (8014a40 <_dtoa_r+0x608>)
 80148a8:	ec51 0b17 	vmov	r0, r1, d7
 80148ac:	f7f3 fddc 	bl	8008468 <__aeabi_dmul>
 80148b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80148b4:	f7f4 f85e 	bl	8008974 <__aeabi_dcmpge>
 80148b8:	464f      	mov	r7, r9
 80148ba:	464e      	mov	r6, r9
 80148bc:	2800      	cmp	r0, #0
 80148be:	f040 8234 	bne.w	8014d2a <_dtoa_r+0x8f2>
 80148c2:	2331      	movs	r3, #49	; 0x31
 80148c4:	f10b 0501 	add.w	r5, fp, #1
 80148c8:	f88b 3000 	strb.w	r3, [fp]
 80148cc:	f10a 0a01 	add.w	sl, sl, #1
 80148d0:	e22f      	b.n	8014d32 <_dtoa_r+0x8fa>
 80148d2:	07f2      	lsls	r2, r6, #31
 80148d4:	d505      	bpl.n	80148e2 <_dtoa_r+0x4aa>
 80148d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80148da:	f7f3 fdc5 	bl	8008468 <__aeabi_dmul>
 80148de:	3501      	adds	r5, #1
 80148e0:	2301      	movs	r3, #1
 80148e2:	1076      	asrs	r6, r6, #1
 80148e4:	3708      	adds	r7, #8
 80148e6:	e772      	b.n	80147ce <_dtoa_r+0x396>
 80148e8:	2502      	movs	r5, #2
 80148ea:	e774      	b.n	80147d6 <_dtoa_r+0x39e>
 80148ec:	f8cd a020 	str.w	sl, [sp, #32]
 80148f0:	464f      	mov	r7, r9
 80148f2:	e791      	b.n	8014818 <_dtoa_r+0x3e0>
 80148f4:	4b4d      	ldr	r3, [pc, #308]	; (8014a2c <_dtoa_r+0x5f4>)
 80148f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80148fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80148fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014900:	2b00      	cmp	r3, #0
 8014902:	d047      	beq.n	8014994 <_dtoa_r+0x55c>
 8014904:	4602      	mov	r2, r0
 8014906:	460b      	mov	r3, r1
 8014908:	2000      	movs	r0, #0
 801490a:	494e      	ldr	r1, [pc, #312]	; (8014a44 <_dtoa_r+0x60c>)
 801490c:	f7f3 fed6 	bl	80086bc <__aeabi_ddiv>
 8014910:	462a      	mov	r2, r5
 8014912:	4633      	mov	r3, r6
 8014914:	f7f3 fbf0 	bl	80080f8 <__aeabi_dsub>
 8014918:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801491c:	465d      	mov	r5, fp
 801491e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014922:	f7f4 f851 	bl	80089c8 <__aeabi_d2iz>
 8014926:	4606      	mov	r6, r0
 8014928:	f7f3 fd34 	bl	8008394 <__aeabi_i2d>
 801492c:	4602      	mov	r2, r0
 801492e:	460b      	mov	r3, r1
 8014930:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014934:	f7f3 fbe0 	bl	80080f8 <__aeabi_dsub>
 8014938:	3630      	adds	r6, #48	; 0x30
 801493a:	f805 6b01 	strb.w	r6, [r5], #1
 801493e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014942:	e9cd 0100 	strd	r0, r1, [sp]
 8014946:	f7f4 f801 	bl	800894c <__aeabi_dcmplt>
 801494a:	2800      	cmp	r0, #0
 801494c:	d163      	bne.n	8014a16 <_dtoa_r+0x5de>
 801494e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014952:	2000      	movs	r0, #0
 8014954:	4937      	ldr	r1, [pc, #220]	; (8014a34 <_dtoa_r+0x5fc>)
 8014956:	f7f3 fbcf 	bl	80080f8 <__aeabi_dsub>
 801495a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801495e:	f7f3 fff5 	bl	800894c <__aeabi_dcmplt>
 8014962:	2800      	cmp	r0, #0
 8014964:	f040 80b7 	bne.w	8014ad6 <_dtoa_r+0x69e>
 8014968:	eba5 030b 	sub.w	r3, r5, fp
 801496c:	429f      	cmp	r7, r3
 801496e:	f77f af7c 	ble.w	801486a <_dtoa_r+0x432>
 8014972:	2200      	movs	r2, #0
 8014974:	4b30      	ldr	r3, [pc, #192]	; (8014a38 <_dtoa_r+0x600>)
 8014976:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801497a:	f7f3 fd75 	bl	8008468 <__aeabi_dmul>
 801497e:	2200      	movs	r2, #0
 8014980:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014984:	4b2c      	ldr	r3, [pc, #176]	; (8014a38 <_dtoa_r+0x600>)
 8014986:	e9dd 0100 	ldrd	r0, r1, [sp]
 801498a:	f7f3 fd6d 	bl	8008468 <__aeabi_dmul>
 801498e:	e9cd 0100 	strd	r0, r1, [sp]
 8014992:	e7c4      	b.n	801491e <_dtoa_r+0x4e6>
 8014994:	462a      	mov	r2, r5
 8014996:	4633      	mov	r3, r6
 8014998:	f7f3 fd66 	bl	8008468 <__aeabi_dmul>
 801499c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80149a0:	eb0b 0507 	add.w	r5, fp, r7
 80149a4:	465e      	mov	r6, fp
 80149a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80149aa:	f7f4 f80d 	bl	80089c8 <__aeabi_d2iz>
 80149ae:	4607      	mov	r7, r0
 80149b0:	f7f3 fcf0 	bl	8008394 <__aeabi_i2d>
 80149b4:	3730      	adds	r7, #48	; 0x30
 80149b6:	4602      	mov	r2, r0
 80149b8:	460b      	mov	r3, r1
 80149ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80149be:	f7f3 fb9b 	bl	80080f8 <__aeabi_dsub>
 80149c2:	f806 7b01 	strb.w	r7, [r6], #1
 80149c6:	42ae      	cmp	r6, r5
 80149c8:	e9cd 0100 	strd	r0, r1, [sp]
 80149cc:	f04f 0200 	mov.w	r2, #0
 80149d0:	d126      	bne.n	8014a20 <_dtoa_r+0x5e8>
 80149d2:	4b1c      	ldr	r3, [pc, #112]	; (8014a44 <_dtoa_r+0x60c>)
 80149d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80149d8:	f7f3 fb90 	bl	80080fc <__adddf3>
 80149dc:	4602      	mov	r2, r0
 80149de:	460b      	mov	r3, r1
 80149e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80149e4:	f7f3 ffd0 	bl	8008988 <__aeabi_dcmpgt>
 80149e8:	2800      	cmp	r0, #0
 80149ea:	d174      	bne.n	8014ad6 <_dtoa_r+0x69e>
 80149ec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80149f0:	2000      	movs	r0, #0
 80149f2:	4914      	ldr	r1, [pc, #80]	; (8014a44 <_dtoa_r+0x60c>)
 80149f4:	f7f3 fb80 	bl	80080f8 <__aeabi_dsub>
 80149f8:	4602      	mov	r2, r0
 80149fa:	460b      	mov	r3, r1
 80149fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a00:	f7f3 ffa4 	bl	800894c <__aeabi_dcmplt>
 8014a04:	2800      	cmp	r0, #0
 8014a06:	f43f af30 	beq.w	801486a <_dtoa_r+0x432>
 8014a0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014a0e:	2b30      	cmp	r3, #48	; 0x30
 8014a10:	f105 32ff 	add.w	r2, r5, #4294967295
 8014a14:	d002      	beq.n	8014a1c <_dtoa_r+0x5e4>
 8014a16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014a1a:	e04a      	b.n	8014ab2 <_dtoa_r+0x67a>
 8014a1c:	4615      	mov	r5, r2
 8014a1e:	e7f4      	b.n	8014a0a <_dtoa_r+0x5d2>
 8014a20:	4b05      	ldr	r3, [pc, #20]	; (8014a38 <_dtoa_r+0x600>)
 8014a22:	f7f3 fd21 	bl	8008468 <__aeabi_dmul>
 8014a26:	e9cd 0100 	strd	r0, r1, [sp]
 8014a2a:	e7bc      	b.n	80149a6 <_dtoa_r+0x56e>
 8014a2c:	080165a8 	.word	0x080165a8
 8014a30:	08016580 	.word	0x08016580
 8014a34:	3ff00000 	.word	0x3ff00000
 8014a38:	40240000 	.word	0x40240000
 8014a3c:	401c0000 	.word	0x401c0000
 8014a40:	40140000 	.word	0x40140000
 8014a44:	3fe00000 	.word	0x3fe00000
 8014a48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014a4c:	465d      	mov	r5, fp
 8014a4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014a52:	4630      	mov	r0, r6
 8014a54:	4639      	mov	r1, r7
 8014a56:	f7f3 fe31 	bl	80086bc <__aeabi_ddiv>
 8014a5a:	f7f3 ffb5 	bl	80089c8 <__aeabi_d2iz>
 8014a5e:	4680      	mov	r8, r0
 8014a60:	f7f3 fc98 	bl	8008394 <__aeabi_i2d>
 8014a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014a68:	f7f3 fcfe 	bl	8008468 <__aeabi_dmul>
 8014a6c:	4602      	mov	r2, r0
 8014a6e:	460b      	mov	r3, r1
 8014a70:	4630      	mov	r0, r6
 8014a72:	4639      	mov	r1, r7
 8014a74:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014a78:	f7f3 fb3e 	bl	80080f8 <__aeabi_dsub>
 8014a7c:	f805 6b01 	strb.w	r6, [r5], #1
 8014a80:	eba5 060b 	sub.w	r6, r5, fp
 8014a84:	45b1      	cmp	r9, r6
 8014a86:	4602      	mov	r2, r0
 8014a88:	460b      	mov	r3, r1
 8014a8a:	d139      	bne.n	8014b00 <_dtoa_r+0x6c8>
 8014a8c:	f7f3 fb36 	bl	80080fc <__adddf3>
 8014a90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014a94:	4606      	mov	r6, r0
 8014a96:	460f      	mov	r7, r1
 8014a98:	f7f3 ff76 	bl	8008988 <__aeabi_dcmpgt>
 8014a9c:	b9c8      	cbnz	r0, 8014ad2 <_dtoa_r+0x69a>
 8014a9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014aa2:	4630      	mov	r0, r6
 8014aa4:	4639      	mov	r1, r7
 8014aa6:	f7f3 ff47 	bl	8008938 <__aeabi_dcmpeq>
 8014aaa:	b110      	cbz	r0, 8014ab2 <_dtoa_r+0x67a>
 8014aac:	f018 0f01 	tst.w	r8, #1
 8014ab0:	d10f      	bne.n	8014ad2 <_dtoa_r+0x69a>
 8014ab2:	9904      	ldr	r1, [sp, #16]
 8014ab4:	4620      	mov	r0, r4
 8014ab6:	f000 fb8b 	bl	80151d0 <_Bfree>
 8014aba:	2300      	movs	r3, #0
 8014abc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014abe:	702b      	strb	r3, [r5, #0]
 8014ac0:	f10a 0301 	add.w	r3, sl, #1
 8014ac4:	6013      	str	r3, [r2, #0]
 8014ac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	f000 8241 	beq.w	8014f50 <_dtoa_r+0xb18>
 8014ace:	601d      	str	r5, [r3, #0]
 8014ad0:	e23e      	b.n	8014f50 <_dtoa_r+0xb18>
 8014ad2:	f8cd a020 	str.w	sl, [sp, #32]
 8014ad6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014ada:	2a39      	cmp	r2, #57	; 0x39
 8014adc:	f105 33ff 	add.w	r3, r5, #4294967295
 8014ae0:	d108      	bne.n	8014af4 <_dtoa_r+0x6bc>
 8014ae2:	459b      	cmp	fp, r3
 8014ae4:	d10a      	bne.n	8014afc <_dtoa_r+0x6c4>
 8014ae6:	9b08      	ldr	r3, [sp, #32]
 8014ae8:	3301      	adds	r3, #1
 8014aea:	9308      	str	r3, [sp, #32]
 8014aec:	2330      	movs	r3, #48	; 0x30
 8014aee:	f88b 3000 	strb.w	r3, [fp]
 8014af2:	465b      	mov	r3, fp
 8014af4:	781a      	ldrb	r2, [r3, #0]
 8014af6:	3201      	adds	r2, #1
 8014af8:	701a      	strb	r2, [r3, #0]
 8014afa:	e78c      	b.n	8014a16 <_dtoa_r+0x5de>
 8014afc:	461d      	mov	r5, r3
 8014afe:	e7ea      	b.n	8014ad6 <_dtoa_r+0x69e>
 8014b00:	2200      	movs	r2, #0
 8014b02:	4b9b      	ldr	r3, [pc, #620]	; (8014d70 <_dtoa_r+0x938>)
 8014b04:	f7f3 fcb0 	bl	8008468 <__aeabi_dmul>
 8014b08:	2200      	movs	r2, #0
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	4606      	mov	r6, r0
 8014b0e:	460f      	mov	r7, r1
 8014b10:	f7f3 ff12 	bl	8008938 <__aeabi_dcmpeq>
 8014b14:	2800      	cmp	r0, #0
 8014b16:	d09a      	beq.n	8014a4e <_dtoa_r+0x616>
 8014b18:	e7cb      	b.n	8014ab2 <_dtoa_r+0x67a>
 8014b1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b1c:	2a00      	cmp	r2, #0
 8014b1e:	f000 808b 	beq.w	8014c38 <_dtoa_r+0x800>
 8014b22:	9a06      	ldr	r2, [sp, #24]
 8014b24:	2a01      	cmp	r2, #1
 8014b26:	dc6e      	bgt.n	8014c06 <_dtoa_r+0x7ce>
 8014b28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014b2a:	2a00      	cmp	r2, #0
 8014b2c:	d067      	beq.n	8014bfe <_dtoa_r+0x7c6>
 8014b2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014b32:	9f07      	ldr	r7, [sp, #28]
 8014b34:	9d05      	ldr	r5, [sp, #20]
 8014b36:	9a05      	ldr	r2, [sp, #20]
 8014b38:	2101      	movs	r1, #1
 8014b3a:	441a      	add	r2, r3
 8014b3c:	4620      	mov	r0, r4
 8014b3e:	9205      	str	r2, [sp, #20]
 8014b40:	4498      	add	r8, r3
 8014b42:	f000 fbe5 	bl	8015310 <__i2b>
 8014b46:	4606      	mov	r6, r0
 8014b48:	2d00      	cmp	r5, #0
 8014b4a:	dd0c      	ble.n	8014b66 <_dtoa_r+0x72e>
 8014b4c:	f1b8 0f00 	cmp.w	r8, #0
 8014b50:	dd09      	ble.n	8014b66 <_dtoa_r+0x72e>
 8014b52:	4545      	cmp	r5, r8
 8014b54:	9a05      	ldr	r2, [sp, #20]
 8014b56:	462b      	mov	r3, r5
 8014b58:	bfa8      	it	ge
 8014b5a:	4643      	movge	r3, r8
 8014b5c:	1ad2      	subs	r2, r2, r3
 8014b5e:	9205      	str	r2, [sp, #20]
 8014b60:	1aed      	subs	r5, r5, r3
 8014b62:	eba8 0803 	sub.w	r8, r8, r3
 8014b66:	9b07      	ldr	r3, [sp, #28]
 8014b68:	b1eb      	cbz	r3, 8014ba6 <_dtoa_r+0x76e>
 8014b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d067      	beq.n	8014c40 <_dtoa_r+0x808>
 8014b70:	b18f      	cbz	r7, 8014b96 <_dtoa_r+0x75e>
 8014b72:	4631      	mov	r1, r6
 8014b74:	463a      	mov	r2, r7
 8014b76:	4620      	mov	r0, r4
 8014b78:	f000 fc6a 	bl	8015450 <__pow5mult>
 8014b7c:	9a04      	ldr	r2, [sp, #16]
 8014b7e:	4601      	mov	r1, r0
 8014b80:	4606      	mov	r6, r0
 8014b82:	4620      	mov	r0, r4
 8014b84:	f000 fbcd 	bl	8015322 <__multiply>
 8014b88:	9904      	ldr	r1, [sp, #16]
 8014b8a:	9008      	str	r0, [sp, #32]
 8014b8c:	4620      	mov	r0, r4
 8014b8e:	f000 fb1f 	bl	80151d0 <_Bfree>
 8014b92:	9b08      	ldr	r3, [sp, #32]
 8014b94:	9304      	str	r3, [sp, #16]
 8014b96:	9b07      	ldr	r3, [sp, #28]
 8014b98:	1bda      	subs	r2, r3, r7
 8014b9a:	d004      	beq.n	8014ba6 <_dtoa_r+0x76e>
 8014b9c:	9904      	ldr	r1, [sp, #16]
 8014b9e:	4620      	mov	r0, r4
 8014ba0:	f000 fc56 	bl	8015450 <__pow5mult>
 8014ba4:	9004      	str	r0, [sp, #16]
 8014ba6:	2101      	movs	r1, #1
 8014ba8:	4620      	mov	r0, r4
 8014baa:	f000 fbb1 	bl	8015310 <__i2b>
 8014bae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014bb0:	4607      	mov	r7, r0
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	f000 81d0 	beq.w	8014f58 <_dtoa_r+0xb20>
 8014bb8:	461a      	mov	r2, r3
 8014bba:	4601      	mov	r1, r0
 8014bbc:	4620      	mov	r0, r4
 8014bbe:	f000 fc47 	bl	8015450 <__pow5mult>
 8014bc2:	9b06      	ldr	r3, [sp, #24]
 8014bc4:	2b01      	cmp	r3, #1
 8014bc6:	4607      	mov	r7, r0
 8014bc8:	dc40      	bgt.n	8014c4c <_dtoa_r+0x814>
 8014bca:	9b00      	ldr	r3, [sp, #0]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d139      	bne.n	8014c44 <_dtoa_r+0x80c>
 8014bd0:	9b01      	ldr	r3, [sp, #4]
 8014bd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d136      	bne.n	8014c48 <_dtoa_r+0x810>
 8014bda:	9b01      	ldr	r3, [sp, #4]
 8014bdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014be0:	0d1b      	lsrs	r3, r3, #20
 8014be2:	051b      	lsls	r3, r3, #20
 8014be4:	b12b      	cbz	r3, 8014bf2 <_dtoa_r+0x7ba>
 8014be6:	9b05      	ldr	r3, [sp, #20]
 8014be8:	3301      	adds	r3, #1
 8014bea:	9305      	str	r3, [sp, #20]
 8014bec:	f108 0801 	add.w	r8, r8, #1
 8014bf0:	2301      	movs	r3, #1
 8014bf2:	9307      	str	r3, [sp, #28]
 8014bf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d12a      	bne.n	8014c50 <_dtoa_r+0x818>
 8014bfa:	2001      	movs	r0, #1
 8014bfc:	e030      	b.n	8014c60 <_dtoa_r+0x828>
 8014bfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014c00:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014c04:	e795      	b.n	8014b32 <_dtoa_r+0x6fa>
 8014c06:	9b07      	ldr	r3, [sp, #28]
 8014c08:	f109 37ff 	add.w	r7, r9, #4294967295
 8014c0c:	42bb      	cmp	r3, r7
 8014c0e:	bfbf      	itttt	lt
 8014c10:	9b07      	ldrlt	r3, [sp, #28]
 8014c12:	9707      	strlt	r7, [sp, #28]
 8014c14:	1afa      	sublt	r2, r7, r3
 8014c16:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014c18:	bfbb      	ittet	lt
 8014c1a:	189b      	addlt	r3, r3, r2
 8014c1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014c1e:	1bdf      	subge	r7, r3, r7
 8014c20:	2700      	movlt	r7, #0
 8014c22:	f1b9 0f00 	cmp.w	r9, #0
 8014c26:	bfb5      	itete	lt
 8014c28:	9b05      	ldrlt	r3, [sp, #20]
 8014c2a:	9d05      	ldrge	r5, [sp, #20]
 8014c2c:	eba3 0509 	sublt.w	r5, r3, r9
 8014c30:	464b      	movge	r3, r9
 8014c32:	bfb8      	it	lt
 8014c34:	2300      	movlt	r3, #0
 8014c36:	e77e      	b.n	8014b36 <_dtoa_r+0x6fe>
 8014c38:	9f07      	ldr	r7, [sp, #28]
 8014c3a:	9d05      	ldr	r5, [sp, #20]
 8014c3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014c3e:	e783      	b.n	8014b48 <_dtoa_r+0x710>
 8014c40:	9a07      	ldr	r2, [sp, #28]
 8014c42:	e7ab      	b.n	8014b9c <_dtoa_r+0x764>
 8014c44:	2300      	movs	r3, #0
 8014c46:	e7d4      	b.n	8014bf2 <_dtoa_r+0x7ba>
 8014c48:	9b00      	ldr	r3, [sp, #0]
 8014c4a:	e7d2      	b.n	8014bf2 <_dtoa_r+0x7ba>
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	9307      	str	r3, [sp, #28]
 8014c50:	693b      	ldr	r3, [r7, #16]
 8014c52:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014c56:	6918      	ldr	r0, [r3, #16]
 8014c58:	f000 fb0c 	bl	8015274 <__hi0bits>
 8014c5c:	f1c0 0020 	rsb	r0, r0, #32
 8014c60:	4440      	add	r0, r8
 8014c62:	f010 001f 	ands.w	r0, r0, #31
 8014c66:	d047      	beq.n	8014cf8 <_dtoa_r+0x8c0>
 8014c68:	f1c0 0320 	rsb	r3, r0, #32
 8014c6c:	2b04      	cmp	r3, #4
 8014c6e:	dd3b      	ble.n	8014ce8 <_dtoa_r+0x8b0>
 8014c70:	9b05      	ldr	r3, [sp, #20]
 8014c72:	f1c0 001c 	rsb	r0, r0, #28
 8014c76:	4403      	add	r3, r0
 8014c78:	9305      	str	r3, [sp, #20]
 8014c7a:	4405      	add	r5, r0
 8014c7c:	4480      	add	r8, r0
 8014c7e:	9b05      	ldr	r3, [sp, #20]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	dd05      	ble.n	8014c90 <_dtoa_r+0x858>
 8014c84:	461a      	mov	r2, r3
 8014c86:	9904      	ldr	r1, [sp, #16]
 8014c88:	4620      	mov	r0, r4
 8014c8a:	f000 fc2f 	bl	80154ec <__lshift>
 8014c8e:	9004      	str	r0, [sp, #16]
 8014c90:	f1b8 0f00 	cmp.w	r8, #0
 8014c94:	dd05      	ble.n	8014ca2 <_dtoa_r+0x86a>
 8014c96:	4639      	mov	r1, r7
 8014c98:	4642      	mov	r2, r8
 8014c9a:	4620      	mov	r0, r4
 8014c9c:	f000 fc26 	bl	80154ec <__lshift>
 8014ca0:	4607      	mov	r7, r0
 8014ca2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ca4:	b353      	cbz	r3, 8014cfc <_dtoa_r+0x8c4>
 8014ca6:	4639      	mov	r1, r7
 8014ca8:	9804      	ldr	r0, [sp, #16]
 8014caa:	f000 fc73 	bl	8015594 <__mcmp>
 8014cae:	2800      	cmp	r0, #0
 8014cb0:	da24      	bge.n	8014cfc <_dtoa_r+0x8c4>
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	220a      	movs	r2, #10
 8014cb6:	9904      	ldr	r1, [sp, #16]
 8014cb8:	4620      	mov	r0, r4
 8014cba:	f000 faa0 	bl	80151fe <__multadd>
 8014cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cc0:	9004      	str	r0, [sp, #16]
 8014cc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	f000 814d 	beq.w	8014f66 <_dtoa_r+0xb2e>
 8014ccc:	2300      	movs	r3, #0
 8014cce:	4631      	mov	r1, r6
 8014cd0:	220a      	movs	r2, #10
 8014cd2:	4620      	mov	r0, r4
 8014cd4:	f000 fa93 	bl	80151fe <__multadd>
 8014cd8:	9b02      	ldr	r3, [sp, #8]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	4606      	mov	r6, r0
 8014cde:	dc4f      	bgt.n	8014d80 <_dtoa_r+0x948>
 8014ce0:	9b06      	ldr	r3, [sp, #24]
 8014ce2:	2b02      	cmp	r3, #2
 8014ce4:	dd4c      	ble.n	8014d80 <_dtoa_r+0x948>
 8014ce6:	e011      	b.n	8014d0c <_dtoa_r+0x8d4>
 8014ce8:	d0c9      	beq.n	8014c7e <_dtoa_r+0x846>
 8014cea:	9a05      	ldr	r2, [sp, #20]
 8014cec:	331c      	adds	r3, #28
 8014cee:	441a      	add	r2, r3
 8014cf0:	9205      	str	r2, [sp, #20]
 8014cf2:	441d      	add	r5, r3
 8014cf4:	4498      	add	r8, r3
 8014cf6:	e7c2      	b.n	8014c7e <_dtoa_r+0x846>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	e7f6      	b.n	8014cea <_dtoa_r+0x8b2>
 8014cfc:	f1b9 0f00 	cmp.w	r9, #0
 8014d00:	dc38      	bgt.n	8014d74 <_dtoa_r+0x93c>
 8014d02:	9b06      	ldr	r3, [sp, #24]
 8014d04:	2b02      	cmp	r3, #2
 8014d06:	dd35      	ble.n	8014d74 <_dtoa_r+0x93c>
 8014d08:	f8cd 9008 	str.w	r9, [sp, #8]
 8014d0c:	9b02      	ldr	r3, [sp, #8]
 8014d0e:	b963      	cbnz	r3, 8014d2a <_dtoa_r+0x8f2>
 8014d10:	4639      	mov	r1, r7
 8014d12:	2205      	movs	r2, #5
 8014d14:	4620      	mov	r0, r4
 8014d16:	f000 fa72 	bl	80151fe <__multadd>
 8014d1a:	4601      	mov	r1, r0
 8014d1c:	4607      	mov	r7, r0
 8014d1e:	9804      	ldr	r0, [sp, #16]
 8014d20:	f000 fc38 	bl	8015594 <__mcmp>
 8014d24:	2800      	cmp	r0, #0
 8014d26:	f73f adcc 	bgt.w	80148c2 <_dtoa_r+0x48a>
 8014d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d2c:	465d      	mov	r5, fp
 8014d2e:	ea6f 0a03 	mvn.w	sl, r3
 8014d32:	f04f 0900 	mov.w	r9, #0
 8014d36:	4639      	mov	r1, r7
 8014d38:	4620      	mov	r0, r4
 8014d3a:	f000 fa49 	bl	80151d0 <_Bfree>
 8014d3e:	2e00      	cmp	r6, #0
 8014d40:	f43f aeb7 	beq.w	8014ab2 <_dtoa_r+0x67a>
 8014d44:	f1b9 0f00 	cmp.w	r9, #0
 8014d48:	d005      	beq.n	8014d56 <_dtoa_r+0x91e>
 8014d4a:	45b1      	cmp	r9, r6
 8014d4c:	d003      	beq.n	8014d56 <_dtoa_r+0x91e>
 8014d4e:	4649      	mov	r1, r9
 8014d50:	4620      	mov	r0, r4
 8014d52:	f000 fa3d 	bl	80151d0 <_Bfree>
 8014d56:	4631      	mov	r1, r6
 8014d58:	4620      	mov	r0, r4
 8014d5a:	f000 fa39 	bl	80151d0 <_Bfree>
 8014d5e:	e6a8      	b.n	8014ab2 <_dtoa_r+0x67a>
 8014d60:	2700      	movs	r7, #0
 8014d62:	463e      	mov	r6, r7
 8014d64:	e7e1      	b.n	8014d2a <_dtoa_r+0x8f2>
 8014d66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014d6a:	463e      	mov	r6, r7
 8014d6c:	e5a9      	b.n	80148c2 <_dtoa_r+0x48a>
 8014d6e:	bf00      	nop
 8014d70:	40240000 	.word	0x40240000
 8014d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d76:	f8cd 9008 	str.w	r9, [sp, #8]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	f000 80fa 	beq.w	8014f74 <_dtoa_r+0xb3c>
 8014d80:	2d00      	cmp	r5, #0
 8014d82:	dd05      	ble.n	8014d90 <_dtoa_r+0x958>
 8014d84:	4631      	mov	r1, r6
 8014d86:	462a      	mov	r2, r5
 8014d88:	4620      	mov	r0, r4
 8014d8a:	f000 fbaf 	bl	80154ec <__lshift>
 8014d8e:	4606      	mov	r6, r0
 8014d90:	9b07      	ldr	r3, [sp, #28]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d04c      	beq.n	8014e30 <_dtoa_r+0x9f8>
 8014d96:	6871      	ldr	r1, [r6, #4]
 8014d98:	4620      	mov	r0, r4
 8014d9a:	f000 f9e5 	bl	8015168 <_Balloc>
 8014d9e:	6932      	ldr	r2, [r6, #16]
 8014da0:	3202      	adds	r2, #2
 8014da2:	4605      	mov	r5, r0
 8014da4:	0092      	lsls	r2, r2, #2
 8014da6:	f106 010c 	add.w	r1, r6, #12
 8014daa:	300c      	adds	r0, #12
 8014dac:	f7fe fe0e 	bl	80139cc <memcpy>
 8014db0:	2201      	movs	r2, #1
 8014db2:	4629      	mov	r1, r5
 8014db4:	4620      	mov	r0, r4
 8014db6:	f000 fb99 	bl	80154ec <__lshift>
 8014dba:	9b00      	ldr	r3, [sp, #0]
 8014dbc:	f8cd b014 	str.w	fp, [sp, #20]
 8014dc0:	f003 0301 	and.w	r3, r3, #1
 8014dc4:	46b1      	mov	r9, r6
 8014dc6:	9307      	str	r3, [sp, #28]
 8014dc8:	4606      	mov	r6, r0
 8014dca:	4639      	mov	r1, r7
 8014dcc:	9804      	ldr	r0, [sp, #16]
 8014dce:	f7ff faa5 	bl	801431c <quorem>
 8014dd2:	4649      	mov	r1, r9
 8014dd4:	4605      	mov	r5, r0
 8014dd6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014dda:	9804      	ldr	r0, [sp, #16]
 8014ddc:	f000 fbda 	bl	8015594 <__mcmp>
 8014de0:	4632      	mov	r2, r6
 8014de2:	9000      	str	r0, [sp, #0]
 8014de4:	4639      	mov	r1, r7
 8014de6:	4620      	mov	r0, r4
 8014de8:	f000 fbee 	bl	80155c8 <__mdiff>
 8014dec:	68c3      	ldr	r3, [r0, #12]
 8014dee:	4602      	mov	r2, r0
 8014df0:	bb03      	cbnz	r3, 8014e34 <_dtoa_r+0x9fc>
 8014df2:	4601      	mov	r1, r0
 8014df4:	9008      	str	r0, [sp, #32]
 8014df6:	9804      	ldr	r0, [sp, #16]
 8014df8:	f000 fbcc 	bl	8015594 <__mcmp>
 8014dfc:	9a08      	ldr	r2, [sp, #32]
 8014dfe:	4603      	mov	r3, r0
 8014e00:	4611      	mov	r1, r2
 8014e02:	4620      	mov	r0, r4
 8014e04:	9308      	str	r3, [sp, #32]
 8014e06:	f000 f9e3 	bl	80151d0 <_Bfree>
 8014e0a:	9b08      	ldr	r3, [sp, #32]
 8014e0c:	b9a3      	cbnz	r3, 8014e38 <_dtoa_r+0xa00>
 8014e0e:	9a06      	ldr	r2, [sp, #24]
 8014e10:	b992      	cbnz	r2, 8014e38 <_dtoa_r+0xa00>
 8014e12:	9a07      	ldr	r2, [sp, #28]
 8014e14:	b982      	cbnz	r2, 8014e38 <_dtoa_r+0xa00>
 8014e16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014e1a:	d029      	beq.n	8014e70 <_dtoa_r+0xa38>
 8014e1c:	9b00      	ldr	r3, [sp, #0]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	dd01      	ble.n	8014e26 <_dtoa_r+0x9ee>
 8014e22:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8014e26:	9b05      	ldr	r3, [sp, #20]
 8014e28:	1c5d      	adds	r5, r3, #1
 8014e2a:	f883 8000 	strb.w	r8, [r3]
 8014e2e:	e782      	b.n	8014d36 <_dtoa_r+0x8fe>
 8014e30:	4630      	mov	r0, r6
 8014e32:	e7c2      	b.n	8014dba <_dtoa_r+0x982>
 8014e34:	2301      	movs	r3, #1
 8014e36:	e7e3      	b.n	8014e00 <_dtoa_r+0x9c8>
 8014e38:	9a00      	ldr	r2, [sp, #0]
 8014e3a:	2a00      	cmp	r2, #0
 8014e3c:	db04      	blt.n	8014e48 <_dtoa_r+0xa10>
 8014e3e:	d125      	bne.n	8014e8c <_dtoa_r+0xa54>
 8014e40:	9a06      	ldr	r2, [sp, #24]
 8014e42:	bb1a      	cbnz	r2, 8014e8c <_dtoa_r+0xa54>
 8014e44:	9a07      	ldr	r2, [sp, #28]
 8014e46:	bb0a      	cbnz	r2, 8014e8c <_dtoa_r+0xa54>
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	ddec      	ble.n	8014e26 <_dtoa_r+0x9ee>
 8014e4c:	2201      	movs	r2, #1
 8014e4e:	9904      	ldr	r1, [sp, #16]
 8014e50:	4620      	mov	r0, r4
 8014e52:	f000 fb4b 	bl	80154ec <__lshift>
 8014e56:	4639      	mov	r1, r7
 8014e58:	9004      	str	r0, [sp, #16]
 8014e5a:	f000 fb9b 	bl	8015594 <__mcmp>
 8014e5e:	2800      	cmp	r0, #0
 8014e60:	dc03      	bgt.n	8014e6a <_dtoa_r+0xa32>
 8014e62:	d1e0      	bne.n	8014e26 <_dtoa_r+0x9ee>
 8014e64:	f018 0f01 	tst.w	r8, #1
 8014e68:	d0dd      	beq.n	8014e26 <_dtoa_r+0x9ee>
 8014e6a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014e6e:	d1d8      	bne.n	8014e22 <_dtoa_r+0x9ea>
 8014e70:	9b05      	ldr	r3, [sp, #20]
 8014e72:	9a05      	ldr	r2, [sp, #20]
 8014e74:	1c5d      	adds	r5, r3, #1
 8014e76:	2339      	movs	r3, #57	; 0x39
 8014e78:	7013      	strb	r3, [r2, #0]
 8014e7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014e7e:	2b39      	cmp	r3, #57	; 0x39
 8014e80:	f105 32ff 	add.w	r2, r5, #4294967295
 8014e84:	d04f      	beq.n	8014f26 <_dtoa_r+0xaee>
 8014e86:	3301      	adds	r3, #1
 8014e88:	7013      	strb	r3, [r2, #0]
 8014e8a:	e754      	b.n	8014d36 <_dtoa_r+0x8fe>
 8014e8c:	9a05      	ldr	r2, [sp, #20]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	f102 0501 	add.w	r5, r2, #1
 8014e94:	dd06      	ble.n	8014ea4 <_dtoa_r+0xa6c>
 8014e96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014e9a:	d0e9      	beq.n	8014e70 <_dtoa_r+0xa38>
 8014e9c:	f108 0801 	add.w	r8, r8, #1
 8014ea0:	9b05      	ldr	r3, [sp, #20]
 8014ea2:	e7c2      	b.n	8014e2a <_dtoa_r+0x9f2>
 8014ea4:	9a02      	ldr	r2, [sp, #8]
 8014ea6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014eaa:	eba5 030b 	sub.w	r3, r5, fp
 8014eae:	4293      	cmp	r3, r2
 8014eb0:	d021      	beq.n	8014ef6 <_dtoa_r+0xabe>
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	220a      	movs	r2, #10
 8014eb6:	9904      	ldr	r1, [sp, #16]
 8014eb8:	4620      	mov	r0, r4
 8014eba:	f000 f9a0 	bl	80151fe <__multadd>
 8014ebe:	45b1      	cmp	r9, r6
 8014ec0:	9004      	str	r0, [sp, #16]
 8014ec2:	f04f 0300 	mov.w	r3, #0
 8014ec6:	f04f 020a 	mov.w	r2, #10
 8014eca:	4649      	mov	r1, r9
 8014ecc:	4620      	mov	r0, r4
 8014ece:	d105      	bne.n	8014edc <_dtoa_r+0xaa4>
 8014ed0:	f000 f995 	bl	80151fe <__multadd>
 8014ed4:	4681      	mov	r9, r0
 8014ed6:	4606      	mov	r6, r0
 8014ed8:	9505      	str	r5, [sp, #20]
 8014eda:	e776      	b.n	8014dca <_dtoa_r+0x992>
 8014edc:	f000 f98f 	bl	80151fe <__multadd>
 8014ee0:	4631      	mov	r1, r6
 8014ee2:	4681      	mov	r9, r0
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	220a      	movs	r2, #10
 8014ee8:	4620      	mov	r0, r4
 8014eea:	f000 f988 	bl	80151fe <__multadd>
 8014eee:	4606      	mov	r6, r0
 8014ef0:	e7f2      	b.n	8014ed8 <_dtoa_r+0xaa0>
 8014ef2:	f04f 0900 	mov.w	r9, #0
 8014ef6:	2201      	movs	r2, #1
 8014ef8:	9904      	ldr	r1, [sp, #16]
 8014efa:	4620      	mov	r0, r4
 8014efc:	f000 faf6 	bl	80154ec <__lshift>
 8014f00:	4639      	mov	r1, r7
 8014f02:	9004      	str	r0, [sp, #16]
 8014f04:	f000 fb46 	bl	8015594 <__mcmp>
 8014f08:	2800      	cmp	r0, #0
 8014f0a:	dcb6      	bgt.n	8014e7a <_dtoa_r+0xa42>
 8014f0c:	d102      	bne.n	8014f14 <_dtoa_r+0xadc>
 8014f0e:	f018 0f01 	tst.w	r8, #1
 8014f12:	d1b2      	bne.n	8014e7a <_dtoa_r+0xa42>
 8014f14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014f18:	2b30      	cmp	r3, #48	; 0x30
 8014f1a:	f105 32ff 	add.w	r2, r5, #4294967295
 8014f1e:	f47f af0a 	bne.w	8014d36 <_dtoa_r+0x8fe>
 8014f22:	4615      	mov	r5, r2
 8014f24:	e7f6      	b.n	8014f14 <_dtoa_r+0xadc>
 8014f26:	4593      	cmp	fp, r2
 8014f28:	d105      	bne.n	8014f36 <_dtoa_r+0xafe>
 8014f2a:	2331      	movs	r3, #49	; 0x31
 8014f2c:	f10a 0a01 	add.w	sl, sl, #1
 8014f30:	f88b 3000 	strb.w	r3, [fp]
 8014f34:	e6ff      	b.n	8014d36 <_dtoa_r+0x8fe>
 8014f36:	4615      	mov	r5, r2
 8014f38:	e79f      	b.n	8014e7a <_dtoa_r+0xa42>
 8014f3a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014fa0 <_dtoa_r+0xb68>
 8014f3e:	e007      	b.n	8014f50 <_dtoa_r+0xb18>
 8014f40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f42:	f8df b060 	ldr.w	fp, [pc, #96]	; 8014fa4 <_dtoa_r+0xb6c>
 8014f46:	b11b      	cbz	r3, 8014f50 <_dtoa_r+0xb18>
 8014f48:	f10b 0308 	add.w	r3, fp, #8
 8014f4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014f4e:	6013      	str	r3, [r2, #0]
 8014f50:	4658      	mov	r0, fp
 8014f52:	b017      	add	sp, #92	; 0x5c
 8014f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f58:	9b06      	ldr	r3, [sp, #24]
 8014f5a:	2b01      	cmp	r3, #1
 8014f5c:	f77f ae35 	ble.w	8014bca <_dtoa_r+0x792>
 8014f60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f62:	9307      	str	r3, [sp, #28]
 8014f64:	e649      	b.n	8014bfa <_dtoa_r+0x7c2>
 8014f66:	9b02      	ldr	r3, [sp, #8]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	dc03      	bgt.n	8014f74 <_dtoa_r+0xb3c>
 8014f6c:	9b06      	ldr	r3, [sp, #24]
 8014f6e:	2b02      	cmp	r3, #2
 8014f70:	f73f aecc 	bgt.w	8014d0c <_dtoa_r+0x8d4>
 8014f74:	465d      	mov	r5, fp
 8014f76:	4639      	mov	r1, r7
 8014f78:	9804      	ldr	r0, [sp, #16]
 8014f7a:	f7ff f9cf 	bl	801431c <quorem>
 8014f7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014f82:	f805 8b01 	strb.w	r8, [r5], #1
 8014f86:	9a02      	ldr	r2, [sp, #8]
 8014f88:	eba5 030b 	sub.w	r3, r5, fp
 8014f8c:	429a      	cmp	r2, r3
 8014f8e:	ddb0      	ble.n	8014ef2 <_dtoa_r+0xaba>
 8014f90:	2300      	movs	r3, #0
 8014f92:	220a      	movs	r2, #10
 8014f94:	9904      	ldr	r1, [sp, #16]
 8014f96:	4620      	mov	r0, r4
 8014f98:	f000 f931 	bl	80151fe <__multadd>
 8014f9c:	9004      	str	r0, [sp, #16]
 8014f9e:	e7ea      	b.n	8014f76 <_dtoa_r+0xb3e>
 8014fa0:	080164e8 	.word	0x080164e8
 8014fa4:	0801650c 	.word	0x0801650c

08014fa8 <std>:
 8014fa8:	2300      	movs	r3, #0
 8014faa:	b510      	push	{r4, lr}
 8014fac:	4604      	mov	r4, r0
 8014fae:	e9c0 3300 	strd	r3, r3, [r0]
 8014fb2:	6083      	str	r3, [r0, #8]
 8014fb4:	8181      	strh	r1, [r0, #12]
 8014fb6:	6643      	str	r3, [r0, #100]	; 0x64
 8014fb8:	81c2      	strh	r2, [r0, #14]
 8014fba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014fbe:	6183      	str	r3, [r0, #24]
 8014fc0:	4619      	mov	r1, r3
 8014fc2:	2208      	movs	r2, #8
 8014fc4:	305c      	adds	r0, #92	; 0x5c
 8014fc6:	f7fe fd0c 	bl	80139e2 <memset>
 8014fca:	4b05      	ldr	r3, [pc, #20]	; (8014fe0 <std+0x38>)
 8014fcc:	6263      	str	r3, [r4, #36]	; 0x24
 8014fce:	4b05      	ldr	r3, [pc, #20]	; (8014fe4 <std+0x3c>)
 8014fd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8014fd2:	4b05      	ldr	r3, [pc, #20]	; (8014fe8 <std+0x40>)
 8014fd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014fd6:	4b05      	ldr	r3, [pc, #20]	; (8014fec <std+0x44>)
 8014fd8:	6224      	str	r4, [r4, #32]
 8014fda:	6323      	str	r3, [r4, #48]	; 0x30
 8014fdc:	bd10      	pop	{r4, pc}
 8014fde:	bf00      	nop
 8014fe0:	08015dd1 	.word	0x08015dd1
 8014fe4:	08015df3 	.word	0x08015df3
 8014fe8:	08015e2b 	.word	0x08015e2b
 8014fec:	08015e4f 	.word	0x08015e4f

08014ff0 <_cleanup_r>:
 8014ff0:	4901      	ldr	r1, [pc, #4]	; (8014ff8 <_cleanup_r+0x8>)
 8014ff2:	f000 b885 	b.w	8015100 <_fwalk_reent>
 8014ff6:	bf00      	nop
 8014ff8:	08016129 	.word	0x08016129

08014ffc <__sfmoreglue>:
 8014ffc:	b570      	push	{r4, r5, r6, lr}
 8014ffe:	1e4a      	subs	r2, r1, #1
 8015000:	2568      	movs	r5, #104	; 0x68
 8015002:	4355      	muls	r5, r2
 8015004:	460e      	mov	r6, r1
 8015006:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801500a:	f000 fbe5 	bl	80157d8 <_malloc_r>
 801500e:	4604      	mov	r4, r0
 8015010:	b140      	cbz	r0, 8015024 <__sfmoreglue+0x28>
 8015012:	2100      	movs	r1, #0
 8015014:	e9c0 1600 	strd	r1, r6, [r0]
 8015018:	300c      	adds	r0, #12
 801501a:	60a0      	str	r0, [r4, #8]
 801501c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015020:	f7fe fcdf 	bl	80139e2 <memset>
 8015024:	4620      	mov	r0, r4
 8015026:	bd70      	pop	{r4, r5, r6, pc}

08015028 <__sinit>:
 8015028:	6983      	ldr	r3, [r0, #24]
 801502a:	b510      	push	{r4, lr}
 801502c:	4604      	mov	r4, r0
 801502e:	bb33      	cbnz	r3, 801507e <__sinit+0x56>
 8015030:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015034:	6503      	str	r3, [r0, #80]	; 0x50
 8015036:	4b12      	ldr	r3, [pc, #72]	; (8015080 <__sinit+0x58>)
 8015038:	4a12      	ldr	r2, [pc, #72]	; (8015084 <__sinit+0x5c>)
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	6282      	str	r2, [r0, #40]	; 0x28
 801503e:	4298      	cmp	r0, r3
 8015040:	bf04      	itt	eq
 8015042:	2301      	moveq	r3, #1
 8015044:	6183      	streq	r3, [r0, #24]
 8015046:	f000 f81f 	bl	8015088 <__sfp>
 801504a:	6060      	str	r0, [r4, #4]
 801504c:	4620      	mov	r0, r4
 801504e:	f000 f81b 	bl	8015088 <__sfp>
 8015052:	60a0      	str	r0, [r4, #8]
 8015054:	4620      	mov	r0, r4
 8015056:	f000 f817 	bl	8015088 <__sfp>
 801505a:	2200      	movs	r2, #0
 801505c:	60e0      	str	r0, [r4, #12]
 801505e:	2104      	movs	r1, #4
 8015060:	6860      	ldr	r0, [r4, #4]
 8015062:	f7ff ffa1 	bl	8014fa8 <std>
 8015066:	2201      	movs	r2, #1
 8015068:	2109      	movs	r1, #9
 801506a:	68a0      	ldr	r0, [r4, #8]
 801506c:	f7ff ff9c 	bl	8014fa8 <std>
 8015070:	2202      	movs	r2, #2
 8015072:	2112      	movs	r1, #18
 8015074:	68e0      	ldr	r0, [r4, #12]
 8015076:	f7ff ff97 	bl	8014fa8 <std>
 801507a:	2301      	movs	r3, #1
 801507c:	61a3      	str	r3, [r4, #24]
 801507e:	bd10      	pop	{r4, pc}
 8015080:	080164d4 	.word	0x080164d4
 8015084:	08014ff1 	.word	0x08014ff1

08015088 <__sfp>:
 8015088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801508a:	4b1b      	ldr	r3, [pc, #108]	; (80150f8 <__sfp+0x70>)
 801508c:	681e      	ldr	r6, [r3, #0]
 801508e:	69b3      	ldr	r3, [r6, #24]
 8015090:	4607      	mov	r7, r0
 8015092:	b913      	cbnz	r3, 801509a <__sfp+0x12>
 8015094:	4630      	mov	r0, r6
 8015096:	f7ff ffc7 	bl	8015028 <__sinit>
 801509a:	3648      	adds	r6, #72	; 0x48
 801509c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80150a0:	3b01      	subs	r3, #1
 80150a2:	d503      	bpl.n	80150ac <__sfp+0x24>
 80150a4:	6833      	ldr	r3, [r6, #0]
 80150a6:	b133      	cbz	r3, 80150b6 <__sfp+0x2e>
 80150a8:	6836      	ldr	r6, [r6, #0]
 80150aa:	e7f7      	b.n	801509c <__sfp+0x14>
 80150ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80150b0:	b16d      	cbz	r5, 80150ce <__sfp+0x46>
 80150b2:	3468      	adds	r4, #104	; 0x68
 80150b4:	e7f4      	b.n	80150a0 <__sfp+0x18>
 80150b6:	2104      	movs	r1, #4
 80150b8:	4638      	mov	r0, r7
 80150ba:	f7ff ff9f 	bl	8014ffc <__sfmoreglue>
 80150be:	6030      	str	r0, [r6, #0]
 80150c0:	2800      	cmp	r0, #0
 80150c2:	d1f1      	bne.n	80150a8 <__sfp+0x20>
 80150c4:	230c      	movs	r3, #12
 80150c6:	603b      	str	r3, [r7, #0]
 80150c8:	4604      	mov	r4, r0
 80150ca:	4620      	mov	r0, r4
 80150cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150ce:	4b0b      	ldr	r3, [pc, #44]	; (80150fc <__sfp+0x74>)
 80150d0:	6665      	str	r5, [r4, #100]	; 0x64
 80150d2:	e9c4 5500 	strd	r5, r5, [r4]
 80150d6:	60a5      	str	r5, [r4, #8]
 80150d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80150dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80150e0:	2208      	movs	r2, #8
 80150e2:	4629      	mov	r1, r5
 80150e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80150e8:	f7fe fc7b 	bl	80139e2 <memset>
 80150ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80150f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80150f4:	e7e9      	b.n	80150ca <__sfp+0x42>
 80150f6:	bf00      	nop
 80150f8:	080164d4 	.word	0x080164d4
 80150fc:	ffff0001 	.word	0xffff0001

08015100 <_fwalk_reent>:
 8015100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015104:	4680      	mov	r8, r0
 8015106:	4689      	mov	r9, r1
 8015108:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801510c:	2600      	movs	r6, #0
 801510e:	b914      	cbnz	r4, 8015116 <_fwalk_reent+0x16>
 8015110:	4630      	mov	r0, r6
 8015112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015116:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801511a:	3f01      	subs	r7, #1
 801511c:	d501      	bpl.n	8015122 <_fwalk_reent+0x22>
 801511e:	6824      	ldr	r4, [r4, #0]
 8015120:	e7f5      	b.n	801510e <_fwalk_reent+0xe>
 8015122:	89ab      	ldrh	r3, [r5, #12]
 8015124:	2b01      	cmp	r3, #1
 8015126:	d907      	bls.n	8015138 <_fwalk_reent+0x38>
 8015128:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801512c:	3301      	adds	r3, #1
 801512e:	d003      	beq.n	8015138 <_fwalk_reent+0x38>
 8015130:	4629      	mov	r1, r5
 8015132:	4640      	mov	r0, r8
 8015134:	47c8      	blx	r9
 8015136:	4306      	orrs	r6, r0
 8015138:	3568      	adds	r5, #104	; 0x68
 801513a:	e7ee      	b.n	801511a <_fwalk_reent+0x1a>

0801513c <_localeconv_r>:
 801513c:	4b04      	ldr	r3, [pc, #16]	; (8015150 <_localeconv_r+0x14>)
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	6a18      	ldr	r0, [r3, #32]
 8015142:	4b04      	ldr	r3, [pc, #16]	; (8015154 <_localeconv_r+0x18>)
 8015144:	2800      	cmp	r0, #0
 8015146:	bf08      	it	eq
 8015148:	4618      	moveq	r0, r3
 801514a:	30f0      	adds	r0, #240	; 0xf0
 801514c:	4770      	bx	lr
 801514e:	bf00      	nop
 8015150:	20000018 	.word	0x20000018
 8015154:	2000007c 	.word	0x2000007c

08015158 <malloc>:
 8015158:	4b02      	ldr	r3, [pc, #8]	; (8015164 <malloc+0xc>)
 801515a:	4601      	mov	r1, r0
 801515c:	6818      	ldr	r0, [r3, #0]
 801515e:	f000 bb3b 	b.w	80157d8 <_malloc_r>
 8015162:	bf00      	nop
 8015164:	20000018 	.word	0x20000018

08015168 <_Balloc>:
 8015168:	b570      	push	{r4, r5, r6, lr}
 801516a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801516c:	4604      	mov	r4, r0
 801516e:	460e      	mov	r6, r1
 8015170:	b93d      	cbnz	r5, 8015182 <_Balloc+0x1a>
 8015172:	2010      	movs	r0, #16
 8015174:	f7ff fff0 	bl	8015158 <malloc>
 8015178:	6260      	str	r0, [r4, #36]	; 0x24
 801517a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801517e:	6005      	str	r5, [r0, #0]
 8015180:	60c5      	str	r5, [r0, #12]
 8015182:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015184:	68eb      	ldr	r3, [r5, #12]
 8015186:	b183      	cbz	r3, 80151aa <_Balloc+0x42>
 8015188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801518a:	68db      	ldr	r3, [r3, #12]
 801518c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015190:	b9b8      	cbnz	r0, 80151c2 <_Balloc+0x5a>
 8015192:	2101      	movs	r1, #1
 8015194:	fa01 f506 	lsl.w	r5, r1, r6
 8015198:	1d6a      	adds	r2, r5, #5
 801519a:	0092      	lsls	r2, r2, #2
 801519c:	4620      	mov	r0, r4
 801519e:	f000 fabf 	bl	8015720 <_calloc_r>
 80151a2:	b160      	cbz	r0, 80151be <_Balloc+0x56>
 80151a4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80151a8:	e00e      	b.n	80151c8 <_Balloc+0x60>
 80151aa:	2221      	movs	r2, #33	; 0x21
 80151ac:	2104      	movs	r1, #4
 80151ae:	4620      	mov	r0, r4
 80151b0:	f000 fab6 	bl	8015720 <_calloc_r>
 80151b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80151b6:	60e8      	str	r0, [r5, #12]
 80151b8:	68db      	ldr	r3, [r3, #12]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d1e4      	bne.n	8015188 <_Balloc+0x20>
 80151be:	2000      	movs	r0, #0
 80151c0:	bd70      	pop	{r4, r5, r6, pc}
 80151c2:	6802      	ldr	r2, [r0, #0]
 80151c4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80151c8:	2300      	movs	r3, #0
 80151ca:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80151ce:	e7f7      	b.n	80151c0 <_Balloc+0x58>

080151d0 <_Bfree>:
 80151d0:	b570      	push	{r4, r5, r6, lr}
 80151d2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80151d4:	4606      	mov	r6, r0
 80151d6:	460d      	mov	r5, r1
 80151d8:	b93c      	cbnz	r4, 80151ea <_Bfree+0x1a>
 80151da:	2010      	movs	r0, #16
 80151dc:	f7ff ffbc 	bl	8015158 <malloc>
 80151e0:	6270      	str	r0, [r6, #36]	; 0x24
 80151e2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80151e6:	6004      	str	r4, [r0, #0]
 80151e8:	60c4      	str	r4, [r0, #12]
 80151ea:	b13d      	cbz	r5, 80151fc <_Bfree+0x2c>
 80151ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80151ee:	686a      	ldr	r2, [r5, #4]
 80151f0:	68db      	ldr	r3, [r3, #12]
 80151f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80151f6:	6029      	str	r1, [r5, #0]
 80151f8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80151fc:	bd70      	pop	{r4, r5, r6, pc}

080151fe <__multadd>:
 80151fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015202:	690d      	ldr	r5, [r1, #16]
 8015204:	461f      	mov	r7, r3
 8015206:	4606      	mov	r6, r0
 8015208:	460c      	mov	r4, r1
 801520a:	f101 0c14 	add.w	ip, r1, #20
 801520e:	2300      	movs	r3, #0
 8015210:	f8dc 0000 	ldr.w	r0, [ip]
 8015214:	b281      	uxth	r1, r0
 8015216:	fb02 7101 	mla	r1, r2, r1, r7
 801521a:	0c0f      	lsrs	r7, r1, #16
 801521c:	0c00      	lsrs	r0, r0, #16
 801521e:	fb02 7000 	mla	r0, r2, r0, r7
 8015222:	b289      	uxth	r1, r1
 8015224:	3301      	adds	r3, #1
 8015226:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801522a:	429d      	cmp	r5, r3
 801522c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015230:	f84c 1b04 	str.w	r1, [ip], #4
 8015234:	dcec      	bgt.n	8015210 <__multadd+0x12>
 8015236:	b1d7      	cbz	r7, 801526e <__multadd+0x70>
 8015238:	68a3      	ldr	r3, [r4, #8]
 801523a:	42ab      	cmp	r3, r5
 801523c:	dc12      	bgt.n	8015264 <__multadd+0x66>
 801523e:	6861      	ldr	r1, [r4, #4]
 8015240:	4630      	mov	r0, r6
 8015242:	3101      	adds	r1, #1
 8015244:	f7ff ff90 	bl	8015168 <_Balloc>
 8015248:	6922      	ldr	r2, [r4, #16]
 801524a:	3202      	adds	r2, #2
 801524c:	f104 010c 	add.w	r1, r4, #12
 8015250:	4680      	mov	r8, r0
 8015252:	0092      	lsls	r2, r2, #2
 8015254:	300c      	adds	r0, #12
 8015256:	f7fe fbb9 	bl	80139cc <memcpy>
 801525a:	4621      	mov	r1, r4
 801525c:	4630      	mov	r0, r6
 801525e:	f7ff ffb7 	bl	80151d0 <_Bfree>
 8015262:	4644      	mov	r4, r8
 8015264:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015268:	3501      	adds	r5, #1
 801526a:	615f      	str	r7, [r3, #20]
 801526c:	6125      	str	r5, [r4, #16]
 801526e:	4620      	mov	r0, r4
 8015270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015274 <__hi0bits>:
 8015274:	0c02      	lsrs	r2, r0, #16
 8015276:	0412      	lsls	r2, r2, #16
 8015278:	4603      	mov	r3, r0
 801527a:	b9b2      	cbnz	r2, 80152aa <__hi0bits+0x36>
 801527c:	0403      	lsls	r3, r0, #16
 801527e:	2010      	movs	r0, #16
 8015280:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015284:	bf04      	itt	eq
 8015286:	021b      	lsleq	r3, r3, #8
 8015288:	3008      	addeq	r0, #8
 801528a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801528e:	bf04      	itt	eq
 8015290:	011b      	lsleq	r3, r3, #4
 8015292:	3004      	addeq	r0, #4
 8015294:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015298:	bf04      	itt	eq
 801529a:	009b      	lsleq	r3, r3, #2
 801529c:	3002      	addeq	r0, #2
 801529e:	2b00      	cmp	r3, #0
 80152a0:	db06      	blt.n	80152b0 <__hi0bits+0x3c>
 80152a2:	005b      	lsls	r3, r3, #1
 80152a4:	d503      	bpl.n	80152ae <__hi0bits+0x3a>
 80152a6:	3001      	adds	r0, #1
 80152a8:	4770      	bx	lr
 80152aa:	2000      	movs	r0, #0
 80152ac:	e7e8      	b.n	8015280 <__hi0bits+0xc>
 80152ae:	2020      	movs	r0, #32
 80152b0:	4770      	bx	lr

080152b2 <__lo0bits>:
 80152b2:	6803      	ldr	r3, [r0, #0]
 80152b4:	f013 0207 	ands.w	r2, r3, #7
 80152b8:	4601      	mov	r1, r0
 80152ba:	d00b      	beq.n	80152d4 <__lo0bits+0x22>
 80152bc:	07da      	lsls	r2, r3, #31
 80152be:	d423      	bmi.n	8015308 <__lo0bits+0x56>
 80152c0:	0798      	lsls	r0, r3, #30
 80152c2:	bf49      	itett	mi
 80152c4:	085b      	lsrmi	r3, r3, #1
 80152c6:	089b      	lsrpl	r3, r3, #2
 80152c8:	2001      	movmi	r0, #1
 80152ca:	600b      	strmi	r3, [r1, #0]
 80152cc:	bf5c      	itt	pl
 80152ce:	600b      	strpl	r3, [r1, #0]
 80152d0:	2002      	movpl	r0, #2
 80152d2:	4770      	bx	lr
 80152d4:	b298      	uxth	r0, r3
 80152d6:	b9a8      	cbnz	r0, 8015304 <__lo0bits+0x52>
 80152d8:	0c1b      	lsrs	r3, r3, #16
 80152da:	2010      	movs	r0, #16
 80152dc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80152e0:	bf04      	itt	eq
 80152e2:	0a1b      	lsreq	r3, r3, #8
 80152e4:	3008      	addeq	r0, #8
 80152e6:	071a      	lsls	r2, r3, #28
 80152e8:	bf04      	itt	eq
 80152ea:	091b      	lsreq	r3, r3, #4
 80152ec:	3004      	addeq	r0, #4
 80152ee:	079a      	lsls	r2, r3, #30
 80152f0:	bf04      	itt	eq
 80152f2:	089b      	lsreq	r3, r3, #2
 80152f4:	3002      	addeq	r0, #2
 80152f6:	07da      	lsls	r2, r3, #31
 80152f8:	d402      	bmi.n	8015300 <__lo0bits+0x4e>
 80152fa:	085b      	lsrs	r3, r3, #1
 80152fc:	d006      	beq.n	801530c <__lo0bits+0x5a>
 80152fe:	3001      	adds	r0, #1
 8015300:	600b      	str	r3, [r1, #0]
 8015302:	4770      	bx	lr
 8015304:	4610      	mov	r0, r2
 8015306:	e7e9      	b.n	80152dc <__lo0bits+0x2a>
 8015308:	2000      	movs	r0, #0
 801530a:	4770      	bx	lr
 801530c:	2020      	movs	r0, #32
 801530e:	4770      	bx	lr

08015310 <__i2b>:
 8015310:	b510      	push	{r4, lr}
 8015312:	460c      	mov	r4, r1
 8015314:	2101      	movs	r1, #1
 8015316:	f7ff ff27 	bl	8015168 <_Balloc>
 801531a:	2201      	movs	r2, #1
 801531c:	6144      	str	r4, [r0, #20]
 801531e:	6102      	str	r2, [r0, #16]
 8015320:	bd10      	pop	{r4, pc}

08015322 <__multiply>:
 8015322:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015326:	4614      	mov	r4, r2
 8015328:	690a      	ldr	r2, [r1, #16]
 801532a:	6923      	ldr	r3, [r4, #16]
 801532c:	429a      	cmp	r2, r3
 801532e:	bfb8      	it	lt
 8015330:	460b      	movlt	r3, r1
 8015332:	4688      	mov	r8, r1
 8015334:	bfbc      	itt	lt
 8015336:	46a0      	movlt	r8, r4
 8015338:	461c      	movlt	r4, r3
 801533a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801533e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015342:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015346:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801534a:	eb07 0609 	add.w	r6, r7, r9
 801534e:	42b3      	cmp	r3, r6
 8015350:	bfb8      	it	lt
 8015352:	3101      	addlt	r1, #1
 8015354:	f7ff ff08 	bl	8015168 <_Balloc>
 8015358:	f100 0514 	add.w	r5, r0, #20
 801535c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015360:	462b      	mov	r3, r5
 8015362:	2200      	movs	r2, #0
 8015364:	4573      	cmp	r3, lr
 8015366:	d316      	bcc.n	8015396 <__multiply+0x74>
 8015368:	f104 0214 	add.w	r2, r4, #20
 801536c:	f108 0114 	add.w	r1, r8, #20
 8015370:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8015374:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015378:	9300      	str	r3, [sp, #0]
 801537a:	9b00      	ldr	r3, [sp, #0]
 801537c:	9201      	str	r2, [sp, #4]
 801537e:	4293      	cmp	r3, r2
 8015380:	d80c      	bhi.n	801539c <__multiply+0x7a>
 8015382:	2e00      	cmp	r6, #0
 8015384:	dd03      	ble.n	801538e <__multiply+0x6c>
 8015386:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801538a:	2b00      	cmp	r3, #0
 801538c:	d05d      	beq.n	801544a <__multiply+0x128>
 801538e:	6106      	str	r6, [r0, #16]
 8015390:	b003      	add	sp, #12
 8015392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015396:	f843 2b04 	str.w	r2, [r3], #4
 801539a:	e7e3      	b.n	8015364 <__multiply+0x42>
 801539c:	f8b2 b000 	ldrh.w	fp, [r2]
 80153a0:	f1bb 0f00 	cmp.w	fp, #0
 80153a4:	d023      	beq.n	80153ee <__multiply+0xcc>
 80153a6:	4689      	mov	r9, r1
 80153a8:	46ac      	mov	ip, r5
 80153aa:	f04f 0800 	mov.w	r8, #0
 80153ae:	f859 4b04 	ldr.w	r4, [r9], #4
 80153b2:	f8dc a000 	ldr.w	sl, [ip]
 80153b6:	b2a3      	uxth	r3, r4
 80153b8:	fa1f fa8a 	uxth.w	sl, sl
 80153bc:	fb0b a303 	mla	r3, fp, r3, sl
 80153c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80153c4:	f8dc 4000 	ldr.w	r4, [ip]
 80153c8:	4443      	add	r3, r8
 80153ca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80153ce:	fb0b 840a 	mla	r4, fp, sl, r8
 80153d2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80153d6:	46e2      	mov	sl, ip
 80153d8:	b29b      	uxth	r3, r3
 80153da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80153de:	454f      	cmp	r7, r9
 80153e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80153e4:	f84a 3b04 	str.w	r3, [sl], #4
 80153e8:	d82b      	bhi.n	8015442 <__multiply+0x120>
 80153ea:	f8cc 8004 	str.w	r8, [ip, #4]
 80153ee:	9b01      	ldr	r3, [sp, #4]
 80153f0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80153f4:	3204      	adds	r2, #4
 80153f6:	f1ba 0f00 	cmp.w	sl, #0
 80153fa:	d020      	beq.n	801543e <__multiply+0x11c>
 80153fc:	682b      	ldr	r3, [r5, #0]
 80153fe:	4689      	mov	r9, r1
 8015400:	46a8      	mov	r8, r5
 8015402:	f04f 0b00 	mov.w	fp, #0
 8015406:	f8b9 c000 	ldrh.w	ip, [r9]
 801540a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801540e:	fb0a 440c 	mla	r4, sl, ip, r4
 8015412:	445c      	add	r4, fp
 8015414:	46c4      	mov	ip, r8
 8015416:	b29b      	uxth	r3, r3
 8015418:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801541c:	f84c 3b04 	str.w	r3, [ip], #4
 8015420:	f859 3b04 	ldr.w	r3, [r9], #4
 8015424:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015428:	0c1b      	lsrs	r3, r3, #16
 801542a:	fb0a b303 	mla	r3, sl, r3, fp
 801542e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015432:	454f      	cmp	r7, r9
 8015434:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015438:	d805      	bhi.n	8015446 <__multiply+0x124>
 801543a:	f8c8 3004 	str.w	r3, [r8, #4]
 801543e:	3504      	adds	r5, #4
 8015440:	e79b      	b.n	801537a <__multiply+0x58>
 8015442:	46d4      	mov	ip, sl
 8015444:	e7b3      	b.n	80153ae <__multiply+0x8c>
 8015446:	46e0      	mov	r8, ip
 8015448:	e7dd      	b.n	8015406 <__multiply+0xe4>
 801544a:	3e01      	subs	r6, #1
 801544c:	e799      	b.n	8015382 <__multiply+0x60>
	...

08015450 <__pow5mult>:
 8015450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015454:	4615      	mov	r5, r2
 8015456:	f012 0203 	ands.w	r2, r2, #3
 801545a:	4606      	mov	r6, r0
 801545c:	460f      	mov	r7, r1
 801545e:	d007      	beq.n	8015470 <__pow5mult+0x20>
 8015460:	3a01      	subs	r2, #1
 8015462:	4c21      	ldr	r4, [pc, #132]	; (80154e8 <__pow5mult+0x98>)
 8015464:	2300      	movs	r3, #0
 8015466:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801546a:	f7ff fec8 	bl	80151fe <__multadd>
 801546e:	4607      	mov	r7, r0
 8015470:	10ad      	asrs	r5, r5, #2
 8015472:	d035      	beq.n	80154e0 <__pow5mult+0x90>
 8015474:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015476:	b93c      	cbnz	r4, 8015488 <__pow5mult+0x38>
 8015478:	2010      	movs	r0, #16
 801547a:	f7ff fe6d 	bl	8015158 <malloc>
 801547e:	6270      	str	r0, [r6, #36]	; 0x24
 8015480:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015484:	6004      	str	r4, [r0, #0]
 8015486:	60c4      	str	r4, [r0, #12]
 8015488:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801548c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015490:	b94c      	cbnz	r4, 80154a6 <__pow5mult+0x56>
 8015492:	f240 2171 	movw	r1, #625	; 0x271
 8015496:	4630      	mov	r0, r6
 8015498:	f7ff ff3a 	bl	8015310 <__i2b>
 801549c:	2300      	movs	r3, #0
 801549e:	f8c8 0008 	str.w	r0, [r8, #8]
 80154a2:	4604      	mov	r4, r0
 80154a4:	6003      	str	r3, [r0, #0]
 80154a6:	f04f 0800 	mov.w	r8, #0
 80154aa:	07eb      	lsls	r3, r5, #31
 80154ac:	d50a      	bpl.n	80154c4 <__pow5mult+0x74>
 80154ae:	4639      	mov	r1, r7
 80154b0:	4622      	mov	r2, r4
 80154b2:	4630      	mov	r0, r6
 80154b4:	f7ff ff35 	bl	8015322 <__multiply>
 80154b8:	4639      	mov	r1, r7
 80154ba:	4681      	mov	r9, r0
 80154bc:	4630      	mov	r0, r6
 80154be:	f7ff fe87 	bl	80151d0 <_Bfree>
 80154c2:	464f      	mov	r7, r9
 80154c4:	106d      	asrs	r5, r5, #1
 80154c6:	d00b      	beq.n	80154e0 <__pow5mult+0x90>
 80154c8:	6820      	ldr	r0, [r4, #0]
 80154ca:	b938      	cbnz	r0, 80154dc <__pow5mult+0x8c>
 80154cc:	4622      	mov	r2, r4
 80154ce:	4621      	mov	r1, r4
 80154d0:	4630      	mov	r0, r6
 80154d2:	f7ff ff26 	bl	8015322 <__multiply>
 80154d6:	6020      	str	r0, [r4, #0]
 80154d8:	f8c0 8000 	str.w	r8, [r0]
 80154dc:	4604      	mov	r4, r0
 80154de:	e7e4      	b.n	80154aa <__pow5mult+0x5a>
 80154e0:	4638      	mov	r0, r7
 80154e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154e6:	bf00      	nop
 80154e8:	08016670 	.word	0x08016670

080154ec <__lshift>:
 80154ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154f0:	460c      	mov	r4, r1
 80154f2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80154f6:	6923      	ldr	r3, [r4, #16]
 80154f8:	6849      	ldr	r1, [r1, #4]
 80154fa:	eb0a 0903 	add.w	r9, sl, r3
 80154fe:	68a3      	ldr	r3, [r4, #8]
 8015500:	4607      	mov	r7, r0
 8015502:	4616      	mov	r6, r2
 8015504:	f109 0501 	add.w	r5, r9, #1
 8015508:	42ab      	cmp	r3, r5
 801550a:	db32      	blt.n	8015572 <__lshift+0x86>
 801550c:	4638      	mov	r0, r7
 801550e:	f7ff fe2b 	bl	8015168 <_Balloc>
 8015512:	2300      	movs	r3, #0
 8015514:	4680      	mov	r8, r0
 8015516:	f100 0114 	add.w	r1, r0, #20
 801551a:	461a      	mov	r2, r3
 801551c:	4553      	cmp	r3, sl
 801551e:	db2b      	blt.n	8015578 <__lshift+0x8c>
 8015520:	6920      	ldr	r0, [r4, #16]
 8015522:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015526:	f104 0314 	add.w	r3, r4, #20
 801552a:	f016 021f 	ands.w	r2, r6, #31
 801552e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015532:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015536:	d025      	beq.n	8015584 <__lshift+0x98>
 8015538:	f1c2 0e20 	rsb	lr, r2, #32
 801553c:	2000      	movs	r0, #0
 801553e:	681e      	ldr	r6, [r3, #0]
 8015540:	468a      	mov	sl, r1
 8015542:	4096      	lsls	r6, r2
 8015544:	4330      	orrs	r0, r6
 8015546:	f84a 0b04 	str.w	r0, [sl], #4
 801554a:	f853 0b04 	ldr.w	r0, [r3], #4
 801554e:	459c      	cmp	ip, r3
 8015550:	fa20 f00e 	lsr.w	r0, r0, lr
 8015554:	d814      	bhi.n	8015580 <__lshift+0x94>
 8015556:	6048      	str	r0, [r1, #4]
 8015558:	b108      	cbz	r0, 801555e <__lshift+0x72>
 801555a:	f109 0502 	add.w	r5, r9, #2
 801555e:	3d01      	subs	r5, #1
 8015560:	4638      	mov	r0, r7
 8015562:	f8c8 5010 	str.w	r5, [r8, #16]
 8015566:	4621      	mov	r1, r4
 8015568:	f7ff fe32 	bl	80151d0 <_Bfree>
 801556c:	4640      	mov	r0, r8
 801556e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015572:	3101      	adds	r1, #1
 8015574:	005b      	lsls	r3, r3, #1
 8015576:	e7c7      	b.n	8015508 <__lshift+0x1c>
 8015578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801557c:	3301      	adds	r3, #1
 801557e:	e7cd      	b.n	801551c <__lshift+0x30>
 8015580:	4651      	mov	r1, sl
 8015582:	e7dc      	b.n	801553e <__lshift+0x52>
 8015584:	3904      	subs	r1, #4
 8015586:	f853 2b04 	ldr.w	r2, [r3], #4
 801558a:	f841 2f04 	str.w	r2, [r1, #4]!
 801558e:	459c      	cmp	ip, r3
 8015590:	d8f9      	bhi.n	8015586 <__lshift+0x9a>
 8015592:	e7e4      	b.n	801555e <__lshift+0x72>

08015594 <__mcmp>:
 8015594:	6903      	ldr	r3, [r0, #16]
 8015596:	690a      	ldr	r2, [r1, #16]
 8015598:	1a9b      	subs	r3, r3, r2
 801559a:	b530      	push	{r4, r5, lr}
 801559c:	d10c      	bne.n	80155b8 <__mcmp+0x24>
 801559e:	0092      	lsls	r2, r2, #2
 80155a0:	3014      	adds	r0, #20
 80155a2:	3114      	adds	r1, #20
 80155a4:	1884      	adds	r4, r0, r2
 80155a6:	4411      	add	r1, r2
 80155a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80155ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80155b0:	4295      	cmp	r5, r2
 80155b2:	d003      	beq.n	80155bc <__mcmp+0x28>
 80155b4:	d305      	bcc.n	80155c2 <__mcmp+0x2e>
 80155b6:	2301      	movs	r3, #1
 80155b8:	4618      	mov	r0, r3
 80155ba:	bd30      	pop	{r4, r5, pc}
 80155bc:	42a0      	cmp	r0, r4
 80155be:	d3f3      	bcc.n	80155a8 <__mcmp+0x14>
 80155c0:	e7fa      	b.n	80155b8 <__mcmp+0x24>
 80155c2:	f04f 33ff 	mov.w	r3, #4294967295
 80155c6:	e7f7      	b.n	80155b8 <__mcmp+0x24>

080155c8 <__mdiff>:
 80155c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155cc:	460d      	mov	r5, r1
 80155ce:	4607      	mov	r7, r0
 80155d0:	4611      	mov	r1, r2
 80155d2:	4628      	mov	r0, r5
 80155d4:	4614      	mov	r4, r2
 80155d6:	f7ff ffdd 	bl	8015594 <__mcmp>
 80155da:	1e06      	subs	r6, r0, #0
 80155dc:	d108      	bne.n	80155f0 <__mdiff+0x28>
 80155de:	4631      	mov	r1, r6
 80155e0:	4638      	mov	r0, r7
 80155e2:	f7ff fdc1 	bl	8015168 <_Balloc>
 80155e6:	2301      	movs	r3, #1
 80155e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80155ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155f0:	bfa4      	itt	ge
 80155f2:	4623      	movge	r3, r4
 80155f4:	462c      	movge	r4, r5
 80155f6:	4638      	mov	r0, r7
 80155f8:	6861      	ldr	r1, [r4, #4]
 80155fa:	bfa6      	itte	ge
 80155fc:	461d      	movge	r5, r3
 80155fe:	2600      	movge	r6, #0
 8015600:	2601      	movlt	r6, #1
 8015602:	f7ff fdb1 	bl	8015168 <_Balloc>
 8015606:	692b      	ldr	r3, [r5, #16]
 8015608:	60c6      	str	r6, [r0, #12]
 801560a:	6926      	ldr	r6, [r4, #16]
 801560c:	f105 0914 	add.w	r9, r5, #20
 8015610:	f104 0214 	add.w	r2, r4, #20
 8015614:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015618:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801561c:	f100 0514 	add.w	r5, r0, #20
 8015620:	f04f 0e00 	mov.w	lr, #0
 8015624:	f852 ab04 	ldr.w	sl, [r2], #4
 8015628:	f859 4b04 	ldr.w	r4, [r9], #4
 801562c:	fa1e f18a 	uxtah	r1, lr, sl
 8015630:	b2a3      	uxth	r3, r4
 8015632:	1ac9      	subs	r1, r1, r3
 8015634:	0c23      	lsrs	r3, r4, #16
 8015636:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801563a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801563e:	b289      	uxth	r1, r1
 8015640:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015644:	45c8      	cmp	r8, r9
 8015646:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801564a:	4694      	mov	ip, r2
 801564c:	f845 3b04 	str.w	r3, [r5], #4
 8015650:	d8e8      	bhi.n	8015624 <__mdiff+0x5c>
 8015652:	45bc      	cmp	ip, r7
 8015654:	d304      	bcc.n	8015660 <__mdiff+0x98>
 8015656:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801565a:	b183      	cbz	r3, 801567e <__mdiff+0xb6>
 801565c:	6106      	str	r6, [r0, #16]
 801565e:	e7c5      	b.n	80155ec <__mdiff+0x24>
 8015660:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015664:	fa1e f381 	uxtah	r3, lr, r1
 8015668:	141a      	asrs	r2, r3, #16
 801566a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801566e:	b29b      	uxth	r3, r3
 8015670:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015674:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8015678:	f845 3b04 	str.w	r3, [r5], #4
 801567c:	e7e9      	b.n	8015652 <__mdiff+0x8a>
 801567e:	3e01      	subs	r6, #1
 8015680:	e7e9      	b.n	8015656 <__mdiff+0x8e>

08015682 <__d2b>:
 8015682:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015686:	460e      	mov	r6, r1
 8015688:	2101      	movs	r1, #1
 801568a:	ec59 8b10 	vmov	r8, r9, d0
 801568e:	4615      	mov	r5, r2
 8015690:	f7ff fd6a 	bl	8015168 <_Balloc>
 8015694:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015698:	4607      	mov	r7, r0
 801569a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801569e:	bb34      	cbnz	r4, 80156ee <__d2b+0x6c>
 80156a0:	9301      	str	r3, [sp, #4]
 80156a2:	f1b8 0300 	subs.w	r3, r8, #0
 80156a6:	d027      	beq.n	80156f8 <__d2b+0x76>
 80156a8:	a802      	add	r0, sp, #8
 80156aa:	f840 3d08 	str.w	r3, [r0, #-8]!
 80156ae:	f7ff fe00 	bl	80152b2 <__lo0bits>
 80156b2:	9900      	ldr	r1, [sp, #0]
 80156b4:	b1f0      	cbz	r0, 80156f4 <__d2b+0x72>
 80156b6:	9a01      	ldr	r2, [sp, #4]
 80156b8:	f1c0 0320 	rsb	r3, r0, #32
 80156bc:	fa02 f303 	lsl.w	r3, r2, r3
 80156c0:	430b      	orrs	r3, r1
 80156c2:	40c2      	lsrs	r2, r0
 80156c4:	617b      	str	r3, [r7, #20]
 80156c6:	9201      	str	r2, [sp, #4]
 80156c8:	9b01      	ldr	r3, [sp, #4]
 80156ca:	61bb      	str	r3, [r7, #24]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	bf14      	ite	ne
 80156d0:	2102      	movne	r1, #2
 80156d2:	2101      	moveq	r1, #1
 80156d4:	6139      	str	r1, [r7, #16]
 80156d6:	b1c4      	cbz	r4, 801570a <__d2b+0x88>
 80156d8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80156dc:	4404      	add	r4, r0
 80156de:	6034      	str	r4, [r6, #0]
 80156e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80156e4:	6028      	str	r0, [r5, #0]
 80156e6:	4638      	mov	r0, r7
 80156e8:	b003      	add	sp, #12
 80156ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80156f2:	e7d5      	b.n	80156a0 <__d2b+0x1e>
 80156f4:	6179      	str	r1, [r7, #20]
 80156f6:	e7e7      	b.n	80156c8 <__d2b+0x46>
 80156f8:	a801      	add	r0, sp, #4
 80156fa:	f7ff fdda 	bl	80152b2 <__lo0bits>
 80156fe:	9b01      	ldr	r3, [sp, #4]
 8015700:	617b      	str	r3, [r7, #20]
 8015702:	2101      	movs	r1, #1
 8015704:	6139      	str	r1, [r7, #16]
 8015706:	3020      	adds	r0, #32
 8015708:	e7e5      	b.n	80156d6 <__d2b+0x54>
 801570a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801570e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015712:	6030      	str	r0, [r6, #0]
 8015714:	6918      	ldr	r0, [r3, #16]
 8015716:	f7ff fdad 	bl	8015274 <__hi0bits>
 801571a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801571e:	e7e1      	b.n	80156e4 <__d2b+0x62>

08015720 <_calloc_r>:
 8015720:	b538      	push	{r3, r4, r5, lr}
 8015722:	fb02 f401 	mul.w	r4, r2, r1
 8015726:	4621      	mov	r1, r4
 8015728:	f000 f856 	bl	80157d8 <_malloc_r>
 801572c:	4605      	mov	r5, r0
 801572e:	b118      	cbz	r0, 8015738 <_calloc_r+0x18>
 8015730:	4622      	mov	r2, r4
 8015732:	2100      	movs	r1, #0
 8015734:	f7fe f955 	bl	80139e2 <memset>
 8015738:	4628      	mov	r0, r5
 801573a:	bd38      	pop	{r3, r4, r5, pc}

0801573c <_free_r>:
 801573c:	b538      	push	{r3, r4, r5, lr}
 801573e:	4605      	mov	r5, r0
 8015740:	2900      	cmp	r1, #0
 8015742:	d045      	beq.n	80157d0 <_free_r+0x94>
 8015744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015748:	1f0c      	subs	r4, r1, #4
 801574a:	2b00      	cmp	r3, #0
 801574c:	bfb8      	it	lt
 801574e:	18e4      	addlt	r4, r4, r3
 8015750:	f000 fdb5 	bl	80162be <__malloc_lock>
 8015754:	4a1f      	ldr	r2, [pc, #124]	; (80157d4 <_free_r+0x98>)
 8015756:	6813      	ldr	r3, [r2, #0]
 8015758:	4610      	mov	r0, r2
 801575a:	b933      	cbnz	r3, 801576a <_free_r+0x2e>
 801575c:	6063      	str	r3, [r4, #4]
 801575e:	6014      	str	r4, [r2, #0]
 8015760:	4628      	mov	r0, r5
 8015762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015766:	f000 bdab 	b.w	80162c0 <__malloc_unlock>
 801576a:	42a3      	cmp	r3, r4
 801576c:	d90c      	bls.n	8015788 <_free_r+0x4c>
 801576e:	6821      	ldr	r1, [r4, #0]
 8015770:	1862      	adds	r2, r4, r1
 8015772:	4293      	cmp	r3, r2
 8015774:	bf04      	itt	eq
 8015776:	681a      	ldreq	r2, [r3, #0]
 8015778:	685b      	ldreq	r3, [r3, #4]
 801577a:	6063      	str	r3, [r4, #4]
 801577c:	bf04      	itt	eq
 801577e:	1852      	addeq	r2, r2, r1
 8015780:	6022      	streq	r2, [r4, #0]
 8015782:	6004      	str	r4, [r0, #0]
 8015784:	e7ec      	b.n	8015760 <_free_r+0x24>
 8015786:	4613      	mov	r3, r2
 8015788:	685a      	ldr	r2, [r3, #4]
 801578a:	b10a      	cbz	r2, 8015790 <_free_r+0x54>
 801578c:	42a2      	cmp	r2, r4
 801578e:	d9fa      	bls.n	8015786 <_free_r+0x4a>
 8015790:	6819      	ldr	r1, [r3, #0]
 8015792:	1858      	adds	r0, r3, r1
 8015794:	42a0      	cmp	r0, r4
 8015796:	d10b      	bne.n	80157b0 <_free_r+0x74>
 8015798:	6820      	ldr	r0, [r4, #0]
 801579a:	4401      	add	r1, r0
 801579c:	1858      	adds	r0, r3, r1
 801579e:	4282      	cmp	r2, r0
 80157a0:	6019      	str	r1, [r3, #0]
 80157a2:	d1dd      	bne.n	8015760 <_free_r+0x24>
 80157a4:	6810      	ldr	r0, [r2, #0]
 80157a6:	6852      	ldr	r2, [r2, #4]
 80157a8:	605a      	str	r2, [r3, #4]
 80157aa:	4401      	add	r1, r0
 80157ac:	6019      	str	r1, [r3, #0]
 80157ae:	e7d7      	b.n	8015760 <_free_r+0x24>
 80157b0:	d902      	bls.n	80157b8 <_free_r+0x7c>
 80157b2:	230c      	movs	r3, #12
 80157b4:	602b      	str	r3, [r5, #0]
 80157b6:	e7d3      	b.n	8015760 <_free_r+0x24>
 80157b8:	6820      	ldr	r0, [r4, #0]
 80157ba:	1821      	adds	r1, r4, r0
 80157bc:	428a      	cmp	r2, r1
 80157be:	bf04      	itt	eq
 80157c0:	6811      	ldreq	r1, [r2, #0]
 80157c2:	6852      	ldreq	r2, [r2, #4]
 80157c4:	6062      	str	r2, [r4, #4]
 80157c6:	bf04      	itt	eq
 80157c8:	1809      	addeq	r1, r1, r0
 80157ca:	6021      	streq	r1, [r4, #0]
 80157cc:	605c      	str	r4, [r3, #4]
 80157ce:	e7c7      	b.n	8015760 <_free_r+0x24>
 80157d0:	bd38      	pop	{r3, r4, r5, pc}
 80157d2:	bf00      	nop
 80157d4:	2000c2e0 	.word	0x2000c2e0

080157d8 <_malloc_r>:
 80157d8:	b570      	push	{r4, r5, r6, lr}
 80157da:	1ccd      	adds	r5, r1, #3
 80157dc:	f025 0503 	bic.w	r5, r5, #3
 80157e0:	3508      	adds	r5, #8
 80157e2:	2d0c      	cmp	r5, #12
 80157e4:	bf38      	it	cc
 80157e6:	250c      	movcc	r5, #12
 80157e8:	2d00      	cmp	r5, #0
 80157ea:	4606      	mov	r6, r0
 80157ec:	db01      	blt.n	80157f2 <_malloc_r+0x1a>
 80157ee:	42a9      	cmp	r1, r5
 80157f0:	d903      	bls.n	80157fa <_malloc_r+0x22>
 80157f2:	230c      	movs	r3, #12
 80157f4:	6033      	str	r3, [r6, #0]
 80157f6:	2000      	movs	r0, #0
 80157f8:	bd70      	pop	{r4, r5, r6, pc}
 80157fa:	f000 fd60 	bl	80162be <__malloc_lock>
 80157fe:	4a21      	ldr	r2, [pc, #132]	; (8015884 <_malloc_r+0xac>)
 8015800:	6814      	ldr	r4, [r2, #0]
 8015802:	4621      	mov	r1, r4
 8015804:	b991      	cbnz	r1, 801582c <_malloc_r+0x54>
 8015806:	4c20      	ldr	r4, [pc, #128]	; (8015888 <_malloc_r+0xb0>)
 8015808:	6823      	ldr	r3, [r4, #0]
 801580a:	b91b      	cbnz	r3, 8015814 <_malloc_r+0x3c>
 801580c:	4630      	mov	r0, r6
 801580e:	f000 facf 	bl	8015db0 <_sbrk_r>
 8015812:	6020      	str	r0, [r4, #0]
 8015814:	4629      	mov	r1, r5
 8015816:	4630      	mov	r0, r6
 8015818:	f000 faca 	bl	8015db0 <_sbrk_r>
 801581c:	1c43      	adds	r3, r0, #1
 801581e:	d124      	bne.n	801586a <_malloc_r+0x92>
 8015820:	230c      	movs	r3, #12
 8015822:	6033      	str	r3, [r6, #0]
 8015824:	4630      	mov	r0, r6
 8015826:	f000 fd4b 	bl	80162c0 <__malloc_unlock>
 801582a:	e7e4      	b.n	80157f6 <_malloc_r+0x1e>
 801582c:	680b      	ldr	r3, [r1, #0]
 801582e:	1b5b      	subs	r3, r3, r5
 8015830:	d418      	bmi.n	8015864 <_malloc_r+0x8c>
 8015832:	2b0b      	cmp	r3, #11
 8015834:	d90f      	bls.n	8015856 <_malloc_r+0x7e>
 8015836:	600b      	str	r3, [r1, #0]
 8015838:	50cd      	str	r5, [r1, r3]
 801583a:	18cc      	adds	r4, r1, r3
 801583c:	4630      	mov	r0, r6
 801583e:	f000 fd3f 	bl	80162c0 <__malloc_unlock>
 8015842:	f104 000b 	add.w	r0, r4, #11
 8015846:	1d23      	adds	r3, r4, #4
 8015848:	f020 0007 	bic.w	r0, r0, #7
 801584c:	1ac3      	subs	r3, r0, r3
 801584e:	d0d3      	beq.n	80157f8 <_malloc_r+0x20>
 8015850:	425a      	negs	r2, r3
 8015852:	50e2      	str	r2, [r4, r3]
 8015854:	e7d0      	b.n	80157f8 <_malloc_r+0x20>
 8015856:	428c      	cmp	r4, r1
 8015858:	684b      	ldr	r3, [r1, #4]
 801585a:	bf16      	itet	ne
 801585c:	6063      	strne	r3, [r4, #4]
 801585e:	6013      	streq	r3, [r2, #0]
 8015860:	460c      	movne	r4, r1
 8015862:	e7eb      	b.n	801583c <_malloc_r+0x64>
 8015864:	460c      	mov	r4, r1
 8015866:	6849      	ldr	r1, [r1, #4]
 8015868:	e7cc      	b.n	8015804 <_malloc_r+0x2c>
 801586a:	1cc4      	adds	r4, r0, #3
 801586c:	f024 0403 	bic.w	r4, r4, #3
 8015870:	42a0      	cmp	r0, r4
 8015872:	d005      	beq.n	8015880 <_malloc_r+0xa8>
 8015874:	1a21      	subs	r1, r4, r0
 8015876:	4630      	mov	r0, r6
 8015878:	f000 fa9a 	bl	8015db0 <_sbrk_r>
 801587c:	3001      	adds	r0, #1
 801587e:	d0cf      	beq.n	8015820 <_malloc_r+0x48>
 8015880:	6025      	str	r5, [r4, #0]
 8015882:	e7db      	b.n	801583c <_malloc_r+0x64>
 8015884:	2000c2e0 	.word	0x2000c2e0
 8015888:	2000c2e4 	.word	0x2000c2e4

0801588c <__ssputs_r>:
 801588c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015890:	688e      	ldr	r6, [r1, #8]
 8015892:	429e      	cmp	r6, r3
 8015894:	4682      	mov	sl, r0
 8015896:	460c      	mov	r4, r1
 8015898:	4690      	mov	r8, r2
 801589a:	4699      	mov	r9, r3
 801589c:	d837      	bhi.n	801590e <__ssputs_r+0x82>
 801589e:	898a      	ldrh	r2, [r1, #12]
 80158a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80158a4:	d031      	beq.n	801590a <__ssputs_r+0x7e>
 80158a6:	6825      	ldr	r5, [r4, #0]
 80158a8:	6909      	ldr	r1, [r1, #16]
 80158aa:	1a6f      	subs	r7, r5, r1
 80158ac:	6965      	ldr	r5, [r4, #20]
 80158ae:	2302      	movs	r3, #2
 80158b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80158b4:	fb95 f5f3 	sdiv	r5, r5, r3
 80158b8:	f109 0301 	add.w	r3, r9, #1
 80158bc:	443b      	add	r3, r7
 80158be:	429d      	cmp	r5, r3
 80158c0:	bf38      	it	cc
 80158c2:	461d      	movcc	r5, r3
 80158c4:	0553      	lsls	r3, r2, #21
 80158c6:	d530      	bpl.n	801592a <__ssputs_r+0x9e>
 80158c8:	4629      	mov	r1, r5
 80158ca:	f7ff ff85 	bl	80157d8 <_malloc_r>
 80158ce:	4606      	mov	r6, r0
 80158d0:	b950      	cbnz	r0, 80158e8 <__ssputs_r+0x5c>
 80158d2:	230c      	movs	r3, #12
 80158d4:	f8ca 3000 	str.w	r3, [sl]
 80158d8:	89a3      	ldrh	r3, [r4, #12]
 80158da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80158de:	81a3      	strh	r3, [r4, #12]
 80158e0:	f04f 30ff 	mov.w	r0, #4294967295
 80158e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158e8:	463a      	mov	r2, r7
 80158ea:	6921      	ldr	r1, [r4, #16]
 80158ec:	f7fe f86e 	bl	80139cc <memcpy>
 80158f0:	89a3      	ldrh	r3, [r4, #12]
 80158f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80158f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80158fa:	81a3      	strh	r3, [r4, #12]
 80158fc:	6126      	str	r6, [r4, #16]
 80158fe:	6165      	str	r5, [r4, #20]
 8015900:	443e      	add	r6, r7
 8015902:	1bed      	subs	r5, r5, r7
 8015904:	6026      	str	r6, [r4, #0]
 8015906:	60a5      	str	r5, [r4, #8]
 8015908:	464e      	mov	r6, r9
 801590a:	454e      	cmp	r6, r9
 801590c:	d900      	bls.n	8015910 <__ssputs_r+0x84>
 801590e:	464e      	mov	r6, r9
 8015910:	4632      	mov	r2, r6
 8015912:	4641      	mov	r1, r8
 8015914:	6820      	ldr	r0, [r4, #0]
 8015916:	f000 fcb9 	bl	801628c <memmove>
 801591a:	68a3      	ldr	r3, [r4, #8]
 801591c:	1b9b      	subs	r3, r3, r6
 801591e:	60a3      	str	r3, [r4, #8]
 8015920:	6823      	ldr	r3, [r4, #0]
 8015922:	441e      	add	r6, r3
 8015924:	6026      	str	r6, [r4, #0]
 8015926:	2000      	movs	r0, #0
 8015928:	e7dc      	b.n	80158e4 <__ssputs_r+0x58>
 801592a:	462a      	mov	r2, r5
 801592c:	f000 fcc9 	bl	80162c2 <_realloc_r>
 8015930:	4606      	mov	r6, r0
 8015932:	2800      	cmp	r0, #0
 8015934:	d1e2      	bne.n	80158fc <__ssputs_r+0x70>
 8015936:	6921      	ldr	r1, [r4, #16]
 8015938:	4650      	mov	r0, sl
 801593a:	f7ff feff 	bl	801573c <_free_r>
 801593e:	e7c8      	b.n	80158d2 <__ssputs_r+0x46>

08015940 <_svfiprintf_r>:
 8015940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015944:	461d      	mov	r5, r3
 8015946:	898b      	ldrh	r3, [r1, #12]
 8015948:	061f      	lsls	r7, r3, #24
 801594a:	b09d      	sub	sp, #116	; 0x74
 801594c:	4680      	mov	r8, r0
 801594e:	460c      	mov	r4, r1
 8015950:	4616      	mov	r6, r2
 8015952:	d50f      	bpl.n	8015974 <_svfiprintf_r+0x34>
 8015954:	690b      	ldr	r3, [r1, #16]
 8015956:	b96b      	cbnz	r3, 8015974 <_svfiprintf_r+0x34>
 8015958:	2140      	movs	r1, #64	; 0x40
 801595a:	f7ff ff3d 	bl	80157d8 <_malloc_r>
 801595e:	6020      	str	r0, [r4, #0]
 8015960:	6120      	str	r0, [r4, #16]
 8015962:	b928      	cbnz	r0, 8015970 <_svfiprintf_r+0x30>
 8015964:	230c      	movs	r3, #12
 8015966:	f8c8 3000 	str.w	r3, [r8]
 801596a:	f04f 30ff 	mov.w	r0, #4294967295
 801596e:	e0c8      	b.n	8015b02 <_svfiprintf_r+0x1c2>
 8015970:	2340      	movs	r3, #64	; 0x40
 8015972:	6163      	str	r3, [r4, #20]
 8015974:	2300      	movs	r3, #0
 8015976:	9309      	str	r3, [sp, #36]	; 0x24
 8015978:	2320      	movs	r3, #32
 801597a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801597e:	2330      	movs	r3, #48	; 0x30
 8015980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015984:	9503      	str	r5, [sp, #12]
 8015986:	f04f 0b01 	mov.w	fp, #1
 801598a:	4637      	mov	r7, r6
 801598c:	463d      	mov	r5, r7
 801598e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015992:	b10b      	cbz	r3, 8015998 <_svfiprintf_r+0x58>
 8015994:	2b25      	cmp	r3, #37	; 0x25
 8015996:	d13e      	bne.n	8015a16 <_svfiprintf_r+0xd6>
 8015998:	ebb7 0a06 	subs.w	sl, r7, r6
 801599c:	d00b      	beq.n	80159b6 <_svfiprintf_r+0x76>
 801599e:	4653      	mov	r3, sl
 80159a0:	4632      	mov	r2, r6
 80159a2:	4621      	mov	r1, r4
 80159a4:	4640      	mov	r0, r8
 80159a6:	f7ff ff71 	bl	801588c <__ssputs_r>
 80159aa:	3001      	adds	r0, #1
 80159ac:	f000 80a4 	beq.w	8015af8 <_svfiprintf_r+0x1b8>
 80159b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159b2:	4453      	add	r3, sl
 80159b4:	9309      	str	r3, [sp, #36]	; 0x24
 80159b6:	783b      	ldrb	r3, [r7, #0]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	f000 809d 	beq.w	8015af8 <_svfiprintf_r+0x1b8>
 80159be:	2300      	movs	r3, #0
 80159c0:	f04f 32ff 	mov.w	r2, #4294967295
 80159c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80159c8:	9304      	str	r3, [sp, #16]
 80159ca:	9307      	str	r3, [sp, #28]
 80159cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80159d0:	931a      	str	r3, [sp, #104]	; 0x68
 80159d2:	462f      	mov	r7, r5
 80159d4:	2205      	movs	r2, #5
 80159d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80159da:	4850      	ldr	r0, [pc, #320]	; (8015b1c <_svfiprintf_r+0x1dc>)
 80159dc:	f7f2 fb38 	bl	8008050 <memchr>
 80159e0:	9b04      	ldr	r3, [sp, #16]
 80159e2:	b9d0      	cbnz	r0, 8015a1a <_svfiprintf_r+0xda>
 80159e4:	06d9      	lsls	r1, r3, #27
 80159e6:	bf44      	itt	mi
 80159e8:	2220      	movmi	r2, #32
 80159ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80159ee:	071a      	lsls	r2, r3, #28
 80159f0:	bf44      	itt	mi
 80159f2:	222b      	movmi	r2, #43	; 0x2b
 80159f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80159f8:	782a      	ldrb	r2, [r5, #0]
 80159fa:	2a2a      	cmp	r2, #42	; 0x2a
 80159fc:	d015      	beq.n	8015a2a <_svfiprintf_r+0xea>
 80159fe:	9a07      	ldr	r2, [sp, #28]
 8015a00:	462f      	mov	r7, r5
 8015a02:	2000      	movs	r0, #0
 8015a04:	250a      	movs	r5, #10
 8015a06:	4639      	mov	r1, r7
 8015a08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015a0c:	3b30      	subs	r3, #48	; 0x30
 8015a0e:	2b09      	cmp	r3, #9
 8015a10:	d94d      	bls.n	8015aae <_svfiprintf_r+0x16e>
 8015a12:	b1b8      	cbz	r0, 8015a44 <_svfiprintf_r+0x104>
 8015a14:	e00f      	b.n	8015a36 <_svfiprintf_r+0xf6>
 8015a16:	462f      	mov	r7, r5
 8015a18:	e7b8      	b.n	801598c <_svfiprintf_r+0x4c>
 8015a1a:	4a40      	ldr	r2, [pc, #256]	; (8015b1c <_svfiprintf_r+0x1dc>)
 8015a1c:	1a80      	subs	r0, r0, r2
 8015a1e:	fa0b f000 	lsl.w	r0, fp, r0
 8015a22:	4318      	orrs	r0, r3
 8015a24:	9004      	str	r0, [sp, #16]
 8015a26:	463d      	mov	r5, r7
 8015a28:	e7d3      	b.n	80159d2 <_svfiprintf_r+0x92>
 8015a2a:	9a03      	ldr	r2, [sp, #12]
 8015a2c:	1d11      	adds	r1, r2, #4
 8015a2e:	6812      	ldr	r2, [r2, #0]
 8015a30:	9103      	str	r1, [sp, #12]
 8015a32:	2a00      	cmp	r2, #0
 8015a34:	db01      	blt.n	8015a3a <_svfiprintf_r+0xfa>
 8015a36:	9207      	str	r2, [sp, #28]
 8015a38:	e004      	b.n	8015a44 <_svfiprintf_r+0x104>
 8015a3a:	4252      	negs	r2, r2
 8015a3c:	f043 0302 	orr.w	r3, r3, #2
 8015a40:	9207      	str	r2, [sp, #28]
 8015a42:	9304      	str	r3, [sp, #16]
 8015a44:	783b      	ldrb	r3, [r7, #0]
 8015a46:	2b2e      	cmp	r3, #46	; 0x2e
 8015a48:	d10c      	bne.n	8015a64 <_svfiprintf_r+0x124>
 8015a4a:	787b      	ldrb	r3, [r7, #1]
 8015a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8015a4e:	d133      	bne.n	8015ab8 <_svfiprintf_r+0x178>
 8015a50:	9b03      	ldr	r3, [sp, #12]
 8015a52:	1d1a      	adds	r2, r3, #4
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	9203      	str	r2, [sp, #12]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	bfb8      	it	lt
 8015a5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8015a60:	3702      	adds	r7, #2
 8015a62:	9305      	str	r3, [sp, #20]
 8015a64:	4d2e      	ldr	r5, [pc, #184]	; (8015b20 <_svfiprintf_r+0x1e0>)
 8015a66:	7839      	ldrb	r1, [r7, #0]
 8015a68:	2203      	movs	r2, #3
 8015a6a:	4628      	mov	r0, r5
 8015a6c:	f7f2 faf0 	bl	8008050 <memchr>
 8015a70:	b138      	cbz	r0, 8015a82 <_svfiprintf_r+0x142>
 8015a72:	2340      	movs	r3, #64	; 0x40
 8015a74:	1b40      	subs	r0, r0, r5
 8015a76:	fa03 f000 	lsl.w	r0, r3, r0
 8015a7a:	9b04      	ldr	r3, [sp, #16]
 8015a7c:	4303      	orrs	r3, r0
 8015a7e:	3701      	adds	r7, #1
 8015a80:	9304      	str	r3, [sp, #16]
 8015a82:	7839      	ldrb	r1, [r7, #0]
 8015a84:	4827      	ldr	r0, [pc, #156]	; (8015b24 <_svfiprintf_r+0x1e4>)
 8015a86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015a8a:	2206      	movs	r2, #6
 8015a8c:	1c7e      	adds	r6, r7, #1
 8015a8e:	f7f2 fadf 	bl	8008050 <memchr>
 8015a92:	2800      	cmp	r0, #0
 8015a94:	d038      	beq.n	8015b08 <_svfiprintf_r+0x1c8>
 8015a96:	4b24      	ldr	r3, [pc, #144]	; (8015b28 <_svfiprintf_r+0x1e8>)
 8015a98:	bb13      	cbnz	r3, 8015ae0 <_svfiprintf_r+0x1a0>
 8015a9a:	9b03      	ldr	r3, [sp, #12]
 8015a9c:	3307      	adds	r3, #7
 8015a9e:	f023 0307 	bic.w	r3, r3, #7
 8015aa2:	3308      	adds	r3, #8
 8015aa4:	9303      	str	r3, [sp, #12]
 8015aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015aa8:	444b      	add	r3, r9
 8015aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8015aac:	e76d      	b.n	801598a <_svfiprintf_r+0x4a>
 8015aae:	fb05 3202 	mla	r2, r5, r2, r3
 8015ab2:	2001      	movs	r0, #1
 8015ab4:	460f      	mov	r7, r1
 8015ab6:	e7a6      	b.n	8015a06 <_svfiprintf_r+0xc6>
 8015ab8:	2300      	movs	r3, #0
 8015aba:	3701      	adds	r7, #1
 8015abc:	9305      	str	r3, [sp, #20]
 8015abe:	4619      	mov	r1, r3
 8015ac0:	250a      	movs	r5, #10
 8015ac2:	4638      	mov	r0, r7
 8015ac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ac8:	3a30      	subs	r2, #48	; 0x30
 8015aca:	2a09      	cmp	r2, #9
 8015acc:	d903      	bls.n	8015ad6 <_svfiprintf_r+0x196>
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d0c8      	beq.n	8015a64 <_svfiprintf_r+0x124>
 8015ad2:	9105      	str	r1, [sp, #20]
 8015ad4:	e7c6      	b.n	8015a64 <_svfiprintf_r+0x124>
 8015ad6:	fb05 2101 	mla	r1, r5, r1, r2
 8015ada:	2301      	movs	r3, #1
 8015adc:	4607      	mov	r7, r0
 8015ade:	e7f0      	b.n	8015ac2 <_svfiprintf_r+0x182>
 8015ae0:	ab03      	add	r3, sp, #12
 8015ae2:	9300      	str	r3, [sp, #0]
 8015ae4:	4622      	mov	r2, r4
 8015ae6:	4b11      	ldr	r3, [pc, #68]	; (8015b2c <_svfiprintf_r+0x1ec>)
 8015ae8:	a904      	add	r1, sp, #16
 8015aea:	4640      	mov	r0, r8
 8015aec:	f7fe f816 	bl	8013b1c <_printf_float>
 8015af0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015af4:	4681      	mov	r9, r0
 8015af6:	d1d6      	bne.n	8015aa6 <_svfiprintf_r+0x166>
 8015af8:	89a3      	ldrh	r3, [r4, #12]
 8015afa:	065b      	lsls	r3, r3, #25
 8015afc:	f53f af35 	bmi.w	801596a <_svfiprintf_r+0x2a>
 8015b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015b02:	b01d      	add	sp, #116	; 0x74
 8015b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b08:	ab03      	add	r3, sp, #12
 8015b0a:	9300      	str	r3, [sp, #0]
 8015b0c:	4622      	mov	r2, r4
 8015b0e:	4b07      	ldr	r3, [pc, #28]	; (8015b2c <_svfiprintf_r+0x1ec>)
 8015b10:	a904      	add	r1, sp, #16
 8015b12:	4640      	mov	r0, r8
 8015b14:	f7fe fab8 	bl	8014088 <_printf_i>
 8015b18:	e7ea      	b.n	8015af0 <_svfiprintf_r+0x1b0>
 8015b1a:	bf00      	nop
 8015b1c:	0801667c 	.word	0x0801667c
 8015b20:	08016682 	.word	0x08016682
 8015b24:	08016686 	.word	0x08016686
 8015b28:	08013b1d 	.word	0x08013b1d
 8015b2c:	0801588d 	.word	0x0801588d

08015b30 <__sfputc_r>:
 8015b30:	6893      	ldr	r3, [r2, #8]
 8015b32:	3b01      	subs	r3, #1
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	b410      	push	{r4}
 8015b38:	6093      	str	r3, [r2, #8]
 8015b3a:	da08      	bge.n	8015b4e <__sfputc_r+0x1e>
 8015b3c:	6994      	ldr	r4, [r2, #24]
 8015b3e:	42a3      	cmp	r3, r4
 8015b40:	db01      	blt.n	8015b46 <__sfputc_r+0x16>
 8015b42:	290a      	cmp	r1, #10
 8015b44:	d103      	bne.n	8015b4e <__sfputc_r+0x1e>
 8015b46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b4a:	f000 b985 	b.w	8015e58 <__swbuf_r>
 8015b4e:	6813      	ldr	r3, [r2, #0]
 8015b50:	1c58      	adds	r0, r3, #1
 8015b52:	6010      	str	r0, [r2, #0]
 8015b54:	7019      	strb	r1, [r3, #0]
 8015b56:	4608      	mov	r0, r1
 8015b58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b5c:	4770      	bx	lr

08015b5e <__sfputs_r>:
 8015b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b60:	4606      	mov	r6, r0
 8015b62:	460f      	mov	r7, r1
 8015b64:	4614      	mov	r4, r2
 8015b66:	18d5      	adds	r5, r2, r3
 8015b68:	42ac      	cmp	r4, r5
 8015b6a:	d101      	bne.n	8015b70 <__sfputs_r+0x12>
 8015b6c:	2000      	movs	r0, #0
 8015b6e:	e007      	b.n	8015b80 <__sfputs_r+0x22>
 8015b70:	463a      	mov	r2, r7
 8015b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b76:	4630      	mov	r0, r6
 8015b78:	f7ff ffda 	bl	8015b30 <__sfputc_r>
 8015b7c:	1c43      	adds	r3, r0, #1
 8015b7e:	d1f3      	bne.n	8015b68 <__sfputs_r+0xa>
 8015b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015b84 <_vfiprintf_r>:
 8015b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b88:	460c      	mov	r4, r1
 8015b8a:	b09d      	sub	sp, #116	; 0x74
 8015b8c:	4617      	mov	r7, r2
 8015b8e:	461d      	mov	r5, r3
 8015b90:	4606      	mov	r6, r0
 8015b92:	b118      	cbz	r0, 8015b9c <_vfiprintf_r+0x18>
 8015b94:	6983      	ldr	r3, [r0, #24]
 8015b96:	b90b      	cbnz	r3, 8015b9c <_vfiprintf_r+0x18>
 8015b98:	f7ff fa46 	bl	8015028 <__sinit>
 8015b9c:	4b7c      	ldr	r3, [pc, #496]	; (8015d90 <_vfiprintf_r+0x20c>)
 8015b9e:	429c      	cmp	r4, r3
 8015ba0:	d158      	bne.n	8015c54 <_vfiprintf_r+0xd0>
 8015ba2:	6874      	ldr	r4, [r6, #4]
 8015ba4:	89a3      	ldrh	r3, [r4, #12]
 8015ba6:	0718      	lsls	r0, r3, #28
 8015ba8:	d55e      	bpl.n	8015c68 <_vfiprintf_r+0xe4>
 8015baa:	6923      	ldr	r3, [r4, #16]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d05b      	beq.n	8015c68 <_vfiprintf_r+0xe4>
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8015bb4:	2320      	movs	r3, #32
 8015bb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015bba:	2330      	movs	r3, #48	; 0x30
 8015bbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015bc0:	9503      	str	r5, [sp, #12]
 8015bc2:	f04f 0b01 	mov.w	fp, #1
 8015bc6:	46b8      	mov	r8, r7
 8015bc8:	4645      	mov	r5, r8
 8015bca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015bce:	b10b      	cbz	r3, 8015bd4 <_vfiprintf_r+0x50>
 8015bd0:	2b25      	cmp	r3, #37	; 0x25
 8015bd2:	d154      	bne.n	8015c7e <_vfiprintf_r+0xfa>
 8015bd4:	ebb8 0a07 	subs.w	sl, r8, r7
 8015bd8:	d00b      	beq.n	8015bf2 <_vfiprintf_r+0x6e>
 8015bda:	4653      	mov	r3, sl
 8015bdc:	463a      	mov	r2, r7
 8015bde:	4621      	mov	r1, r4
 8015be0:	4630      	mov	r0, r6
 8015be2:	f7ff ffbc 	bl	8015b5e <__sfputs_r>
 8015be6:	3001      	adds	r0, #1
 8015be8:	f000 80c2 	beq.w	8015d70 <_vfiprintf_r+0x1ec>
 8015bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bee:	4453      	add	r3, sl
 8015bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8015bf2:	f898 3000 	ldrb.w	r3, [r8]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	f000 80ba 	beq.w	8015d70 <_vfiprintf_r+0x1ec>
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8015c02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015c06:	9304      	str	r3, [sp, #16]
 8015c08:	9307      	str	r3, [sp, #28]
 8015c0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015c0e:	931a      	str	r3, [sp, #104]	; 0x68
 8015c10:	46a8      	mov	r8, r5
 8015c12:	2205      	movs	r2, #5
 8015c14:	f818 1b01 	ldrb.w	r1, [r8], #1
 8015c18:	485e      	ldr	r0, [pc, #376]	; (8015d94 <_vfiprintf_r+0x210>)
 8015c1a:	f7f2 fa19 	bl	8008050 <memchr>
 8015c1e:	9b04      	ldr	r3, [sp, #16]
 8015c20:	bb78      	cbnz	r0, 8015c82 <_vfiprintf_r+0xfe>
 8015c22:	06d9      	lsls	r1, r3, #27
 8015c24:	bf44      	itt	mi
 8015c26:	2220      	movmi	r2, #32
 8015c28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015c2c:	071a      	lsls	r2, r3, #28
 8015c2e:	bf44      	itt	mi
 8015c30:	222b      	movmi	r2, #43	; 0x2b
 8015c32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015c36:	782a      	ldrb	r2, [r5, #0]
 8015c38:	2a2a      	cmp	r2, #42	; 0x2a
 8015c3a:	d02a      	beq.n	8015c92 <_vfiprintf_r+0x10e>
 8015c3c:	9a07      	ldr	r2, [sp, #28]
 8015c3e:	46a8      	mov	r8, r5
 8015c40:	2000      	movs	r0, #0
 8015c42:	250a      	movs	r5, #10
 8015c44:	4641      	mov	r1, r8
 8015c46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c4a:	3b30      	subs	r3, #48	; 0x30
 8015c4c:	2b09      	cmp	r3, #9
 8015c4e:	d969      	bls.n	8015d24 <_vfiprintf_r+0x1a0>
 8015c50:	b360      	cbz	r0, 8015cac <_vfiprintf_r+0x128>
 8015c52:	e024      	b.n	8015c9e <_vfiprintf_r+0x11a>
 8015c54:	4b50      	ldr	r3, [pc, #320]	; (8015d98 <_vfiprintf_r+0x214>)
 8015c56:	429c      	cmp	r4, r3
 8015c58:	d101      	bne.n	8015c5e <_vfiprintf_r+0xda>
 8015c5a:	68b4      	ldr	r4, [r6, #8]
 8015c5c:	e7a2      	b.n	8015ba4 <_vfiprintf_r+0x20>
 8015c5e:	4b4f      	ldr	r3, [pc, #316]	; (8015d9c <_vfiprintf_r+0x218>)
 8015c60:	429c      	cmp	r4, r3
 8015c62:	bf08      	it	eq
 8015c64:	68f4      	ldreq	r4, [r6, #12]
 8015c66:	e79d      	b.n	8015ba4 <_vfiprintf_r+0x20>
 8015c68:	4621      	mov	r1, r4
 8015c6a:	4630      	mov	r0, r6
 8015c6c:	f000 f958 	bl	8015f20 <__swsetup_r>
 8015c70:	2800      	cmp	r0, #0
 8015c72:	d09d      	beq.n	8015bb0 <_vfiprintf_r+0x2c>
 8015c74:	f04f 30ff 	mov.w	r0, #4294967295
 8015c78:	b01d      	add	sp, #116	; 0x74
 8015c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c7e:	46a8      	mov	r8, r5
 8015c80:	e7a2      	b.n	8015bc8 <_vfiprintf_r+0x44>
 8015c82:	4a44      	ldr	r2, [pc, #272]	; (8015d94 <_vfiprintf_r+0x210>)
 8015c84:	1a80      	subs	r0, r0, r2
 8015c86:	fa0b f000 	lsl.w	r0, fp, r0
 8015c8a:	4318      	orrs	r0, r3
 8015c8c:	9004      	str	r0, [sp, #16]
 8015c8e:	4645      	mov	r5, r8
 8015c90:	e7be      	b.n	8015c10 <_vfiprintf_r+0x8c>
 8015c92:	9a03      	ldr	r2, [sp, #12]
 8015c94:	1d11      	adds	r1, r2, #4
 8015c96:	6812      	ldr	r2, [r2, #0]
 8015c98:	9103      	str	r1, [sp, #12]
 8015c9a:	2a00      	cmp	r2, #0
 8015c9c:	db01      	blt.n	8015ca2 <_vfiprintf_r+0x11e>
 8015c9e:	9207      	str	r2, [sp, #28]
 8015ca0:	e004      	b.n	8015cac <_vfiprintf_r+0x128>
 8015ca2:	4252      	negs	r2, r2
 8015ca4:	f043 0302 	orr.w	r3, r3, #2
 8015ca8:	9207      	str	r2, [sp, #28]
 8015caa:	9304      	str	r3, [sp, #16]
 8015cac:	f898 3000 	ldrb.w	r3, [r8]
 8015cb0:	2b2e      	cmp	r3, #46	; 0x2e
 8015cb2:	d10e      	bne.n	8015cd2 <_vfiprintf_r+0x14e>
 8015cb4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8015cba:	d138      	bne.n	8015d2e <_vfiprintf_r+0x1aa>
 8015cbc:	9b03      	ldr	r3, [sp, #12]
 8015cbe:	1d1a      	adds	r2, r3, #4
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	9203      	str	r2, [sp, #12]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	bfb8      	it	lt
 8015cc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8015ccc:	f108 0802 	add.w	r8, r8, #2
 8015cd0:	9305      	str	r3, [sp, #20]
 8015cd2:	4d33      	ldr	r5, [pc, #204]	; (8015da0 <_vfiprintf_r+0x21c>)
 8015cd4:	f898 1000 	ldrb.w	r1, [r8]
 8015cd8:	2203      	movs	r2, #3
 8015cda:	4628      	mov	r0, r5
 8015cdc:	f7f2 f9b8 	bl	8008050 <memchr>
 8015ce0:	b140      	cbz	r0, 8015cf4 <_vfiprintf_r+0x170>
 8015ce2:	2340      	movs	r3, #64	; 0x40
 8015ce4:	1b40      	subs	r0, r0, r5
 8015ce6:	fa03 f000 	lsl.w	r0, r3, r0
 8015cea:	9b04      	ldr	r3, [sp, #16]
 8015cec:	4303      	orrs	r3, r0
 8015cee:	f108 0801 	add.w	r8, r8, #1
 8015cf2:	9304      	str	r3, [sp, #16]
 8015cf4:	f898 1000 	ldrb.w	r1, [r8]
 8015cf8:	482a      	ldr	r0, [pc, #168]	; (8015da4 <_vfiprintf_r+0x220>)
 8015cfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015cfe:	2206      	movs	r2, #6
 8015d00:	f108 0701 	add.w	r7, r8, #1
 8015d04:	f7f2 f9a4 	bl	8008050 <memchr>
 8015d08:	2800      	cmp	r0, #0
 8015d0a:	d037      	beq.n	8015d7c <_vfiprintf_r+0x1f8>
 8015d0c:	4b26      	ldr	r3, [pc, #152]	; (8015da8 <_vfiprintf_r+0x224>)
 8015d0e:	bb1b      	cbnz	r3, 8015d58 <_vfiprintf_r+0x1d4>
 8015d10:	9b03      	ldr	r3, [sp, #12]
 8015d12:	3307      	adds	r3, #7
 8015d14:	f023 0307 	bic.w	r3, r3, #7
 8015d18:	3308      	adds	r3, #8
 8015d1a:	9303      	str	r3, [sp, #12]
 8015d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d1e:	444b      	add	r3, r9
 8015d20:	9309      	str	r3, [sp, #36]	; 0x24
 8015d22:	e750      	b.n	8015bc6 <_vfiprintf_r+0x42>
 8015d24:	fb05 3202 	mla	r2, r5, r2, r3
 8015d28:	2001      	movs	r0, #1
 8015d2a:	4688      	mov	r8, r1
 8015d2c:	e78a      	b.n	8015c44 <_vfiprintf_r+0xc0>
 8015d2e:	2300      	movs	r3, #0
 8015d30:	f108 0801 	add.w	r8, r8, #1
 8015d34:	9305      	str	r3, [sp, #20]
 8015d36:	4619      	mov	r1, r3
 8015d38:	250a      	movs	r5, #10
 8015d3a:	4640      	mov	r0, r8
 8015d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d40:	3a30      	subs	r2, #48	; 0x30
 8015d42:	2a09      	cmp	r2, #9
 8015d44:	d903      	bls.n	8015d4e <_vfiprintf_r+0x1ca>
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d0c3      	beq.n	8015cd2 <_vfiprintf_r+0x14e>
 8015d4a:	9105      	str	r1, [sp, #20]
 8015d4c:	e7c1      	b.n	8015cd2 <_vfiprintf_r+0x14e>
 8015d4e:	fb05 2101 	mla	r1, r5, r1, r2
 8015d52:	2301      	movs	r3, #1
 8015d54:	4680      	mov	r8, r0
 8015d56:	e7f0      	b.n	8015d3a <_vfiprintf_r+0x1b6>
 8015d58:	ab03      	add	r3, sp, #12
 8015d5a:	9300      	str	r3, [sp, #0]
 8015d5c:	4622      	mov	r2, r4
 8015d5e:	4b13      	ldr	r3, [pc, #76]	; (8015dac <_vfiprintf_r+0x228>)
 8015d60:	a904      	add	r1, sp, #16
 8015d62:	4630      	mov	r0, r6
 8015d64:	f7fd feda 	bl	8013b1c <_printf_float>
 8015d68:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015d6c:	4681      	mov	r9, r0
 8015d6e:	d1d5      	bne.n	8015d1c <_vfiprintf_r+0x198>
 8015d70:	89a3      	ldrh	r3, [r4, #12]
 8015d72:	065b      	lsls	r3, r3, #25
 8015d74:	f53f af7e 	bmi.w	8015c74 <_vfiprintf_r+0xf0>
 8015d78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015d7a:	e77d      	b.n	8015c78 <_vfiprintf_r+0xf4>
 8015d7c:	ab03      	add	r3, sp, #12
 8015d7e:	9300      	str	r3, [sp, #0]
 8015d80:	4622      	mov	r2, r4
 8015d82:	4b0a      	ldr	r3, [pc, #40]	; (8015dac <_vfiprintf_r+0x228>)
 8015d84:	a904      	add	r1, sp, #16
 8015d86:	4630      	mov	r0, r6
 8015d88:	f7fe f97e 	bl	8014088 <_printf_i>
 8015d8c:	e7ec      	b.n	8015d68 <_vfiprintf_r+0x1e4>
 8015d8e:	bf00      	nop
 8015d90:	0801653c 	.word	0x0801653c
 8015d94:	0801667c 	.word	0x0801667c
 8015d98:	0801655c 	.word	0x0801655c
 8015d9c:	0801651c 	.word	0x0801651c
 8015da0:	08016682 	.word	0x08016682
 8015da4:	08016686 	.word	0x08016686
 8015da8:	08013b1d 	.word	0x08013b1d
 8015dac:	08015b5f 	.word	0x08015b5f

08015db0 <_sbrk_r>:
 8015db0:	b538      	push	{r3, r4, r5, lr}
 8015db2:	4c06      	ldr	r4, [pc, #24]	; (8015dcc <_sbrk_r+0x1c>)
 8015db4:	2300      	movs	r3, #0
 8015db6:	4605      	mov	r5, r0
 8015db8:	4608      	mov	r0, r1
 8015dba:	6023      	str	r3, [r4, #0]
 8015dbc:	f7f8 fbec 	bl	800e598 <_sbrk>
 8015dc0:	1c43      	adds	r3, r0, #1
 8015dc2:	d102      	bne.n	8015dca <_sbrk_r+0x1a>
 8015dc4:	6823      	ldr	r3, [r4, #0]
 8015dc6:	b103      	cbz	r3, 8015dca <_sbrk_r+0x1a>
 8015dc8:	602b      	str	r3, [r5, #0]
 8015dca:	bd38      	pop	{r3, r4, r5, pc}
 8015dcc:	200146b4 	.word	0x200146b4

08015dd0 <__sread>:
 8015dd0:	b510      	push	{r4, lr}
 8015dd2:	460c      	mov	r4, r1
 8015dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015dd8:	f000 fa9a 	bl	8016310 <_read_r>
 8015ddc:	2800      	cmp	r0, #0
 8015dde:	bfab      	itete	ge
 8015de0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015de2:	89a3      	ldrhlt	r3, [r4, #12]
 8015de4:	181b      	addge	r3, r3, r0
 8015de6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015dea:	bfac      	ite	ge
 8015dec:	6563      	strge	r3, [r4, #84]	; 0x54
 8015dee:	81a3      	strhlt	r3, [r4, #12]
 8015df0:	bd10      	pop	{r4, pc}

08015df2 <__swrite>:
 8015df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015df6:	461f      	mov	r7, r3
 8015df8:	898b      	ldrh	r3, [r1, #12]
 8015dfa:	05db      	lsls	r3, r3, #23
 8015dfc:	4605      	mov	r5, r0
 8015dfe:	460c      	mov	r4, r1
 8015e00:	4616      	mov	r6, r2
 8015e02:	d505      	bpl.n	8015e10 <__swrite+0x1e>
 8015e04:	2302      	movs	r3, #2
 8015e06:	2200      	movs	r2, #0
 8015e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e0c:	f000 f9b6 	bl	801617c <_lseek_r>
 8015e10:	89a3      	ldrh	r3, [r4, #12]
 8015e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015e16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015e1a:	81a3      	strh	r3, [r4, #12]
 8015e1c:	4632      	mov	r2, r6
 8015e1e:	463b      	mov	r3, r7
 8015e20:	4628      	mov	r0, r5
 8015e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e26:	f000 b869 	b.w	8015efc <_write_r>

08015e2a <__sseek>:
 8015e2a:	b510      	push	{r4, lr}
 8015e2c:	460c      	mov	r4, r1
 8015e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e32:	f000 f9a3 	bl	801617c <_lseek_r>
 8015e36:	1c43      	adds	r3, r0, #1
 8015e38:	89a3      	ldrh	r3, [r4, #12]
 8015e3a:	bf15      	itete	ne
 8015e3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8015e3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015e42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015e46:	81a3      	strheq	r3, [r4, #12]
 8015e48:	bf18      	it	ne
 8015e4a:	81a3      	strhne	r3, [r4, #12]
 8015e4c:	bd10      	pop	{r4, pc}

08015e4e <__sclose>:
 8015e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e52:	f000 b8d3 	b.w	8015ffc <_close_r>
	...

08015e58 <__swbuf_r>:
 8015e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e5a:	460e      	mov	r6, r1
 8015e5c:	4614      	mov	r4, r2
 8015e5e:	4605      	mov	r5, r0
 8015e60:	b118      	cbz	r0, 8015e6a <__swbuf_r+0x12>
 8015e62:	6983      	ldr	r3, [r0, #24]
 8015e64:	b90b      	cbnz	r3, 8015e6a <__swbuf_r+0x12>
 8015e66:	f7ff f8df 	bl	8015028 <__sinit>
 8015e6a:	4b21      	ldr	r3, [pc, #132]	; (8015ef0 <__swbuf_r+0x98>)
 8015e6c:	429c      	cmp	r4, r3
 8015e6e:	d12a      	bne.n	8015ec6 <__swbuf_r+0x6e>
 8015e70:	686c      	ldr	r4, [r5, #4]
 8015e72:	69a3      	ldr	r3, [r4, #24]
 8015e74:	60a3      	str	r3, [r4, #8]
 8015e76:	89a3      	ldrh	r3, [r4, #12]
 8015e78:	071a      	lsls	r2, r3, #28
 8015e7a:	d52e      	bpl.n	8015eda <__swbuf_r+0x82>
 8015e7c:	6923      	ldr	r3, [r4, #16]
 8015e7e:	b363      	cbz	r3, 8015eda <__swbuf_r+0x82>
 8015e80:	6923      	ldr	r3, [r4, #16]
 8015e82:	6820      	ldr	r0, [r4, #0]
 8015e84:	1ac0      	subs	r0, r0, r3
 8015e86:	6963      	ldr	r3, [r4, #20]
 8015e88:	b2f6      	uxtb	r6, r6
 8015e8a:	4283      	cmp	r3, r0
 8015e8c:	4637      	mov	r7, r6
 8015e8e:	dc04      	bgt.n	8015e9a <__swbuf_r+0x42>
 8015e90:	4621      	mov	r1, r4
 8015e92:	4628      	mov	r0, r5
 8015e94:	f000 f948 	bl	8016128 <_fflush_r>
 8015e98:	bb28      	cbnz	r0, 8015ee6 <__swbuf_r+0x8e>
 8015e9a:	68a3      	ldr	r3, [r4, #8]
 8015e9c:	3b01      	subs	r3, #1
 8015e9e:	60a3      	str	r3, [r4, #8]
 8015ea0:	6823      	ldr	r3, [r4, #0]
 8015ea2:	1c5a      	adds	r2, r3, #1
 8015ea4:	6022      	str	r2, [r4, #0]
 8015ea6:	701e      	strb	r6, [r3, #0]
 8015ea8:	6963      	ldr	r3, [r4, #20]
 8015eaa:	3001      	adds	r0, #1
 8015eac:	4283      	cmp	r3, r0
 8015eae:	d004      	beq.n	8015eba <__swbuf_r+0x62>
 8015eb0:	89a3      	ldrh	r3, [r4, #12]
 8015eb2:	07db      	lsls	r3, r3, #31
 8015eb4:	d519      	bpl.n	8015eea <__swbuf_r+0x92>
 8015eb6:	2e0a      	cmp	r6, #10
 8015eb8:	d117      	bne.n	8015eea <__swbuf_r+0x92>
 8015eba:	4621      	mov	r1, r4
 8015ebc:	4628      	mov	r0, r5
 8015ebe:	f000 f933 	bl	8016128 <_fflush_r>
 8015ec2:	b190      	cbz	r0, 8015eea <__swbuf_r+0x92>
 8015ec4:	e00f      	b.n	8015ee6 <__swbuf_r+0x8e>
 8015ec6:	4b0b      	ldr	r3, [pc, #44]	; (8015ef4 <__swbuf_r+0x9c>)
 8015ec8:	429c      	cmp	r4, r3
 8015eca:	d101      	bne.n	8015ed0 <__swbuf_r+0x78>
 8015ecc:	68ac      	ldr	r4, [r5, #8]
 8015ece:	e7d0      	b.n	8015e72 <__swbuf_r+0x1a>
 8015ed0:	4b09      	ldr	r3, [pc, #36]	; (8015ef8 <__swbuf_r+0xa0>)
 8015ed2:	429c      	cmp	r4, r3
 8015ed4:	bf08      	it	eq
 8015ed6:	68ec      	ldreq	r4, [r5, #12]
 8015ed8:	e7cb      	b.n	8015e72 <__swbuf_r+0x1a>
 8015eda:	4621      	mov	r1, r4
 8015edc:	4628      	mov	r0, r5
 8015ede:	f000 f81f 	bl	8015f20 <__swsetup_r>
 8015ee2:	2800      	cmp	r0, #0
 8015ee4:	d0cc      	beq.n	8015e80 <__swbuf_r+0x28>
 8015ee6:	f04f 37ff 	mov.w	r7, #4294967295
 8015eea:	4638      	mov	r0, r7
 8015eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015eee:	bf00      	nop
 8015ef0:	0801653c 	.word	0x0801653c
 8015ef4:	0801655c 	.word	0x0801655c
 8015ef8:	0801651c 	.word	0x0801651c

08015efc <_write_r>:
 8015efc:	b538      	push	{r3, r4, r5, lr}
 8015efe:	4c07      	ldr	r4, [pc, #28]	; (8015f1c <_write_r+0x20>)
 8015f00:	4605      	mov	r5, r0
 8015f02:	4608      	mov	r0, r1
 8015f04:	4611      	mov	r1, r2
 8015f06:	2200      	movs	r2, #0
 8015f08:	6022      	str	r2, [r4, #0]
 8015f0a:	461a      	mov	r2, r3
 8015f0c:	f7f8 faf3 	bl	800e4f6 <_write>
 8015f10:	1c43      	adds	r3, r0, #1
 8015f12:	d102      	bne.n	8015f1a <_write_r+0x1e>
 8015f14:	6823      	ldr	r3, [r4, #0]
 8015f16:	b103      	cbz	r3, 8015f1a <_write_r+0x1e>
 8015f18:	602b      	str	r3, [r5, #0]
 8015f1a:	bd38      	pop	{r3, r4, r5, pc}
 8015f1c:	200146b4 	.word	0x200146b4

08015f20 <__swsetup_r>:
 8015f20:	4b32      	ldr	r3, [pc, #200]	; (8015fec <__swsetup_r+0xcc>)
 8015f22:	b570      	push	{r4, r5, r6, lr}
 8015f24:	681d      	ldr	r5, [r3, #0]
 8015f26:	4606      	mov	r6, r0
 8015f28:	460c      	mov	r4, r1
 8015f2a:	b125      	cbz	r5, 8015f36 <__swsetup_r+0x16>
 8015f2c:	69ab      	ldr	r3, [r5, #24]
 8015f2e:	b913      	cbnz	r3, 8015f36 <__swsetup_r+0x16>
 8015f30:	4628      	mov	r0, r5
 8015f32:	f7ff f879 	bl	8015028 <__sinit>
 8015f36:	4b2e      	ldr	r3, [pc, #184]	; (8015ff0 <__swsetup_r+0xd0>)
 8015f38:	429c      	cmp	r4, r3
 8015f3a:	d10f      	bne.n	8015f5c <__swsetup_r+0x3c>
 8015f3c:	686c      	ldr	r4, [r5, #4]
 8015f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f42:	b29a      	uxth	r2, r3
 8015f44:	0715      	lsls	r5, r2, #28
 8015f46:	d42c      	bmi.n	8015fa2 <__swsetup_r+0x82>
 8015f48:	06d0      	lsls	r0, r2, #27
 8015f4a:	d411      	bmi.n	8015f70 <__swsetup_r+0x50>
 8015f4c:	2209      	movs	r2, #9
 8015f4e:	6032      	str	r2, [r6, #0]
 8015f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f54:	81a3      	strh	r3, [r4, #12]
 8015f56:	f04f 30ff 	mov.w	r0, #4294967295
 8015f5a:	e03e      	b.n	8015fda <__swsetup_r+0xba>
 8015f5c:	4b25      	ldr	r3, [pc, #148]	; (8015ff4 <__swsetup_r+0xd4>)
 8015f5e:	429c      	cmp	r4, r3
 8015f60:	d101      	bne.n	8015f66 <__swsetup_r+0x46>
 8015f62:	68ac      	ldr	r4, [r5, #8]
 8015f64:	e7eb      	b.n	8015f3e <__swsetup_r+0x1e>
 8015f66:	4b24      	ldr	r3, [pc, #144]	; (8015ff8 <__swsetup_r+0xd8>)
 8015f68:	429c      	cmp	r4, r3
 8015f6a:	bf08      	it	eq
 8015f6c:	68ec      	ldreq	r4, [r5, #12]
 8015f6e:	e7e6      	b.n	8015f3e <__swsetup_r+0x1e>
 8015f70:	0751      	lsls	r1, r2, #29
 8015f72:	d512      	bpl.n	8015f9a <__swsetup_r+0x7a>
 8015f74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015f76:	b141      	cbz	r1, 8015f8a <__swsetup_r+0x6a>
 8015f78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015f7c:	4299      	cmp	r1, r3
 8015f7e:	d002      	beq.n	8015f86 <__swsetup_r+0x66>
 8015f80:	4630      	mov	r0, r6
 8015f82:	f7ff fbdb 	bl	801573c <_free_r>
 8015f86:	2300      	movs	r3, #0
 8015f88:	6363      	str	r3, [r4, #52]	; 0x34
 8015f8a:	89a3      	ldrh	r3, [r4, #12]
 8015f8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015f90:	81a3      	strh	r3, [r4, #12]
 8015f92:	2300      	movs	r3, #0
 8015f94:	6063      	str	r3, [r4, #4]
 8015f96:	6923      	ldr	r3, [r4, #16]
 8015f98:	6023      	str	r3, [r4, #0]
 8015f9a:	89a3      	ldrh	r3, [r4, #12]
 8015f9c:	f043 0308 	orr.w	r3, r3, #8
 8015fa0:	81a3      	strh	r3, [r4, #12]
 8015fa2:	6923      	ldr	r3, [r4, #16]
 8015fa4:	b94b      	cbnz	r3, 8015fba <__swsetup_r+0x9a>
 8015fa6:	89a3      	ldrh	r3, [r4, #12]
 8015fa8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015fb0:	d003      	beq.n	8015fba <__swsetup_r+0x9a>
 8015fb2:	4621      	mov	r1, r4
 8015fb4:	4630      	mov	r0, r6
 8015fb6:	f000 f917 	bl	80161e8 <__smakebuf_r>
 8015fba:	89a2      	ldrh	r2, [r4, #12]
 8015fbc:	f012 0301 	ands.w	r3, r2, #1
 8015fc0:	d00c      	beq.n	8015fdc <__swsetup_r+0xbc>
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	60a3      	str	r3, [r4, #8]
 8015fc6:	6963      	ldr	r3, [r4, #20]
 8015fc8:	425b      	negs	r3, r3
 8015fca:	61a3      	str	r3, [r4, #24]
 8015fcc:	6923      	ldr	r3, [r4, #16]
 8015fce:	b953      	cbnz	r3, 8015fe6 <__swsetup_r+0xc6>
 8015fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015fd4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015fd8:	d1ba      	bne.n	8015f50 <__swsetup_r+0x30>
 8015fda:	bd70      	pop	{r4, r5, r6, pc}
 8015fdc:	0792      	lsls	r2, r2, #30
 8015fde:	bf58      	it	pl
 8015fe0:	6963      	ldrpl	r3, [r4, #20]
 8015fe2:	60a3      	str	r3, [r4, #8]
 8015fe4:	e7f2      	b.n	8015fcc <__swsetup_r+0xac>
 8015fe6:	2000      	movs	r0, #0
 8015fe8:	e7f7      	b.n	8015fda <__swsetup_r+0xba>
 8015fea:	bf00      	nop
 8015fec:	20000018 	.word	0x20000018
 8015ff0:	0801653c 	.word	0x0801653c
 8015ff4:	0801655c 	.word	0x0801655c
 8015ff8:	0801651c 	.word	0x0801651c

08015ffc <_close_r>:
 8015ffc:	b538      	push	{r3, r4, r5, lr}
 8015ffe:	4c06      	ldr	r4, [pc, #24]	; (8016018 <_close_r+0x1c>)
 8016000:	2300      	movs	r3, #0
 8016002:	4605      	mov	r5, r0
 8016004:	4608      	mov	r0, r1
 8016006:	6023      	str	r3, [r4, #0]
 8016008:	f7f8 fa91 	bl	800e52e <_close>
 801600c:	1c43      	adds	r3, r0, #1
 801600e:	d102      	bne.n	8016016 <_close_r+0x1a>
 8016010:	6823      	ldr	r3, [r4, #0]
 8016012:	b103      	cbz	r3, 8016016 <_close_r+0x1a>
 8016014:	602b      	str	r3, [r5, #0]
 8016016:	bd38      	pop	{r3, r4, r5, pc}
 8016018:	200146b4 	.word	0x200146b4

0801601c <__sflush_r>:
 801601c:	898a      	ldrh	r2, [r1, #12]
 801601e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016022:	4605      	mov	r5, r0
 8016024:	0710      	lsls	r0, r2, #28
 8016026:	460c      	mov	r4, r1
 8016028:	d458      	bmi.n	80160dc <__sflush_r+0xc0>
 801602a:	684b      	ldr	r3, [r1, #4]
 801602c:	2b00      	cmp	r3, #0
 801602e:	dc05      	bgt.n	801603c <__sflush_r+0x20>
 8016030:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016032:	2b00      	cmp	r3, #0
 8016034:	dc02      	bgt.n	801603c <__sflush_r+0x20>
 8016036:	2000      	movs	r0, #0
 8016038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801603c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801603e:	2e00      	cmp	r6, #0
 8016040:	d0f9      	beq.n	8016036 <__sflush_r+0x1a>
 8016042:	2300      	movs	r3, #0
 8016044:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016048:	682f      	ldr	r7, [r5, #0]
 801604a:	6a21      	ldr	r1, [r4, #32]
 801604c:	602b      	str	r3, [r5, #0]
 801604e:	d032      	beq.n	80160b6 <__sflush_r+0x9a>
 8016050:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016052:	89a3      	ldrh	r3, [r4, #12]
 8016054:	075a      	lsls	r2, r3, #29
 8016056:	d505      	bpl.n	8016064 <__sflush_r+0x48>
 8016058:	6863      	ldr	r3, [r4, #4]
 801605a:	1ac0      	subs	r0, r0, r3
 801605c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801605e:	b10b      	cbz	r3, 8016064 <__sflush_r+0x48>
 8016060:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016062:	1ac0      	subs	r0, r0, r3
 8016064:	2300      	movs	r3, #0
 8016066:	4602      	mov	r2, r0
 8016068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801606a:	6a21      	ldr	r1, [r4, #32]
 801606c:	4628      	mov	r0, r5
 801606e:	47b0      	blx	r6
 8016070:	1c43      	adds	r3, r0, #1
 8016072:	89a3      	ldrh	r3, [r4, #12]
 8016074:	d106      	bne.n	8016084 <__sflush_r+0x68>
 8016076:	6829      	ldr	r1, [r5, #0]
 8016078:	291d      	cmp	r1, #29
 801607a:	d848      	bhi.n	801610e <__sflush_r+0xf2>
 801607c:	4a29      	ldr	r2, [pc, #164]	; (8016124 <__sflush_r+0x108>)
 801607e:	40ca      	lsrs	r2, r1
 8016080:	07d6      	lsls	r6, r2, #31
 8016082:	d544      	bpl.n	801610e <__sflush_r+0xf2>
 8016084:	2200      	movs	r2, #0
 8016086:	6062      	str	r2, [r4, #4]
 8016088:	04d9      	lsls	r1, r3, #19
 801608a:	6922      	ldr	r2, [r4, #16]
 801608c:	6022      	str	r2, [r4, #0]
 801608e:	d504      	bpl.n	801609a <__sflush_r+0x7e>
 8016090:	1c42      	adds	r2, r0, #1
 8016092:	d101      	bne.n	8016098 <__sflush_r+0x7c>
 8016094:	682b      	ldr	r3, [r5, #0]
 8016096:	b903      	cbnz	r3, 801609a <__sflush_r+0x7e>
 8016098:	6560      	str	r0, [r4, #84]	; 0x54
 801609a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801609c:	602f      	str	r7, [r5, #0]
 801609e:	2900      	cmp	r1, #0
 80160a0:	d0c9      	beq.n	8016036 <__sflush_r+0x1a>
 80160a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80160a6:	4299      	cmp	r1, r3
 80160a8:	d002      	beq.n	80160b0 <__sflush_r+0x94>
 80160aa:	4628      	mov	r0, r5
 80160ac:	f7ff fb46 	bl	801573c <_free_r>
 80160b0:	2000      	movs	r0, #0
 80160b2:	6360      	str	r0, [r4, #52]	; 0x34
 80160b4:	e7c0      	b.n	8016038 <__sflush_r+0x1c>
 80160b6:	2301      	movs	r3, #1
 80160b8:	4628      	mov	r0, r5
 80160ba:	47b0      	blx	r6
 80160bc:	1c41      	adds	r1, r0, #1
 80160be:	d1c8      	bne.n	8016052 <__sflush_r+0x36>
 80160c0:	682b      	ldr	r3, [r5, #0]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d0c5      	beq.n	8016052 <__sflush_r+0x36>
 80160c6:	2b1d      	cmp	r3, #29
 80160c8:	d001      	beq.n	80160ce <__sflush_r+0xb2>
 80160ca:	2b16      	cmp	r3, #22
 80160cc:	d101      	bne.n	80160d2 <__sflush_r+0xb6>
 80160ce:	602f      	str	r7, [r5, #0]
 80160d0:	e7b1      	b.n	8016036 <__sflush_r+0x1a>
 80160d2:	89a3      	ldrh	r3, [r4, #12]
 80160d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80160d8:	81a3      	strh	r3, [r4, #12]
 80160da:	e7ad      	b.n	8016038 <__sflush_r+0x1c>
 80160dc:	690f      	ldr	r7, [r1, #16]
 80160de:	2f00      	cmp	r7, #0
 80160e0:	d0a9      	beq.n	8016036 <__sflush_r+0x1a>
 80160e2:	0793      	lsls	r3, r2, #30
 80160e4:	680e      	ldr	r6, [r1, #0]
 80160e6:	bf08      	it	eq
 80160e8:	694b      	ldreq	r3, [r1, #20]
 80160ea:	600f      	str	r7, [r1, #0]
 80160ec:	bf18      	it	ne
 80160ee:	2300      	movne	r3, #0
 80160f0:	eba6 0807 	sub.w	r8, r6, r7
 80160f4:	608b      	str	r3, [r1, #8]
 80160f6:	f1b8 0f00 	cmp.w	r8, #0
 80160fa:	dd9c      	ble.n	8016036 <__sflush_r+0x1a>
 80160fc:	4643      	mov	r3, r8
 80160fe:	463a      	mov	r2, r7
 8016100:	6a21      	ldr	r1, [r4, #32]
 8016102:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016104:	4628      	mov	r0, r5
 8016106:	47b0      	blx	r6
 8016108:	2800      	cmp	r0, #0
 801610a:	dc06      	bgt.n	801611a <__sflush_r+0xfe>
 801610c:	89a3      	ldrh	r3, [r4, #12]
 801610e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016112:	81a3      	strh	r3, [r4, #12]
 8016114:	f04f 30ff 	mov.w	r0, #4294967295
 8016118:	e78e      	b.n	8016038 <__sflush_r+0x1c>
 801611a:	4407      	add	r7, r0
 801611c:	eba8 0800 	sub.w	r8, r8, r0
 8016120:	e7e9      	b.n	80160f6 <__sflush_r+0xda>
 8016122:	bf00      	nop
 8016124:	20400001 	.word	0x20400001

08016128 <_fflush_r>:
 8016128:	b538      	push	{r3, r4, r5, lr}
 801612a:	690b      	ldr	r3, [r1, #16]
 801612c:	4605      	mov	r5, r0
 801612e:	460c      	mov	r4, r1
 8016130:	b1db      	cbz	r3, 801616a <_fflush_r+0x42>
 8016132:	b118      	cbz	r0, 801613c <_fflush_r+0x14>
 8016134:	6983      	ldr	r3, [r0, #24]
 8016136:	b90b      	cbnz	r3, 801613c <_fflush_r+0x14>
 8016138:	f7fe ff76 	bl	8015028 <__sinit>
 801613c:	4b0c      	ldr	r3, [pc, #48]	; (8016170 <_fflush_r+0x48>)
 801613e:	429c      	cmp	r4, r3
 8016140:	d109      	bne.n	8016156 <_fflush_r+0x2e>
 8016142:	686c      	ldr	r4, [r5, #4]
 8016144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016148:	b17b      	cbz	r3, 801616a <_fflush_r+0x42>
 801614a:	4621      	mov	r1, r4
 801614c:	4628      	mov	r0, r5
 801614e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016152:	f7ff bf63 	b.w	801601c <__sflush_r>
 8016156:	4b07      	ldr	r3, [pc, #28]	; (8016174 <_fflush_r+0x4c>)
 8016158:	429c      	cmp	r4, r3
 801615a:	d101      	bne.n	8016160 <_fflush_r+0x38>
 801615c:	68ac      	ldr	r4, [r5, #8]
 801615e:	e7f1      	b.n	8016144 <_fflush_r+0x1c>
 8016160:	4b05      	ldr	r3, [pc, #20]	; (8016178 <_fflush_r+0x50>)
 8016162:	429c      	cmp	r4, r3
 8016164:	bf08      	it	eq
 8016166:	68ec      	ldreq	r4, [r5, #12]
 8016168:	e7ec      	b.n	8016144 <_fflush_r+0x1c>
 801616a:	2000      	movs	r0, #0
 801616c:	bd38      	pop	{r3, r4, r5, pc}
 801616e:	bf00      	nop
 8016170:	0801653c 	.word	0x0801653c
 8016174:	0801655c 	.word	0x0801655c
 8016178:	0801651c 	.word	0x0801651c

0801617c <_lseek_r>:
 801617c:	b538      	push	{r3, r4, r5, lr}
 801617e:	4c07      	ldr	r4, [pc, #28]	; (801619c <_lseek_r+0x20>)
 8016180:	4605      	mov	r5, r0
 8016182:	4608      	mov	r0, r1
 8016184:	4611      	mov	r1, r2
 8016186:	2200      	movs	r2, #0
 8016188:	6022      	str	r2, [r4, #0]
 801618a:	461a      	mov	r2, r3
 801618c:	f7f8 f9f6 	bl	800e57c <_lseek>
 8016190:	1c43      	adds	r3, r0, #1
 8016192:	d102      	bne.n	801619a <_lseek_r+0x1e>
 8016194:	6823      	ldr	r3, [r4, #0]
 8016196:	b103      	cbz	r3, 801619a <_lseek_r+0x1e>
 8016198:	602b      	str	r3, [r5, #0]
 801619a:	bd38      	pop	{r3, r4, r5, pc}
 801619c:	200146b4 	.word	0x200146b4

080161a0 <__swhatbuf_r>:
 80161a0:	b570      	push	{r4, r5, r6, lr}
 80161a2:	460e      	mov	r6, r1
 80161a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80161a8:	2900      	cmp	r1, #0
 80161aa:	b096      	sub	sp, #88	; 0x58
 80161ac:	4614      	mov	r4, r2
 80161ae:	461d      	mov	r5, r3
 80161b0:	da07      	bge.n	80161c2 <__swhatbuf_r+0x22>
 80161b2:	2300      	movs	r3, #0
 80161b4:	602b      	str	r3, [r5, #0]
 80161b6:	89b3      	ldrh	r3, [r6, #12]
 80161b8:	061a      	lsls	r2, r3, #24
 80161ba:	d410      	bmi.n	80161de <__swhatbuf_r+0x3e>
 80161bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80161c0:	e00e      	b.n	80161e0 <__swhatbuf_r+0x40>
 80161c2:	466a      	mov	r2, sp
 80161c4:	f000 f8c4 	bl	8016350 <_fstat_r>
 80161c8:	2800      	cmp	r0, #0
 80161ca:	dbf2      	blt.n	80161b2 <__swhatbuf_r+0x12>
 80161cc:	9a01      	ldr	r2, [sp, #4]
 80161ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80161d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80161d6:	425a      	negs	r2, r3
 80161d8:	415a      	adcs	r2, r3
 80161da:	602a      	str	r2, [r5, #0]
 80161dc:	e7ee      	b.n	80161bc <__swhatbuf_r+0x1c>
 80161de:	2340      	movs	r3, #64	; 0x40
 80161e0:	2000      	movs	r0, #0
 80161e2:	6023      	str	r3, [r4, #0]
 80161e4:	b016      	add	sp, #88	; 0x58
 80161e6:	bd70      	pop	{r4, r5, r6, pc}

080161e8 <__smakebuf_r>:
 80161e8:	898b      	ldrh	r3, [r1, #12]
 80161ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80161ec:	079d      	lsls	r5, r3, #30
 80161ee:	4606      	mov	r6, r0
 80161f0:	460c      	mov	r4, r1
 80161f2:	d507      	bpl.n	8016204 <__smakebuf_r+0x1c>
 80161f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80161f8:	6023      	str	r3, [r4, #0]
 80161fa:	6123      	str	r3, [r4, #16]
 80161fc:	2301      	movs	r3, #1
 80161fe:	6163      	str	r3, [r4, #20]
 8016200:	b002      	add	sp, #8
 8016202:	bd70      	pop	{r4, r5, r6, pc}
 8016204:	ab01      	add	r3, sp, #4
 8016206:	466a      	mov	r2, sp
 8016208:	f7ff ffca 	bl	80161a0 <__swhatbuf_r>
 801620c:	9900      	ldr	r1, [sp, #0]
 801620e:	4605      	mov	r5, r0
 8016210:	4630      	mov	r0, r6
 8016212:	f7ff fae1 	bl	80157d8 <_malloc_r>
 8016216:	b948      	cbnz	r0, 801622c <__smakebuf_r+0x44>
 8016218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801621c:	059a      	lsls	r2, r3, #22
 801621e:	d4ef      	bmi.n	8016200 <__smakebuf_r+0x18>
 8016220:	f023 0303 	bic.w	r3, r3, #3
 8016224:	f043 0302 	orr.w	r3, r3, #2
 8016228:	81a3      	strh	r3, [r4, #12]
 801622a:	e7e3      	b.n	80161f4 <__smakebuf_r+0xc>
 801622c:	4b0d      	ldr	r3, [pc, #52]	; (8016264 <__smakebuf_r+0x7c>)
 801622e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016230:	89a3      	ldrh	r3, [r4, #12]
 8016232:	6020      	str	r0, [r4, #0]
 8016234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016238:	81a3      	strh	r3, [r4, #12]
 801623a:	9b00      	ldr	r3, [sp, #0]
 801623c:	6163      	str	r3, [r4, #20]
 801623e:	9b01      	ldr	r3, [sp, #4]
 8016240:	6120      	str	r0, [r4, #16]
 8016242:	b15b      	cbz	r3, 801625c <__smakebuf_r+0x74>
 8016244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016248:	4630      	mov	r0, r6
 801624a:	f000 f893 	bl	8016374 <_isatty_r>
 801624e:	b128      	cbz	r0, 801625c <__smakebuf_r+0x74>
 8016250:	89a3      	ldrh	r3, [r4, #12]
 8016252:	f023 0303 	bic.w	r3, r3, #3
 8016256:	f043 0301 	orr.w	r3, r3, #1
 801625a:	81a3      	strh	r3, [r4, #12]
 801625c:	89a3      	ldrh	r3, [r4, #12]
 801625e:	431d      	orrs	r5, r3
 8016260:	81a5      	strh	r5, [r4, #12]
 8016262:	e7cd      	b.n	8016200 <__smakebuf_r+0x18>
 8016264:	08014ff1 	.word	0x08014ff1

08016268 <__ascii_mbtowc>:
 8016268:	b082      	sub	sp, #8
 801626a:	b901      	cbnz	r1, 801626e <__ascii_mbtowc+0x6>
 801626c:	a901      	add	r1, sp, #4
 801626e:	b142      	cbz	r2, 8016282 <__ascii_mbtowc+0x1a>
 8016270:	b14b      	cbz	r3, 8016286 <__ascii_mbtowc+0x1e>
 8016272:	7813      	ldrb	r3, [r2, #0]
 8016274:	600b      	str	r3, [r1, #0]
 8016276:	7812      	ldrb	r2, [r2, #0]
 8016278:	1c10      	adds	r0, r2, #0
 801627a:	bf18      	it	ne
 801627c:	2001      	movne	r0, #1
 801627e:	b002      	add	sp, #8
 8016280:	4770      	bx	lr
 8016282:	4610      	mov	r0, r2
 8016284:	e7fb      	b.n	801627e <__ascii_mbtowc+0x16>
 8016286:	f06f 0001 	mvn.w	r0, #1
 801628a:	e7f8      	b.n	801627e <__ascii_mbtowc+0x16>

0801628c <memmove>:
 801628c:	4288      	cmp	r0, r1
 801628e:	b510      	push	{r4, lr}
 8016290:	eb01 0302 	add.w	r3, r1, r2
 8016294:	d807      	bhi.n	80162a6 <memmove+0x1a>
 8016296:	1e42      	subs	r2, r0, #1
 8016298:	4299      	cmp	r1, r3
 801629a:	d00a      	beq.n	80162b2 <memmove+0x26>
 801629c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80162a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80162a4:	e7f8      	b.n	8016298 <memmove+0xc>
 80162a6:	4283      	cmp	r3, r0
 80162a8:	d9f5      	bls.n	8016296 <memmove+0xa>
 80162aa:	1881      	adds	r1, r0, r2
 80162ac:	1ad2      	subs	r2, r2, r3
 80162ae:	42d3      	cmn	r3, r2
 80162b0:	d100      	bne.n	80162b4 <memmove+0x28>
 80162b2:	bd10      	pop	{r4, pc}
 80162b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80162b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80162bc:	e7f7      	b.n	80162ae <memmove+0x22>

080162be <__malloc_lock>:
 80162be:	4770      	bx	lr

080162c0 <__malloc_unlock>:
 80162c0:	4770      	bx	lr

080162c2 <_realloc_r>:
 80162c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162c4:	4607      	mov	r7, r0
 80162c6:	4614      	mov	r4, r2
 80162c8:	460e      	mov	r6, r1
 80162ca:	b921      	cbnz	r1, 80162d6 <_realloc_r+0x14>
 80162cc:	4611      	mov	r1, r2
 80162ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80162d2:	f7ff ba81 	b.w	80157d8 <_malloc_r>
 80162d6:	b922      	cbnz	r2, 80162e2 <_realloc_r+0x20>
 80162d8:	f7ff fa30 	bl	801573c <_free_r>
 80162dc:	4625      	mov	r5, r4
 80162de:	4628      	mov	r0, r5
 80162e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162e2:	f000 f857 	bl	8016394 <_malloc_usable_size_r>
 80162e6:	42a0      	cmp	r0, r4
 80162e8:	d20f      	bcs.n	801630a <_realloc_r+0x48>
 80162ea:	4621      	mov	r1, r4
 80162ec:	4638      	mov	r0, r7
 80162ee:	f7ff fa73 	bl	80157d8 <_malloc_r>
 80162f2:	4605      	mov	r5, r0
 80162f4:	2800      	cmp	r0, #0
 80162f6:	d0f2      	beq.n	80162de <_realloc_r+0x1c>
 80162f8:	4631      	mov	r1, r6
 80162fa:	4622      	mov	r2, r4
 80162fc:	f7fd fb66 	bl	80139cc <memcpy>
 8016300:	4631      	mov	r1, r6
 8016302:	4638      	mov	r0, r7
 8016304:	f7ff fa1a 	bl	801573c <_free_r>
 8016308:	e7e9      	b.n	80162de <_realloc_r+0x1c>
 801630a:	4635      	mov	r5, r6
 801630c:	e7e7      	b.n	80162de <_realloc_r+0x1c>
	...

08016310 <_read_r>:
 8016310:	b538      	push	{r3, r4, r5, lr}
 8016312:	4c07      	ldr	r4, [pc, #28]	; (8016330 <_read_r+0x20>)
 8016314:	4605      	mov	r5, r0
 8016316:	4608      	mov	r0, r1
 8016318:	4611      	mov	r1, r2
 801631a:	2200      	movs	r2, #0
 801631c:	6022      	str	r2, [r4, #0]
 801631e:	461a      	mov	r2, r3
 8016320:	f7f8 f8cc 	bl	800e4bc <_read>
 8016324:	1c43      	adds	r3, r0, #1
 8016326:	d102      	bne.n	801632e <_read_r+0x1e>
 8016328:	6823      	ldr	r3, [r4, #0]
 801632a:	b103      	cbz	r3, 801632e <_read_r+0x1e>
 801632c:	602b      	str	r3, [r5, #0]
 801632e:	bd38      	pop	{r3, r4, r5, pc}
 8016330:	200146b4 	.word	0x200146b4

08016334 <__ascii_wctomb>:
 8016334:	b149      	cbz	r1, 801634a <__ascii_wctomb+0x16>
 8016336:	2aff      	cmp	r2, #255	; 0xff
 8016338:	bf85      	ittet	hi
 801633a:	238a      	movhi	r3, #138	; 0x8a
 801633c:	6003      	strhi	r3, [r0, #0]
 801633e:	700a      	strbls	r2, [r1, #0]
 8016340:	f04f 30ff 	movhi.w	r0, #4294967295
 8016344:	bf98      	it	ls
 8016346:	2001      	movls	r0, #1
 8016348:	4770      	bx	lr
 801634a:	4608      	mov	r0, r1
 801634c:	4770      	bx	lr
	...

08016350 <_fstat_r>:
 8016350:	b538      	push	{r3, r4, r5, lr}
 8016352:	4c07      	ldr	r4, [pc, #28]	; (8016370 <_fstat_r+0x20>)
 8016354:	2300      	movs	r3, #0
 8016356:	4605      	mov	r5, r0
 8016358:	4608      	mov	r0, r1
 801635a:	4611      	mov	r1, r2
 801635c:	6023      	str	r3, [r4, #0]
 801635e:	f7f8 f8f2 	bl	800e546 <_fstat>
 8016362:	1c43      	adds	r3, r0, #1
 8016364:	d102      	bne.n	801636c <_fstat_r+0x1c>
 8016366:	6823      	ldr	r3, [r4, #0]
 8016368:	b103      	cbz	r3, 801636c <_fstat_r+0x1c>
 801636a:	602b      	str	r3, [r5, #0]
 801636c:	bd38      	pop	{r3, r4, r5, pc}
 801636e:	bf00      	nop
 8016370:	200146b4 	.word	0x200146b4

08016374 <_isatty_r>:
 8016374:	b538      	push	{r3, r4, r5, lr}
 8016376:	4c06      	ldr	r4, [pc, #24]	; (8016390 <_isatty_r+0x1c>)
 8016378:	2300      	movs	r3, #0
 801637a:	4605      	mov	r5, r0
 801637c:	4608      	mov	r0, r1
 801637e:	6023      	str	r3, [r4, #0]
 8016380:	f7f8 f8f1 	bl	800e566 <_isatty>
 8016384:	1c43      	adds	r3, r0, #1
 8016386:	d102      	bne.n	801638e <_isatty_r+0x1a>
 8016388:	6823      	ldr	r3, [r4, #0]
 801638a:	b103      	cbz	r3, 801638e <_isatty_r+0x1a>
 801638c:	602b      	str	r3, [r5, #0]
 801638e:	bd38      	pop	{r3, r4, r5, pc}
 8016390:	200146b4 	.word	0x200146b4

08016394 <_malloc_usable_size_r>:
 8016394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016398:	1f18      	subs	r0, r3, #4
 801639a:	2b00      	cmp	r3, #0
 801639c:	bfbc      	itt	lt
 801639e:	580b      	ldrlt	r3, [r1, r0]
 80163a0:	18c0      	addlt	r0, r0, r3
 80163a2:	4770      	bx	lr

080163a4 <roundf>:
 80163a4:	ee10 0a10 	vmov	r0, s0
 80163a8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80163ac:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80163b0:	2a16      	cmp	r2, #22
 80163b2:	dc15      	bgt.n	80163e0 <roundf+0x3c>
 80163b4:	2a00      	cmp	r2, #0
 80163b6:	da08      	bge.n	80163ca <roundf+0x26>
 80163b8:	3201      	adds	r2, #1
 80163ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80163be:	d101      	bne.n	80163c4 <roundf+0x20>
 80163c0:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80163c4:	ee00 3a10 	vmov	s0, r3
 80163c8:	4770      	bx	lr
 80163ca:	4908      	ldr	r1, [pc, #32]	; (80163ec <roundf+0x48>)
 80163cc:	4111      	asrs	r1, r2
 80163ce:	4208      	tst	r0, r1
 80163d0:	d0fa      	beq.n	80163c8 <roundf+0x24>
 80163d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80163d6:	4113      	asrs	r3, r2
 80163d8:	4403      	add	r3, r0
 80163da:	ea23 0301 	bic.w	r3, r3, r1
 80163de:	e7f1      	b.n	80163c4 <roundf+0x20>
 80163e0:	2a80      	cmp	r2, #128	; 0x80
 80163e2:	d1f1      	bne.n	80163c8 <roundf+0x24>
 80163e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80163e8:	4770      	bx	lr
 80163ea:	bf00      	nop
 80163ec:	007fffff 	.word	0x007fffff

080163f0 <_init>:
 80163f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163f2:	bf00      	nop
 80163f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80163f6:	bc08      	pop	{r3}
 80163f8:	469e      	mov	lr, r3
 80163fa:	4770      	bx	lr

080163fc <_fini>:
 80163fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163fe:	bf00      	nop
 8016400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016402:	bc08      	pop	{r3}
 8016404:	469e      	mov	lr, r3
 8016406:	4770      	bx	lr
